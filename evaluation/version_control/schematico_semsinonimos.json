{
  "docs": [
    {
      "id": 20745393,
      "title": "Sunsetting Mercurial Support in Bitbucket",
      "search": [
        "Sunsetting Mercurial Support in Bitbucket",
        "Normal",
        "https://bitbucket.org/blog/sunsetting-mercurial-support-in-bitbucket",
        "[Update Aug 26, 2020] All hg repos have now been disabled and cannot be accessed.[Update July 1, 2020] Today, mercurial repositories, snippets, and wikis will turn to read-only mode. After July 8th, 2020 they will no longer be accessible. The version control software market has evolved a lot since Bitbucket began in 2008. When we launched, centralized version control was the norm and we only supported Mercurial repos. But Git adoption has grown over the years to become the default system, helping teams of all sizes work faster as they become more distributed.As we surpass 10 million registered users on the platform, we're at a point in our growth where we are conducting a deeper evaluation of the market and how we can best support our users going forward. After much consideration, we've decided to remove Mercurial support from Bitbucket Cloud and its API. Mercurial features and repositories will be officially deprecated on July 1, 2020.Read on to learn more about this decision, the important timelines, and get migration resources and support. The timeline and how this may affect your team Here are the key dates as we sunset Mercurial functionality: February 1, 2020: users will no longer be able to create new Mercurial repositories [Extended] July 1, 2020: users will not be able to use Mercurial features. All hg repos, wikis, and snippets will be in read-only mode. Heres why were focusing on Git This wasnt an easy decision, and Mercurial will always have a special place in Bitbuckets history. DevOps adoption has skyrocketed over the last decade and our customers are adopting this new way of working at an exponential rate. In this time, Bitbucket has steadily grown from being just a version control management tool to being a place to manage the entire software development lifecycle. And there's always more work to be done. This year we will concentrate on building deeper integrations to enhance automation and collaboration. Our improvements will make it even easier and safer to plan, code, test, and deploy all from within Bitbucket. Building quality features requires intense focus, and supporting two version control systems means splitting focus doubling shipping time and technical overhead. With Git being the more popularly used tool, Mercurial runs the risk of overlooked issues as we scale. According to a Stack Overflow Developer Survey, almost 90% of developers use Git, while Mercurial is the least popular version control system with only about 3% developer adoption. In fact, Mercurial usage on Bitbucket is steadily declining, and the percentage of new Bitbucket users choosing Mercurial has fallen to less than 1%. This deprecation will enable us to focus on building the best possible experience for our users. How to migrate and export We recommend that teams migrate their existing Mercurial repos to Git. There are various Git conversion tools in the market, including hg-fast-export and hg-git mercurial plugin. We are happy to support your migration, and you can find a discussion about available options in our dedicated Community thread. If you prefer to continue using the Mercurial system, there are a number of free and paid Mercurial hosting services. We realize that there is no one-size-fits-all solution. That's why we've created the following resources to best equip you with the knowledge and tools for a seamless transition: A Community thread to discuss conversion tools, migration, tips, and offer troubleshooting help A Git tutorial that covers anywhere from the basics of creating pull requests to rebasing and Git hooks We want to thank all the loyal users who have grown with us over the years. We look forward to this new focus on our roadmap and to introducing exciting new features. ",
        "It's funny to see how the whole world concentrates on this Git thing, while there is a treasure trove called Mercurial.<p>Mercurial was made for humans. It is seriously convenient and productive. Something I cannot say about Git, which more reminds me of an adhoc job.<p>I use both Git and Mercurial on daily basis. But my preference goes to Mercurial: it is just more sane in a big way. It is clearly a piece of art and love.",
        "It's very sad to see bitbucket dropping mercurial support. Now only Facebook and volunteers are keeping mercurial alive. \nSometimes technically better architecture and user interface lose to a non user friendly hard solutions due to inertia of mass adoption.<p>So a lesson in Software development is similar to betamax and VHS, so marketing is still a winner over technically superior architecture and ease of use. GitHub successfully marketed git, so git and GitHub are synonymous for most developers. Now majority of open source projects are reliant on a single proprietary solution Github by Microsoft, for managing code and project. Can understand the difficulty of bitbucket, when Python language itself moved out of mercurial due to the same inertia.<p>Hopefully gitlab can come out with mercurial support to migrate projects using it from bitbucket.<p>For people who believe in self hosted solution can install Kallithea (<a href=\"https://kallithea-scm.org\" rel=\"nofollow\">https://kallithea-scm.org</a>) or Rhodecode open source edition. Kallithea is used by Unity engine to manage their source code internally with mercurial."
      ],
      "relevant": "true"
    },
    {
      "id": 20646674,
      "title": "The market figured out Gitlab’s secret",
      "search": [
        "The market figured out Gitlab’s secret",
        "Normal",
        "https://about.gitlab.com/2019/08/08/built-in-ci-cd-version-control-secret/",
        "Theres a movement in the DevOps industry and the world right now: to do more in a simple way that inspires us to innovate. GitLab started this trend in the DevOps space by simplifying the delivery of code by combining GitLab CI and GitLab version control. We didn't originally buy into the idea that this was the right way to do things, but it became our secret capability that weve doubled down on. Lets combine applications The story starts with Kamil Trzciski, now a distinguished engineer at GitLab. Soon after Kamil came to work for GitLab full time, he began talking with me and my co-founder, Dmitriy Zaporozhets, suggesting that we bring our two projects together GitLab Version Control and GitLab CI, making it into one application. Dmitriy didnt think it was a good idea. GitLab version control and CI were already perfectly integrated with single sign-on and APIs that fit like a glove. He thought that combining them would make GitLab a monolith of an application, that it would be disastrous for our code quality, and an unfortunate user experience. After time though, Dmitriy started to think it was the right idea as it would deliver a seamless experience for developers to deliver code quickly. After Dmitriy was convinced, they came to me. I also didnt think it was a good idea. At the time I believed we needed to have tools that are composable and that could integrate with other tools, in line with the Unix philosophy. Kamil convinced me to think about the efficiencies of having a single application. Well, if you dont believe that its better for a user, at least believe its more efficient for us, because we only have to release one application instead of two. Efficiency is in our values. - Kamil Trzcinski, distinguished engineer at GitLab Realizing the future of DevOps is a single application That made sense to me and I no longer stood in their way. The two projects merged and the results were beyond my expectations. The efficiencies that were so appealing to us, also made it appealing to our customers. We realized we stumbled on a big secret because nobody believed that the two combined together would be a better way of continuously delivering code to market. We doubled down on this philosophy and we started doing continuous delivery. From that day on, I saw the value of having a single application. For example, a new feature we are implementing is auto-remediation. When a vulnerability comes out, say a heart bleed, GitLab will automatically detect where in your codebase that vulnerability exists, update the dependency, and deliver it to your production environment. This level of automation would be hard to implement without being in a single application. By combining the projects we unified teams helping them realize the original intent of DevOps and that is magical to see. The market validates our secret And while we bet on this philosophy the industry is now seeing it as well. In September of 2015 we combined GitLab CI and GitLab version control to create a single application. By March of 2017, Bitbucket also realized the advantages of this architecture and released Pipelines as a built-in part of Bitbucket. In 2018, GitHub announced Actions with CI-like functionality built into a single application offering. In the last six months, JFrog acquired Shippable and Idera acquired Travis CI, showing a consolidation of the DevOps market and a focus on CI. The market is validating what we continually hear from our users and customers: that a simple, single DevOps application meets their needs better. We hope you will continue to join us in our effort to bring teams together to innovate. Everyone can contribute here at GitLab and as always, we value your feedback, thoughts, and contributions. Want to hear me talk through the origin story? Listen to the Software Engineering Daily podcast where I talk about combining GitLab CI and GitLab Version Control. The industry has caught onto @GitLabs secret. Learn more about why GitLab combined GitLab CI and GitLab version control Sid Sijbrandij Click to tweet Sign up for GitLabs twice-monthly newsletter ",
        "Every time github releases a feature this is the response. These posts are so pathetic. I’m surprised that they continue to play this angle. It’s a very polarizing way to address the community that will definitely continue to stir up us vs them mentality between GitHub and Gitlab users.",
        "For all the bashing GitLab gets, personally, I want GitLab to survive and keep competing at some level with GitHub.<p>Should GitHub dominate the market and gobble up competition, we all know how it goes for its parent company."
      ],
      "relevant": "true"
    },
    {
      "id": 19669153,
      "title": "Why is version control in Jupyter notebooks so hard?",
      "search": [
        "Why is version control in Jupyter notebooks so hard?",
        "Are there any tools that help with version control on notebooks?",
        "AskHN",
        "I've been clearing my output using nbconvert before putting the notebook into version control. I have a precommit hook and a check in CI. This works for my use case but I can understand needing to preserve output.<p>jupyter nbconvert --ClearOutputPreprocessor.enabled=True --inplace my_notebook_name.ipynb",
        "You bet. I built ReviewNB[1] specifically for Jupyter Notebook code reviews.<p>There's also,<p>- nbstripout[2] for stripping outputs automatically before every commit<p>- nbdime[3] for diff'ing notebooks locally<p>- jupytext[4] for converting notebooks to markdown and vice-a-versa<p>[1] <a href=\"https://www.reviewnb.com/\" rel=\"nofollow\">https://www.reviewnb.com/</a><p>[2] <a href=\"https://github.com/kynan/nbstripout\" rel=\"nofollow\">https://github.com/kynan/nbstripout</a><p>[3] <a href=\"https://github.com/jupyter/nbdime\" rel=\"nofollow\">https://github.com/jupyter/nbdime</a><p>[4] <a href=\"https://github.com/mwouts/jupytext\" rel=\"nofollow\">https://github.com/mwouts/jupytext</a>"
      ],
      "relevant": "true"
    },
    {
      "id": 21071181,
      "title": "Automated Reports with Jupyter Notebooks (Using Jupytext and Papermill)",
      "search": [
        "Automated Reports with Jupyter Notebooks (Using Jupytext and Papermill)",
        "Normal",
        "https://medium.com/capital-fund-management/automated-reports-with-jupyter-notebooks-using-jupytext-and-papermill-619e60c37330",
        "Jupyter notebooks are one of the best available tools for running code interactively and writing a narrative with data and plots. What is less known is that they can be conveniently versioned and run automatically.Do you have a Jupyter notebook with plots and figures that you regularly run manually? Wouldnt it be nice to use the same notebook and instead have an automated reporting system, launched from a script? What if this script could even pass some parameters to the notebook it runs?This post explains in a few steps how this can be done concretely, including within a production environment.Example notebookWe will show you how to version control, automatically run and publish a notebook that depends on a parameter. As an example, we will use a notebook that describes the world population and the gross domestic product for a given year. It is simple to use: just change the year variable in the first cell, re-run, and you get the plots for the chosen year. But this requires a manual intervention. It would be much more convenient if the update could be automated and produce a report for each possible value of the year parameter (more generally, a notebook can update its results based not only on some user-provided parameters, but also through a connection to a database, etc.).Version controlIn a professional environment, notebooks are designed by, say, a data scientist, but the task of running them in production may be handled by a different team. So in general people have to share notebooks. This is best done through a version control system.Jupyter notebooks are famous for the difficulty of their version control. Lets consider our notebook above, with a file size of 3 MB, much of it being contributed by the embedded Plotly library. The notebook is less than 80 KB if we remove the output of the second code cell. And as small as 1.75 KB when all outputs are removed. This shows how much of its contents is unrelated to pure code! If we dont pay attention, code changes in the notebook will be lost in an ocean of binary contents.To get meaningful diffs, we use Jupytext (disclaimer: Im the author of Jupytext). Jupytext can be installed with pip or conda. Once the notebook server is restarted, a Jupytext menu appears in Jupyter:We click on Pair Notebook with Markdown, save the notebook and we obtain two representations of the notebook: world_fact.ipynb (with both input and output cells) and world_fact.md (with only the input cells).Jupytexts representation of notebooks as Markdown files is compatible with all major Markdown editors and viewers, including GitHub and VS Code. The Markdown version is for example rendered by GitHub as:As you can see, the Markdown file does not include any output. Indeed, we dont want it at this stage since we only need to share the notebook code. The Markdown file also has a very clear diff history, which makes versioning notebooks simple.The world_facts.md file is automatically updated by Jupyter when you save the notebook. And the other way round also works! If you modify world_facts.md with either a text editor, or by pulling the latest contributions from the version control system, then the changes appear in Jupyter when you refresh the notebook in the browser.In our version control system, we only need to track the Markdown file (and we even explicitly ignore all .ipynb files). Obviously, the team that will execute the notebook needs to regenerate the world_fact.ipynb document. For this they use Jupytext in the command line:$ jupytext world_facts.md --to ipynb[jupytext] Reading world_facts.md[jupytext] Writing world_facts.ipynbWe are now properly versioning the notebook. The diff history is much clearer. See for instance how the addition of the gross domestic products to our report looks like:Jupyter notebooks as Scripts?As an alternative to the Markdown representation, we could have paired the notebook to a world_facts.py script using Jupytext. You should give it a try if your notebook contains more code than text. That's often a first good step towards a complete and efficient refactoring of long notebooks: once the notebook is represented as a script, you can extract any complex code and move it to a (unit-tested) library using the refactoring tools in your IDE.JupyterLab, JupyterHub, Binder, Nteract, Colab & Cloud notebooks?Do you use JupyterLab and not Jupyter Notebook? No worries: the method above also applies in this case. You will just have to use the Jupytext extension for JupyterLab instead of the Jupytext menu. And in case you were wondering, Jupytext also work in JupyterHub and Binder.If you use other notebook editors like Nteract desktop, CoCalc, Google Colab, or another cloud notebook editor, you may not be able to use Jupytext as a plugin in the editor. In this case you can simply use Jupytext in the command line. Close your notebook and inject the pairing information into world_facts.ipynb with$ jupytext --set-formats ipynb,md world_facts.ipynband then keep the two representations synchronised with$ jupytext --sync world_facts.ipynbNotebook parametersPapermill is the reference library for executing notebooks with parameters.Papermill needs to know which cell contains the notebook parameters. This is simply done by adding a parameter tag in that cell with the cell toolbar in Jupyter Notebook:In JupyterLab you can use the celltags extension.And if you prefer you can also directly edit world_facts.md and add the tag there:```python tags=[\"parameters\"]year = 2000```Automated executionWe now have all the information required to execute the notebook on a production server.Production environmentIn order to execute the notebook, we need to know in which environment it should run. As we are working with a Python notebook in this example, we list its dependencies in a requirements.txt file, as is standard for Python projects.For simplicity, we also include the notebook tools in the same environment, i.e. add jupytext and papermill to the same requirements.txt file. Strictly speaking, these tools could be installed and executed in another Python environment.The corresponding Python environment is created with either$ conda create -n run_notebook --file requirements.txt -yor$ pip install -r requirements.txt(if in a virtual environment).Please note that the requirements.txt file is just one way of specifying an execution environment. The Reproducible Execution Environment Specification by the Binder team is one of the most complete references on the subject.Continuous IntegrationIt is a good practice to test each new contribution to either the notebook or its requirements. For this you can use for example Travis CI, a continuous integration solution. You will need only these two commands:pip install -r requirements.txt to install the dependenciesjupytext world_facts.md --set-kernel - --execute to test the execution of the notebook in the current Python environment.You can find a concrete example in our .travis.yml file.We are already executing the notebook automatically, arent we? Travis will tell us if a regression is introduced in the project What progress! But were not 100% done yet, as we promised to execute the notebook with parameters.Using the right kernelJupyter notebooks are associated with a kernel (i.e. a pointer to a local Python environment), but that kernel might not be available on your production machine. In this case, we simply update the notebook kernel so as to point to the environment that we have just created:$ jupytext world_facts.ipynb --set-kernel -Note that the minus sign in --set-kernel - above represents the current Python environment. In our example this yields:[jupytext] Reading world_facts.ipynb[jupytext] Updating notebook metadata with '{\"kernelspec\": {\"name\": \"python3\", \"language\": \"python\", \"display_name\": \"Python 3\"}}' [jupytext] Writing world_facts.ipynb (destination file replaced)In case you want to use another kernel just pass the kernel name to the --set-kernel option (you can get the list of all available kernels with jupyter kernelspec list and/or declare a new kernel with python -m ipykernel install --name kernel_name --user).Executing the notebook with parametersWe are now ready to use Papermill for executing the notebook.$ papermill world_facts.ipynb world_facts_2017.ipynb -p year 2017Input Notebook: world_facts.ipynb Output Notebook: world_facts_2017.ipynb 100%|| 8/8 [00:04<00:00, 1.41it/s]Were done! The notebook has been executed and the file world_facts_2017.ipynb contains the outputs.Publishing the NotebookIts time to deliver the notebook that was just executed. Maybe you want it in your mailbox? Or maybe you prefer to get a URL where you can see the result? We cover a few ways of doing that.GitHub can display Jupyter notebooks. This is a convenient solution, as you can easily choose who can access repositories. This works well as long as you dont include any interactive JavaScript plots or widgets in the notebook (the JavaScript parts are ignored by GitHub). In the case of our notebook, the interactive plots do not appear on GitHub, so we need another approach.Another option is to use the Jupyter Notebook Viewer. The nbviewer service can render any notebook which is publicly available on GitHub. Our notebook is thus rendered correctly there. If your notebook is not public, you can choose to install nbviewer locally.Alternatively, you can convert the executed notebook to HTML, and publish it on GitHub pages, or on your own HTML server, or send it over email. Converting the notebook to HTML is easily done with$ jupyter nbconvert world_facts_2017.ipynb --to html[NbConvertApp] Converting notebook world_facts_2017.ipynb to html [NbConvertApp] Writing 3361863 bytes to world_facts_2017.htmlThe resulting HTML file includes the code cells as below:But maybe you dont want to see the input cells in the HTML? You just need to add --no-input:$ jupyter nbconvert --to html --no-input world_facts_2017.ipynb --output world_facts_2017_report.htmlAnd youll get a cleaner report:Sending the standalone HTML file as an attachment in an email is an easy exercise. Embedding the report in the body of the email is also possible (but interactive plots wont work).Finally, if you are looking for a polished report and have some knowledge of LaTeX, you can give the PDF export option of Jupyters nbconvert command a try.Using pipesAn alternative to using named files would be to use pipes. jupytext, nbconvert and papermill all support them. A one-liner substitute for the previous commands is:$ cat world_facts.md \\ | jupytext --from md --to ipynb --set-kernel - \\ | papermill -p year 2017 \\ | jupyter nbconvert --stdin --output world_facts_2017_report.htmlConclusionYou should now be able to set up a full pipeline for generating reports in production, based on Jupyter notebooks. We have seen how to:version control a notebook with Jupytextshare a notebook and its dependencies between various userstest a notebook with continuous integrationexecute a notebook with parameters using Papermilland finally, how to publish the notebook (on GitHub or nbviewer), or render it as a static HTML page.The technology used in this example is fully based on the Jupyter Project, which is the de facto standard for Data Science. The tools used here are all open source and work well with any continuous integration framework.You have everything you need to schedule and deliver fine-tuned, code-free reports!EpilogueThe tools used here are written in Python. But they are language agnostic. Thanks to the Jupyter framework, they actually apply to any of the 40+ programming language for which a Jupyter kernel exists.Now, imagine that you have authored a document containing a few Bash command lines, just like this blog post. Install Jupytext and the bash kernel, and the blog post becomes this interactive Jupyter notebook!Going further, shouldnt we make sure that every instruction in our post actually works? We do that via our continuous integration spoiler alert: thats as simple as jupytext --execute README.md!AcknowledgmentsMarc would like to thank Eric Lebigot and Florent Zara for their contributions to this article, and to CFM for supporting this work through their Open-Source Program.About the authorThis article was written by Marc Wouts. Marc joined the research team of CFM in 2012 and has worked on a range of research projects, from optimal trading to portfolio construction.Marc has always been interested in finding efficient workflows for doing collaborative research involving data and code. In 2015 he authored an internal tool for publishing Jupyter and R Markdown notebooks on Atlassians Confluence wiki, providing a first solution for collaborating on notebooks. In 2018, he authored Jupytext, an open-source program that facilitates the version control of Jupyter notebooks. Marc is also interested in data visualisation, and coordinates a working group on this subject at CFM.Marc obtained a PhD in Probability Theory from the Paris Diderot University in 2007.DisclaimerAll views included in this document constitute judgments of its author(s) and do not necessarily reflect the views of Capital Fund Management or any of its affiliates. The information provided in this document is general information only, does not constitute investment or other advice, and is subject to change without notice. ",
        "Awesome article - I'm wondering, for \"Publishing the Notebook\" part of the workflow, have you ever seen Kyso (<a href=\"https://kyso.io\" rel=\"nofollow\">https://kyso.io</a>) - disclaimer, I'm a founder. We started Kyso to make it easier to communicate insights gained from analysis to non-technical people by converting data science tools (e.g. Jupyter Notebooks) into conversational tools in the form of blog posts. You can make public posts or have an internal \"data blog\" for your team, where you push your work to Github and it is reflected on Kyso. Would love to hear your thoughts on how it could fit into existing workflows.",
        "I don't think Jupyter notebooks should be used for automated jobs. They're great for exploratory stuff but once things are getting fleshed out and cleaned up, one should move to proper python files that can be unit tested and versioned without having to go to crazy lengths..."
      ],
      "relevant": "true"
    },
    {
      "id": 19706396,
      "title": "Fh: File history with ed, diff, awk, sed, and sh",
      "search": [
        "Fh: File history with ed, diff, awk, sed, and sh",
        "Normal",
        "https://github.com/xorhash/fh",
        "fh records changes to a file on a per-file basis, similar to RCS and SCCS. It is, however, considerably more primitive. Design goals: no support for multi-user environments (no locking, etc.) implemented in shell script must use ed(1) should work or easily be made to work on 7th Edition UNIX I've taken care not to use any shell scripting constructions that didn't exist in the Bourne shell, but I may have missed things; however, the shebang needs to be removed on 7th Edition UNIX. fh uses a chain of ed(1) scripts to construct any version of a file. It even allows recording of commit messages. Why? I saw the following passage in diff(1) of 7th Edition UNIX: The -e option produces a script of a, c and d commands for the editor ed, which will recreate file2 from file1. The -f option produces a similar script, not useful with ed, in the opposite order. In connection with -e, the following shell program may help maintain multiple versions of a file. Only an ancestral file ($1) and a chain of version-to-version ed scripts ($2,$3,...) made by diff need be on hand. A `latest version' appears on the standard output. (shift; cat $*; echo 1,$p) ed - $1 After some thinking, I figured it would be hilarious to actually implement a basic version control system on these primitives. In hindsight, it's probably closer to terrifying than hilarious. License ISC, see LICENSE. Installation and usage Copy the fl, fr and fu files to a directory in $PATH; make sure they are marked as executable. Copy the man pages fl.1, fr.1, fu.1 and fh.5 to a directory in $MANPATH. For usage, see the supplied man pages. man.md is available on the web. For 7th Edition UNIX, the man pages written in mdoc macrosneed to be converted to old man macros first: mkdir man mandoc -Tman fl.1 > man/fl.1 mandoc -Tman fr.1 > man/fr.1 mandoc -Tman fu.1 > man/fu.1 mandoc -Tman fh.5 > man/fh.5 ",
        "Wait, what?<p><i>\"After some thinking, I figured it would be hilarious to actually implement a basic version control system on these primitives. In hindsight, it's probably closer to terrifying than hilarious.\"</i><p>Ah, ok.<p>Also, if you want to experiment with diffs and recreating versions:<p>Patch: <a href=\"https://en.m.wikipedia.org/wiki/Patch_(Unix)\" rel=\"nofollow\">https://en.m.wikipedia.org/wiki/Patch_(Unix)</a><p>Xdelta:  <a href=\"https://github.com/jmacd/xdelta\" rel=\"nofollow\">https://github.com/jmacd/xdelta</a>",
        "It's not a bad exercise.  In a Unix class I took, we had to implement an RDBMS using only the traditional Unix software tools.  A little later, for work, I had to learn to write highly portable and fairly secure shell scripts.<p>A few reasons to do exercises like this:<p>* To understand the Unix software tools and Bourne/etc. shell scripting models.  There are good lessons, and also examples of what not to do (or the tradeoffs), which I don't think you'll find anywhere else.  (For example, the simple Unix streams model is very powerful, and also often used in very kludgey ways in practice, and the Bourne evaluation model is probably much worse and dangerous than a beginner might think.)<p>* Knowing how to do things with just shell scripts is great for some kinds of bootstrapping, commands in build tools, or other situations in which you can only assume a shell interpreter and possibly certain command-line tools.<p>* Handy for configuring your interactive shell to do what you want.<p>* It's one way to familiarize with parts of a Unix-ish system that you might not normally, especially if you're spending all your time learning your way around huge stacks of tools that obscure the lower-level mechanics.<p>* You'll appreciate Perl and other languages much more, in some ways."
      ],
      "relevant": "true"
    },
    {
      "id": 21714735,
      "title": "Welcome to Space",
      "search": [
        "Welcome to Space",
        "Normal",
        "https://blog.jetbrains.com/blog/2019/12/05/welcome-to-space/",
        "New Products NewsWelcome to Space! Today at KotlinConf, we announced our brand new product Space, and we have already opened the Early Access Program. What is Space Space is an integrated team environment that provides teams and organizations with the tools they need to collaborate effectively and efficiently. It has Git-based Version Control, Code Review, Automation (CI/CD) based on Kotlin Scripting, Package Repositories, Planning tools, Issue Tracker, Chats, Blogs, Meetings, and Team Directory, among other features. Space was born out of our own needs at JetBrains. As a company, weve grown from a team of 3 developers to over 1200 people, 60% of whom are technical. With this growth, weve found our current use of independent tools has often created silos, leading to miscommunication, less efficient collaboration, and loss of information. Space is about people and teams In Space, the concept of a team is a first-class citizen. When you join a team, you are automatically included in everything related to it, be it meetings, blogs, source control, calendars, vacations, etc. This eliminates the need for creating concepts such as groups and then making sure that every team member is also part of the corresponding group. Tight integration between the areas of the system provides for numerous advantages such as knowing a persons availability, which is useful if you want to have a chat or assign a code review to them. Space is a platform Space allows you to build on the platform in multiple ways. Whether you do so by using webhooks, HTTP API, or even plugins (on the self-hosted version), you can extend the existing functionality of Space and make use of the information available to you without needing to hook up many different solutions that create silos of data. Space as a service or self-hosted We will be offering Space either as a service, hosted and managed entirely by JetBrains, or as a self-hosted version (available in the near future). The pricing plan has four levels, starting at the free tier, which is ideal for small teams, and progressing up to the Enterprise tier, which meets the needs of large organizations. Space is available everywhere Built from the ground up with Kotlin multiplatform technology, Space clients are available for web, desktop, and mobile platforms, and offer full IDE integration with the IntelliJ Platform. Space Launch and roadmap Today we already provide a ton of functionality, such as: Version Control Code Reviews Blogs Chats Team Directory Package Registry Planning Issue Tracker IDE Integration We have a lot more planned for Space, including: Knowledge Base Automation CI/CD Pipelines Personal To-Do lists and notification management The Early Access Program will be accepting requests on a first-come-first-served basis, and well be gradually increasing the number of teams that can gain access. So dont wait! Sign up now to get your team Space! ",
        "This looks interesting, I’m curious how the “free” tier interacts with the “self hosted” part - storage limits and compute limits don’t make a lot of sense if you’re providing those resources yourself.",
        "Interesting, but it smells a lot of enterprise bloat. All-in-one solutions, in the long run, tend to feel inferior to dynamic setups.<p>It’s true that that particular market is long-suffering. If this thing can keep admin overhead to a minimum and actually make teams communicate more, it’s welcome."
      ],
      "relevant": "false"
    },
    {
      "id": 19470064,
      "title": "Qri: A global dataset version control system built on the distributed web",
      "search": [
        "Qri: A global dataset version control system built on the distributed web",
        "Normal",
        "https://github.com/qri-io/qri",
        "Qri CLI a dataset version control system built on the distributed web Website | Packages | Contribute | Issues | Docs | Download Welcome Question Answer \"I want to learn about Qri\" Read the official documentation \"I want to download Qri\" Download Qri or brew install qri-io/qri/qri \"I have a question\" Create an issue and use the label 'question' \"I found a bug\" Create an issue and use the label 'bug' \"I want to help build the Qri backend\" Read the Contributing guides \"I want to build Qri from source\" Build Qri from source qri is a global dataset version control system built on the distributed web Breaking that down: global so that if anyone, anywhere has published work with the same or similar datasets, you can discover it. Specific to datasets because data deserves purpose-built tools version control to keep data in sync, attributing all changes to authors On the distributed web to make all of the data published on qri simultaneously available, letting peers work on data together. If youre unfamiliar with version control, particularly the distributed kind, well you're probably viewing this document on github which is a version control system intended for code. Its underlying technology git popularized some magic sauce that has inspired a generation of programmers and popularized concepts at the heart of the distributed web. Qri is applying that family of concepts to four common data problems: Discovery Can I find data Im looking for? Trust Can I trust what Ive found? Friction Can I make this work with my other stuff? Sync How do I handle changes in data? Because qri is global and content-addressed, adding data to qri also checks the entire network to see if someone has added it before. Since qri is focused solely on datasets, it can provide meaningful search results. Every change on qri is associated with a peer, creating an audit-able trail you can use to quickly see what has changed and who has changed it. All datasets on qri are automatically described at the time of ingest using a flexible schema that makes data naturally inter-operate. Qri comes with tools to turn all datasets on the network into a JSON API with a single command. Finally, all changes in qri are tracked & synced. Building From Source To build qri you'll need the go programming language on your machine. $ git clone https://github.com/qri-io/qri $ cd qri $ make install If this is your first time building, this command will have a lot of output. That's good! Its means it's working :) It'll take a minute or two to build. After this is done, there will be a new binary qri in your ~/go/bin directory if using go modules, and $GOPATH/bin directory otherwise. You should be able to run: and see help output. Building on Windows To start, make sure that you have enabled Developer Mode. A library that we depend on needs it enabled in order to properly handle symlinks. If not done, you'll likely get the error message \"A required privilege is not held by the client\". You should not need to Run As Administrator to build or run qri. We do not recommend using administrator to run qri. Shell For your shell, we recommend using msys2. Other shells, such as cmd, Powershell, or cygwin may also be usable, but msys2 makes it easy to install our required dependencies. IPFS also recommends msys2, and qri is built on top of IPFS. Dependencies Building depends upon having git and make installed. If using msys2, you can easily install these by using the package manager \"pacman\". In a shell, type: Assuming you've also installed go using the official Windows installer linked above, you will also need to add go to your PATH by modifying your environment variable. See the next section on \"Environment variables\" for more information. Due to how msys2 treats the PATH variable, you also need to add a new environment variable MSYS2_PATH_TYPE, with the value inherit, using the same procedure. Once these steps are complete, proceed to building. Building on Rasberry PI On a Raspberry PI, you'll need to increase your swap file size in order to build. Normal desktop and server linux OSes should be fine to proceed to building. One symptom of having not enough swap space is the go install command producing an error message ending with: To increase your swapfile size, first turn off the swapfile: sudo dphys-swapfile swapoff Then edit /etc/dphys-swapfile as root and set CONF_SWAPSIZE to 1024. Finally turn on the swapfile again: sudo dphys-swapfile swapon Otherwise linux machines with reduced memory will have other ways to increase their swap file sizes. Check documentation for your particular machine. Packages Qri is comprised of many specialized packages. Below you will find a summary of each package. Package Go Docs Go Report Card Description api user accessible layer, primarily made for communication with our frontend webapp cmd our command line interface config user configuration details, includes peer's profile lib takes arguments from the cmd and api layer and forms proper requests to call to the action layer p2p the peer to peer communication layer of qri repo the repository: saving, removing, and storing datasets, profiles, and the config dataset the blueprint for a dataset, the atoms that make up qri registry the blueprint for a registry: the service that allows profiles to be unique and datasets to be searchable starlib the starlark standard library available for qri transform scripts qfs \"qri file sytem\" is Qri's file system abstraction for getting & storing data from different sources ioes package to handle in, out, and error streams: gives us better control of where we send output and errors jsonschema used to describe the structure of a dataset, so we can validate datasets and determine dataset interop Outside Libraries The following packages are not under Qri, but are important dependencies, so we display their latest versions for convenience. Package Version ipfs This documentation has been adapted from the Cycle.js documentation. ",
        "Interesting project, particularly with the choice of IPFS and DCAT -- something I'll have to look into.  There have been other efforts to handle mostly file-based scientific data with versioning in both distributed (Dat <a href=\"https://blog.datproject.org/tag/science/\" rel=\"nofollow\">https://blog.datproject.org/tag/science/</a>) and centralized ways (DataHub <a href=\"https://datahub.csail.mit.edu/www/\" rel=\"nofollow\">https://datahub.csail.mit.edu/www/</a>).  Juan Benet visited our research center to give a talk about IPFS a few years ago. Really fantastic stuff.<p>I'm the creator of DVID (<a href=\"http://dvid.io\" rel=\"nofollow\">http://dvid.io</a>), which has an entirely different approach to how we might handle distributed versioning of scientific data primarily at a larger scale (100 GB to petabytes).  Like Qri and IPFS, DVID is written in Go.  Our research group works in Connectomics.  We start with massive 3D brain image volumes and apply automated and manual segmentation to mine the neurons and synapses of all that data.  There's also a lot of associated data to manage the production of connectomes.<p>One of our requirements, though, is having low-latency reads and writes to the data.  We decided to create a Science API that shields clients from how the data is actually represented, and for now, have used an ordered key-value stores for the backend.  Pluggable \"datatypes\" provide the Science API and also translate requests into the underlying key-value pairs, which are the units for versioning.  It's worked out pretty well for us and I'm now working on overhauling the store interface and improving the movement of versions between servers.  At our scale, it's useful to be able to mail a hard drive to a collaborator to establish the base DAG data and then let them eventually do a \"pull request\" for their relatively small modifications.<p>We've published some of our data online (<a href=\"http://emdata.janelia.org\" rel=\"nofollow\">http://emdata.janelia.org</a>) and visitors can actually browse through the 3d images using a Google-developed web app, Neuroglancer.  It's running on a relatively small VM so I imagine any significant HN traffic might crush it :/  We are still figuring out the best way to handle the public-facing side.<p>I think a lot of people are coming up with their own ideas about how to version scientific data, so maybe we should establish a meeting or workshop to discuss how some of these systems might interoperate?  The RDA (<a href=\"https://rd-alliance.org/\" rel=\"nofollow\">https://rd-alliance.org/</a>) \nhas been trying to establish working groups and standards, although they weren't really looking at distributed versioning a few years ago.  We need something like a Github for scientific data where papers can reference data at a particular commit and then offer improvements through pull requests.",
        "I really love the design and style qri! It is fun!<p>Can I ask why, for a git-style system, IPFS was chosen instead of GUN or SSB?<p>Certainly, images/files/etc. are better in IPFS than GUN or SSB.<p>But, you're gonna have a nightmare doing any git-style index/patch/object/etc. operations with it - both GUN & SSB's algorithms are meant to handle this type of stuff.<p>Did you guys do any analysis?"
      ],
      "relevant": "true"
    },
    {
      "id": 19311118,
      "title": "Coder (Visual Studio Code in browser) goes open source",
      "search": [
        "Coder (Visual Studio Code in browser) goes open source",
        "Normal",
        "https://coder.com",
        "From the Developers ofcode-serverThe developer workspace platformCentralize the creation and management of cloud developer workspacesWorks with Azure, GCP, AWS, OpenShift, and anywhere you run KubernetesDevelop in VS Code, Jupyter, RStudio, IntelliJ, PyCharm, and any JetBrains IDEThe problems with development running on local machinesOnboarding delays from environment setupConfiguration drift as the project evolvesSource code on insecure endpointsLimited compute powerMove development to your cloudCoder handles the orchestration of new conformant and consistent workspaces using source-controlled Dockerfiles and workspace templates. Empower developers and data scientists to spin up self-serve workspaces that just work.Keep your workflowCoder works with the tools that you work with. No need to change your preferred editor, CI tooling, or version control systemwith support for Docker in Docker, too.Run VS Code, Jupyter Notebook, RStudio, IntelliJ, PyCharm, & other IDEs and editorsRun VS Code locally via SSH connection to your Coder workspace (local support for JetBrains IDEs coming soon)Version control with GitHub, GitLab, & BitbucketPersonalize your workspaces to fit your flowSpeed up builds and testsUse the power and scale of the cloud to offload the burden of slow builds and tests from your local machine.Deploy workspaces with the CPUs and memory you needAccommodate bursty workloads by utilizing the clusters idle CPUs and memoryHarness the parallelism of GPUs for deep learning and other intensive workloadsDevelop with any deviceAccess your workspace from anywhere with the same snappy development experience you expect from a local IDE.Work from home, the office, or wherever you areCode using any device, even an iPadOnboard to new projects from wherever, wheneverOnboarding to a new project can take days away from your productivity and hinders collaboration. Get on the same page and stay on the same page faster.Start a new project with all the required tools and dependencies in minutesCollaborate across teams with easeWork with your team from anywhere in the world without latencySecure your data and source codeSource code and data can remain secured on the cluster or in authorized repositories not sitting on a workstation or laptop.Get the security benefits of VDI with a better developer experienceReduce the risk of source code leaksIdeal for zero-trust networks and air-gapped environmentsCasestudyKazoo reduces onboarding time with Coder\"New hires have a shorter onboarding experience because theyre just spinning up a Coder workspace instead of installing locally and having to worry about whether all the dependencies are up to date.\"Joe MainwaringDirector of Infrastructure, KazooRead case studyFAQIs Coder priced per developer or environment?Is Coder SaaS?What can I expect my infrastructure costs to be?How can I procure Coder for my government agency?What does the price of Coder include?What type of support is available?Can I add users at any time?Get started with Coder todayOur commitment to open sourceLearn more about our projects and our commitment to the open-source community.Code-server: the heart of CoderCode-server is the primary open source project we maintain. It allows developers to use a browser to access remote dev environments running VS Code. Coder builds upon the success of code-server and adds features designed for enterprise teams including support for additional IDEs and advanced security features.CookiesWe use cookies to make your experience better. ",
        "Has anyone tried this and compared it to <a href=\"https://www.theia-ide.org/\" rel=\"nofollow\">https://www.theia-ide.org/</a>?<p>First thing off the bat I notice is that Coder looks harder to deploy or try out, Theia was super easy, on the landing page they had a docker one liner:<p>docker run -it -p 3000:3000 -v \"$(pwd):/home/project:cached\" theiaide/theia:next",
        "I used to work at a place where we all used the enterprise server version of RStudio, which also runs in a browser.<p>There was a lot of good thing about that setup. Nobody could walk home with code, and no code was lost on somebody laptop.<p>Execution happened on a server, much more powerful than any dev machine."
      ],
      "relevant": "false"
    },
    {
      "id": 21534619,
      "title": "Show HN: Respresso – localization and design asset optimizer for iOS and Android",
      "search": [
        "Show HN: Respresso – localization and design asset optimizer for iOS and Android",
        "ShowHN",
        "https://respresso.io/",
        "Save hours with efficient collaboration Manage your resources in multiplatform environments. Fonts Easy integration of custom fonts Localizations Modify localization texts or add a new language to your project, without developers Images Change or resize an image anytime and keep in sync on all platforms App icons No more generating thousands of icon sizes, just use one SVG for all platforms. Colors No more incorrect guideline colors. Your designers will have the ability to set the perfect colors to be used on all platforms Raw Easy access to all your common config files(JSON, XML, YAML) Customize Respresso Extend Respressos functionality or connect your work tools like Slack, Teams, Jenkins etc. Version control All resources are under version control. You can easily lock your assets version and reuse it later. Be agile and spare development time Collaborate on assets with your team members or customer from anywhere in a transparent way to boost your productivity. It automatically transforms and delivers to your project without assistance. Your assets will be ready for use almost immediately. It takes care of your digital assets (images, texts, colors, fonts, etc.) across multiple platforms and projects. Help your team focus during the development stage. Developers code, designers deliver graphics, the marketing team, translators manage your localization and this is just the beginning of stress-free development. Start using in 3 simple steps Easy as pie 1-minute setup Upload your origin resources Sync converted resources across multiple platforms Respresso is simple but powerful Respresso can easily be integrated into your build process and also works well with your Continuous Integration tools. Respresso manages your resources Convert your resources automatically to platform-specific formats such as VectorDrawable for Android, PDF for iOS etc. Synchronize with your project in build-time regardless of which platform you use What else is it good for? Versioned resources and repeatable build support for CI & CD A better team experience via team and project creation. It provides you with a way to track every change in each project and send feedback. For example you will be notified when someone changes the key of a localization you use Well-separated roles spell correction and translation without developer intervention fix any graphics files and change icons without coding skills rebrand the application by changing colors and app icons Enforce naming conventions to enhance code quality Try our image converter Simply upload your chosen SVG file and download the generated resources as VectorDrawable for Android and PDF for iOS. Get access for Free Once you create an account you can try Respresso for free, for iOS, Android and Web frontend projects, too. Do you have any question? ",
        "Respresso helps mobile developers by automatically optimizing their design assets for iOS and Android and comes with a live localization feature.<p>It's still in beta and all feedback is highly appreciated.",
        "What is the pricing?"
      ],
      "relevant": "false"
    },
    {
      "id": 19256059,
      "title": "Semantic Linefeeds (2012)",
      "search": [
        "Semantic Linefeeds (2012)",
        "Normal",
        "https://rhodesmill.org/brandon/2012/one-sentence-per-line/",
        "Date: 3 April 2012 Tags:python, computing, document-processing I give some advice each year in my annual Sphinx tutorial at PyCon. Agrateful student asked where I myself had learned the tip. Ihave done some archology and finally have an answer. Let me share what I teach them about semantic linefeeds, then I will reveal its source which turns out to have been written when I was only a few months old! In the tutorial, I ask students whether or not the Sphinx text files in their project will be read by end-users. If not, then I encourage students to treat the files as private source code that they are free to format semantically. Instead of fussing with the lines of each paragraph so that they all end near the right margin, they can add linefeeds anywhere that there is a break between ideas. The result can be spectacular. By starting a new line at the end of each sentence, and splitting sentences themselves at natural breaks between clauses, a text file becomes far easier to edit and version control. Text editors are very good at manipulating lines so when each sentence is a contiguous block of lines, your editor suddenly becomes a very powerful mechanism for quickly rearranging clauses and ideas. And your version-control system will love semantic linefeeds. Have you ever changed a few words at the beginning of a paragraph, only to discover that version control now thinks the whole text has changed? ... the definition in place of it. -The beauteous scheme is that now, if you change -your mind about what a paragraph should look -like, you can change the formatted output merely -by changing the definition of .PP and -re-running the formatter. +The beauty of this scheme is that now, if you +change your mind about what a paragraph should +look like, you can change the formatted output +merely by changing the definition of .PP +and re-running the formatter. As a rule of thumb, for all but the most ... With every sentence and clause on its own line, you can make exactly the same change to the same paragraph without the rest of the paragraph even noticing: ... the definition in place of it. -The beauteous scheme is that now, +The beauty of this scheme is that now, if you change your mind about what a paragraph should look like, you can change the formatted output merely by changing the definition of .PP and re-running the formatter. As a rule of thumb, for all but the most ... Semantic linefeeds, as I call them, have been making my life easier for more than twenty years, and have governed how my text files look behind-the-scenes whether my markup format is HTML, TeX, RST, or the venerable troff macro typesetter. So where did I learn the trick? For a long time I believed that my source must have been the UNIX Documenter's Workbench manual. The Workbench was an attempt by AT&T to market the operating system that had become such a cult hit internally among Bell Labs engineers, by bundling the system with its most powerful typesetting tools. The attempt failed, of course I am told that AT&T was terrible at marketing computers, just as Xerox had no idea what to do with the ideas that were bubbling at PARC in the 1970s but my father worked at Bell Labs and had a copy of the Workbench documentation around the house. (Icannot find a copy on the Internet were all public copies destroyed during the devastating copyright battle that justly brought SCO to its ruin?) But after an extensive search, I have found an earlier source and I could not be any happier to discover that my inspiration is none other than Brian W. Kernighan! He published UNIX for Beginners [PDF] as Bell Labs Technical Memorandum 74-1273-18 on 29 October 1974. It describes a far more primitive version of the operating system than his more famous and more widely available UNIX for Beginners Second Edition from 1978. After a long search I have found the lone copy linked above, hosted on an obscure Japanese web page about UNIX 6th Edition which has now disappeared but can still be viewed on the Internet Archives Wayback Machine (to which both of the links above point). In the section Hints for Preparing Documents, Kernighan shares this wisdom: Hints for Preparing Documents Most documents go through several versions (always more than you expected) before they are finally finished. Accordingly, you should do whatever possible to make the job of changing them easy. First, when you do the purely mechanical operations of typing, type so subsequent editing will be easy. Start each sentence on a new line. Make lines short, and break lines at natural places, such as after commas and semicolons, rather than randomly. Since most people change documents by rewriting phrases and adding, deleting and rearranging sentences, these precautions simplify any editing you have to do later. Brian W. Kernighan, 1974 Note how Pythonic his advice sounds he replaces the fiction of write-once documents with a realistic focus on making text that is easy to edit later! I must have read this when I was first learning UNIX and somehow carried it with me all of these years. It says something very powerful about the UNIX plain-text approach that advice given in 1974, and basically targeted at making text easier to edit in the terribly cramped ed text editor, applies just as well to our modern world of colorful full-screen editors like Emacs and Vim and distributed version control systems that were not even imagined in the 1970s. If you are interested in more early UNIX documentation including the Second Edition of Kernighan's Beginners guide check out the 7th Edition manuals which Bell Labs has kindly made available online, both as PDF files and also as plain-text files marked up for the troff typesetter. Note that you can still compile the troff files successfully on a modern system try that with any other richly-formatted text from the1970s! comments powered by 2021 ",
        "Previous discussion: <a href=\"https://news.ycombinator.com/item?id=4642395\" rel=\"nofollow\">https://news.ycombinator.com/item?id=4642395</a>",
        "Maybe I'm misunderstanding the point of this article, but I always put linefeeds where they should logically be. If people would like to view it in a certain way, it's always easy to put it through a text-processing program, which will do a much better job on semantically separated content rather that that which has had formatting hard-coded into it.<p>(Incidentally, this is also why I use tabs for indentation, since it's a lot easier for tooling to relayout. But I'm not trying to start the holy war here.)"
      ],
      "relevant": "false"
    },
    {
      "id": 20069596,
      "title": "Ask HN:Skills/Tools to Stand Out as a Data Scientist",
      "search": [
        "Ask HN:Skills/Tools to Stand Out as a Data Scientist",
        "Apart from Conventional tools like Python/R and Knowledge  of Machine Learning/Statistics/SQL are there any other skills that I can pick up in order to up skill myself as a Data Scientist?<p>I have nearly three years experience in this field and would like to level up. \nThanks.",
        "AskHN",
        "A provable ability to conduct Bayesian data analysis: from experiment design, to modelling, to evaluation and back again.<p>I think it’s what makes a “data scientist” legitimate.",
        "Depending on the role, data science is generally either [data analysis (with very little modelling) + business understanding + communication and presentation skills], OR it's [statistics + software development]. There can be some deviation and mixing between the two, but to help with the latter:<p>- linear algebra<p>- calculus<p>- software development - best practices, version control, design patterns etc."
      ],
      "relevant": "false"
    },
    {
      "id": 19078281,
      "title": "MIT Hacker Tools: a lecture series on programmer tools",
      "search": [
        "MIT Hacker Tools: a lecture series on programmer tools",
        "Normal",
        "https://hacker-tools.github.io/",
        "This class has moved to https://missing.csail.mit.edu/. You should go there to see the newest version of the material. This site is being left up for archival purposes. You can see all the lectures from the IAP 2019 course here. ",
        "Hi all! We (@anishathalye, @jjgo, and @jonhoo) have long felt that while university CS classes are great at teaching specific topics, they often leave it to students to figure out a lot of the common knowledge about how to actually use your computer. And in particular, how to use it efficiently.<p>There’s just no class in the undergrad curriculum that teaches you how to become familiar with the system you’re working with! Students are expected to know about, or figure out, the shell, editors, remote access and file management, version control, debugging and profiling utilities, and all sorts of other useful tools on their own. Often times, they won’t even know that many of these tools exist, and instead do things in roundabout ways or simply be left frustrated about their development environment.<p>To help mitigate this, we decided to run this short lecture series at MIT during the January Independent Activities Period that we called “Hacker Tools” (in reference to “hacker culture”, not hacking computers). Our hope was that through this class, and the resulting lecture materials and videos, we might be able to bootstrap students’ knowledge about the tools that are available to them, which they can then put to use throughout their time at university, and beyond.<p>We’ve shared both the lecture notes and the recordings of the lectures in the hopes that people outside of MIT may also find these resources useful in making better use of their tools. If that turns out to be true, we’re also thinking of re-doing the videos in screen-cast style with live chat and a proper microphone when we get the time. If that sounds interesting to you, and if you have ideas about other things you’d like to see us cover, please leave a comment below; we’d love to hear from you!<p>We’re sure there are also plenty of cool tools that we didn’t get to cover in this series that you all know and love. Please share them below along with a short description so we can all learn something new!<p>Anish, Jose, and Jon",
        "The equivalent UCLA course is CS35L: Software Construction Laboratory (<a href=\"https://web.cs.ucla.edu/classes/winter19/cs35L/\" rel=\"nofollow\">https://web.cs.ucla.edu/classes/winter19/cs35L/</a>). It's taught by Paul Eggert (big open source/coreutils/emacs contributor + author of diff/sort)."
      ],
      "relevant": "false"
    },
    {
      "id": 21585050,
      "title": "Launch HN: Fast.io, Simple Enterprise File Hosting Alternative to S3",
      "search": [
        "Launch HN: Fast.io, Simple Enterprise File Hosting Alternative to S3",
        "The Fast.io team is excited to be officially launching today!<p>Our platform is a solution for designers, developers, and marketers looking to automate everything needed to host and track files and static websites at an enterprise scale.<p>We developed Fast.io because we recognized that the process of deploying static content today is complicated and time-consuming. Solutions like S3 require uploading, a separate CDN configuration, a manual review of raw data logs, and tedious cache flushing each time you make an update.<p>We want to get content online quickly with the simplicity and ease of use of cloud storage without sacrificing the reliable scalability and performance of a CDN.<p>Fast.io tightly integrates with your current workflows and preferred cloud storage service (Google Drive, Dropbox, OneDrive, MediaFire, Box, and GitHub) to manage files. It includes an integrated CDN, using Cloudflare and Akamai for lightning-fast global deploys, a visual dashboard, and detailed, accurate analytics data sent to Google Analytics and Mixpanel.<p>We’d love for you to check it out and we appreciate any and all feedback - https://www.producthunt.com/posts/fast-io<p>Here is an overview of what our simple enterprise file distribution network delivers for free:<p>- Continuous integration from cloud storage or version control<p>- Files up to 500MB each<p>- 100GB free transfer per month<p>- Foolproof Analytics collected directly on the CDN and reported to Google Analytics<p>- Custom domains and free included SSL (HTTPS)<p>- Automatic updates and global deployment from cloud storage or version control<p>- Automatic image optimization<p>- Automatic code minification<p>- Automatic directory listings<p>- Slack integration",
        "LanchHN",
        "This is pretty useful! Putting blinders on and working with a project on my laptop and knowing the folder it's in is automagically getting synced with an actual CDN as well as everything being updated in real-time as I make changes??? Sounds pretty sweet. On my last project I wasted an entire damn day dealing with setting up GH-Pages and another project with Coudflair, a regular hosting company and a few tools to automate my workflow. I really like that all of this is out of the box in this product!",
        "\"Solutions like S3 require uploading, a separate CDN configuration, a manual review of raw data logs, and tedious cache flushing each time you make an update.\"<p>I love all types of automation that lets me avoid doing any of the above. The pricing plans are also very generous... Time to start playing with the free tier :)"
      ],
      "relevant": "false"
    },
    {
      "id": 18919599,
      "title": "How to teach Git",
      "search": [
        "How to teach Git",
        "Normal",
        "https://rachelcarmena.github.io/2018/12/12/how-to-teach-git.html",
        "Published: 12 December 2018 Last updated: 10 August 2021 The problem I found Some of my professional experiences have involved participating in cross-functional areas, so I knew all my colleagues way of working. I remember a company which just started using Git a few weeks before I joined. I found post-its on screens with 3 steps: first add, second commit, third push. They didnt know the reason for those steps. They only knew that they should follow them in order not to get into trouble. However, problems happened frequently, so I decided to prepare a workshop about Git. The idea I love to have maps in my mind. I dont write mind maps because they are a well-known type of diagrams. Now Im talking about having frames, structures or any kind of graphical representation in the mind. For example, I started learning addition by imagining dice in my mind. So I prepared some drawings. Its not necessary to be able to see the drawings to understand this post. I include an explanation for each of them because of my awareness of accessibility. Furthermore, in this case, its very important to teach the vocabulary. Otherwise, they wont understand the Git messages. The drawings are a good way to introduce them to that vocabulary. A distributed version control system The general drawing contains 4 areas distributed as follows. A development environment with: Working directory Staging area or index Local repository A server with: Remote repository At that time, you can explain the benefits of a distributed version control system. Cloning a repository When cloning a repository, the data from the remote repository travel to 2 areas: Working directory Local repository Making changes in the working directory There are 2 types of files in the working directory: Tracked: Files that are known by Git. Untracked: Files that have not yet been added, so they arent known by Git. Updating the remote repository As soon as changes are ready in the working directory, they must be added in the staging area. When there is a set of changes with a single purpose in the staging area, its the time to create a commit with a message about that purpose in the local repository. When there is one or several commits in the local repository that are ready to be shared with the rest of the world, they must be pushed to the remote repository. At that time, you can talk about the different states of a file in the development environment: modified, staged and committed. Furthermore, you can explain: How to show the changes in the working directory: git diff. How to show the changes in the staging area: git diff --staged. How to show the changes in the working directory and the staging area: git diff HEAD. How a file can be changed in the working directory after being added to the staging area. etc. Updating the development environment Fetching When executing git fetch, the data from remote repository only travel to the local repository. Pulling When executing git pull, the data from remote repository travel to two areas: To local repository: fetch. To working directory: merge. If you take care of the commit history, consider the use of git pull --rebase. Instead of fetch + merge, it consists of fetch + rebase. Your local commits will be replayed and you wont see the known diamond shape in commit history. Next steps You can add another area in the development environment to explain stashing: dirty working directory. If people internalize these concepts, it will be easier for you to go a step further with branches, commit history, rebasing, etc. because you will have built a solid basis. Friendly reminder Ive worked with other version control systems (Visual SourceSafe, TFS and Subversion) and, in my humble experience, a lack of knowledge can be harmful with both an old tool and a new one. Dont only focus on choosing a tool, but also on mastering it. Further reading Pro Git book Received feedback My friend Marc Villagrasa reminds me that he found it very useful to solve Git challenges and to share the solutions among colleagues. Resources from comments at Hacker News: Linus Torvalds greatest invention Tech Talk: Linus Torvalds on git Linux.conf.au 2013 - Git For Ages 4 And Up Git From the Bottom Up Git From the Bottom Up (PDF) Learn Git Branching Flight rules for git Emacs package: Magit How to write a Good Commit Message Become a git guru Git Immersion Udacity: How to Use Git and GitHub After reading more comments at Reddit, I think that a more accurate title for this post would be An idea to teach Git, because its only an idea that appeared in my mind when learning Git by myself a few years ago with Pro Git book. This post is not a complete guide, only a starting point for trainers. Im sure all of these resources will be very useful as well. Thanks! And thanks Stuart Maxwell who shared this post at Hacker News and u/cryptoz who shared it at Reddit! Resources from comments at Twitter: This post explained in Japanese How to explain git in simple words? Learn Git Other related things: Better documentation through commit messages by Josh Kelley Bonus This article inspired Nico Riedmann to create this awesome post: Learn git concepts, not commands. ",
        "And here is something to take the garbage quality of Git manpages with some humor<p><a href=\"https://git-man-page-generator.lokaltog.net/\" rel=\"nofollow\">https://git-man-page-generator.lokaltog.net/</a><p>\"git-eliminate-head eliminates all downstream heads for a few forward-ported non-counted downstream indices, and you must log a few histories and run git-pioneer-object --pose-file instead. [...]\"",
        "I have taught git for university classes for some years. To be honest, git is a mess. It is conceptually not that hard, but the nomenclature is inconsistent and dangerously ambiguous (quick, what is the difference between reset, rebase, revert, and checkout?).<p>The most effective work flow I have found so far, is <i>teaching</i> only status/clone/pull/add/commit/push. Show them explicitly what happens normally, what happens when two changes conflict, and how to resolve merge conflicts. Using git on the command line only.<p>Then, have the students use git for a big-ish multi-student project. They will figure out the workflow themselves. After that project, once they understand the basics, you can talk about branches, debasing, the log and reflog, pull requests, and all the rest. Don't introduce graphical front ends before this point.<p>This method works well. It takes about one hour of teaching, and five weeks of active use afterwards. Git is a total pain to learn, and can only be understood by actively using it. I often get very positive feedback for having taught git.<p>I have gone through a few iterations with this topic, and have found that stripping down the initial instructions to an absolute minimum works best. All those fancy box diagrams are actively harmful to beginners."
      ],
      "relevant": "true"
    },
    {
      "id": 21426793,
      "title": "PlantUML in a nutshell",
      "search": [
        "PlantUML in a nutshell",
        "Normal",
        "http://plantuml.com/",
        "PlantUML in a nutshellEdit in DokuwikiEdit in AsciidocEdit in MarkdownPlantUML is a component that allows to quickly write: Sequence diagramUsecase diagramClass diagramObject diagramActivity diagram (here is the legacy syntax)Component diagramDeployment diagramState diagramTiming diagram The following non-UML diagrams are also supported: JSON dataYAML dataNetwork diagram (nwdiag)Wireframe graphical interface or UI mockups (salt)Archimate diagramSpecification and Description Language (SDL)Ditaa diagramGantt diagramMindMap diagramWork Breakdown Structure diagram (WBS)Mathematic with AsciiMath or JLaTeXMath notationEntity Relationship diagram (IE/ER) Furthermore: Hyperlinks and tooltipsCreole: rich text, emoticons, unicode, iconsOpenIconic iconsSprite iconsAsciiMath mathematical expressions Diagrams are defined using a simple and intuitive language. (see PlantUML Language Reference Guide). New users can read the quick start page. There is also a F.A.Q. page. PlantUML can be used within many other tools. Images can be generated in PNG, in SVG or in LaTeX format. It is also possible to generate ASCII art diagrams (only for sequence diagrams). Example:(You can edit the text if you want, the diagram will be dynamically updated!)describes the following diagram : This example is working thanks to the online demo server. ",
        "Maybe PLANTML => PlantUML?<p>Anyway, PlantUML is my go UML tool because it is a markup language that can be version controlled by git.",
        "Interesting thing to know : it's rendered on gitlab.com[1]. so you can directly embed the plantuml code within your README and see the diagram.<p>[1] <a href=\"https://gitlab.com/gitlab-com/gl-infra/infrastructure/issues/2163\" rel=\"nofollow\">https://gitlab.com/gitlab-com/gl-infra/infrastructure/issues...</a>"
      ],
      "relevant": "false"
    },
    {
      "id": 21158487,
      "title": "Streamlit: Turn a Python script into an interactive data analysis tool",
      "search": [
        "Streamlit: Turn a Python script into an interactive data analysis tool",
        "Normal",
        "https://towardsdatascience.com/coding-ml-tools-like-you-code-ml-models-ddba3357eace",
        "Introducing Streamlit, an app framework built for ML engineersCoding a semantic search engine with real-time neural-net inference in 300 lines of Python.In my experience, every nontrivial machine learning project is eventually stitched together with bug-ridden and unmaintainable internal tools. These tools often a patchwork of Jupyter Notebooks and Flask apps are difficult to deploy, require reasoning about client-server architecture, and dont integrate well with machine learning constructs like Tensorflow GPU sessions.I saw this first at Carnegie Mellon, then at Berkeley, Google X, and finally while building autonomous robots at Zoox. These tools were often born as little Jupyter notebooks: the sensor calibration tool, the simulation comparison app, the LIDAR alignment app, the scenario replay tool, and so on.As a tool grew in importance, project managers stepped in. Processes sprouted. Requirements flowered. These solo projects gestated into scripts, and matured into gangly maintenance nightmares.The machine learning engineers ad-hoc app building flow.When a tool became crucial, we called in the tools team. They wrote fluent Vue and React. They blinged their laptops with stickers about declarative frameworks. They had a design process:The tools teams clean-slate app building flow.Which was awesome. But these tools all needed new features, like weekly. And the tools team was supporting ten other projects. They would say, well update your tool again in two months.So we were back to building our own tools, deploying Flask apps, writing HTML, CSS, and JavaScript, and trying to version control everything from notebooks to stylesheets. So my old Google X friend, Thiago Teixeira, and I began thinking about the following question: What if we could make building tools as easy as writing Python scripts?We wanted machine learning engineers to be able to create beautiful apps without needing a tools team. These internal tools should arise as a natural byproduct of the ML workflow. Writing such tools should feel like training a neural net or performing an ad-hoc analysis in Jupyter! At the same time, we wanted to preserve all of the flexibility of a powerful app framework. We wanted to create beautiful, performant tools that engineers could show off. Basically, we wanted this:The Streamlit app building flow.With an amazing beta community including engineers from Uber, Twitter, Stitch Fix, and Dropbox, we worked for a year to create Streamlit, a completely free and open source app framework for ML engineers. With each prototype, the core principles of Streamlit became simpler and purer. They are:#1: Embrace Python scripting. Streamlit apps are really just scripts that run from top to bottom. Theres no hidden state. You can factor your code with function calls. If you know how to write Python scripts, you can write Streamlit apps. For example, this is how you write to the screen:import streamlit as stst.write('Hello, world!')Nice to meet you.#2: Treat widgets as variables. There are no callbacks in Streamlit! Every interaction simply reruns the script from top to bottom. This approach leads to really clean code:import streamlit as stx = st.slider('x')st.write(x, 'squared is', x * x)An interactive Streamlit app in three lines of code.#3: Reuse data and computation. What if you download lots of data or perform complex computation? The key is to safely reuse information across runs. Streamlit introduces a cache primitive that behaves like a persistent, immutable-by-default, data store that lets Streamlit apps safely and effortlessly reuse information. For example, this code downloads data only once from the Udacity Self-driving car project, yielding a simple, fast app:Using st.cache to persist data across Streamlit runs. To run this code, please follow these instructions.The output of running the st.cache example above.In short, Streamlit works like this:The entire script is run from scratch for each user interaction.Streamlit assigns each variable an up-to-date value given widget states.Caching allows Streamlit to skip redundant data fetches and computation.Or in pictures:User events trigger Streamlit to rerun the script from scratch. Only the cache persists across runs.If this sounds intriguing, you can try it right now! Just run:$ pip install --upgrade streamlit $ streamlit hello You can now view your Streamlit app in your browser. Local URL: http://localhost:8501 Network URL: http://10.0.1.29:8501This will automatically pop open a web browser pointing to your local Streamlit app. If not, just click the link.To see more examples like this fractal animation, run streamlit hello from the command line.Ok. Are you back from playing with fractals? Those can be mesmerizing.The simplicity of these ideas does not prevent you from creating incredibly rich and useful apps with Streamlit. During my time at Zoox and Google X, I watched as self-driving car projects ballooned into gigabytes of visual data, which needed to be searched and understood, including running models on images to compare performance. Every self-driving car project Ive seen eventually has had entire teams working on this tooling.Building such a tool in Streamlit is easy. This Streamlit demo lets you perform semantic search across the entire Udacity self-driving car photo dataset, visualize human-annotated ground truth labels, and run a complete neural net (YOLO) in real time from within the app [1].This 300-line Streamlit demo combines semantic visual search with interactive neural net inference.The whole app is a completely self-contained, 300-line Python script, most of which is machine learning code. In fact, there are only 23 Streamlit calls in the whole app. You can run it yourself right now!$ pip install --upgrade streamlit opencv-python$ streamlit runhttps://raw.githubusercontent.com/streamlit/demo-self-driving/master/app.pyAs we worked with machine learning teams on their own projects, we came to realize that these simple ideas yield a number of important benefits:Streamlit apps are pure Python files. So you can use your favorite editor and debugger with Streamlit.My favorite layout for writing Streamlit apps has VSCode on the left and Chrome on the right.Pure Python scripts work seamlessly with Git and other source control software, including commits, pull requests, issues, and comments. Because Streamlits underlying language is pure Python, you get all the benefits of these amazing collaboration tools for free .Because Streamlit apps are just Python scripts, you can easily version control them with Git.Streamlit provides an immediate-mode live coding environment. Just click Always rerun when Streamlit detects a source file change.Click Always rerun to enable live coding.Caching simplifies setting up computation pipelines. Amazingly, chaining cached functions automatically creates efficient computation pipelines! Consider this code adapted from our Udacity demo:A simple computation pipeline in Streamlit. To run this code, please follow these instructions.Basically, the pipeline is load_metadata create_summary. Every time the script is run Streamlit only recomputes whatever subset of the pipeline is required to get the right answer. Cool!To make apps performant, Streamlit only recomputes whatever is necessary to update the UI.Streamlit is built for GPUs. Streamlit allows direct access to machine-level primitives like TensorFlow and PyTorch and complements these libraries. For example in this demo, Streamlits cache stores the entire NVIDIA celebrity face GAN [2]. This approach enables nearly instantaneous inference as the user updates sliders.This Streamlit app demonstrates NVIDIA celebrity face GAN [2] model using Shaobo Guans TL-GAN [3].Streamlit is a free and open-source library rather than a proprietary web app. You can serve Streamlit apps on-prem without contacting us. You can even run Streamlit locally on a laptop without an Internet connection! Furthermore, existing projects can adopt Streamlit incrementally.Several ways incrementally adopt Streamlit. (Icons courtesy of fullvector / Freepik.)This just scratches the surface of what you can do with Streamlit. One of the most exciting aspects of Streamlit is how these primitives can be easily composed into complex apps that look like scripts. Theres a lot more we could say about how our architecture works and the features we have planned, but well save that for future posts.Block diagram of Streamlits components. More coming soon!Were excited to finally share Streamlit with the community today and see what you all build with it. We hope that youll find it easy and delightful to turn your Python scripts into beautiful ML apps.Thanks to Amanda Kelly, Thiago Teixeira, TC Ricks, Seth Weidman, Regan Carey, Beverly Treuille, Genevive Wachtell, and Barney Pell for their helpful input on this article.References:[1] J. Redmon and A. Farhadi, YOLOv3: An Incremental Improvement (2018), arXiv.[2] T. Karras, T. Aila, S. Laine, and J. Lehtinen, Progressive Growing of GANs for Improved Quality, Stability, and Variation (2018), ICLR.[3] S. Guan, Controlled image synthesis and editing using a novel TL-GAN model (2018), Insight Data Science Blog. ",
        "This looks really slick, can't wait to try it out!<p>If anyone is curious about other tools in the same space, our data scientists use Dash[1] and plotly to build interactive exploration and visualization apps. We set up a Git repo that deploys their apps internally with every merge to master, so they're actually building and updating tools that our operations, marketing, etc teams use every day.<p>[1] <a href=\"https://plot.ly/dash/\" rel=\"nofollow\">https://plot.ly/dash/</a>",
        "Interesting project, but why does an open source developer tool needs browser telemetry?<p>You should ask for telemetry permissions _before_ the process starts up (as you do for email address), and keep the default as \"No\", instead of start to send the data transparently unless non user friendly steps are taken by the user."
      ],
      "relevant": "false"
    },
    {
      "id": 21522522,
      "title": "Developing open-source FPGA tools",
      "search": [
        "Developing open-source FPGA tools",
        "Normal",
        "https://twitter.com/TinyFPGA/status/1177940755530207232",
        "Something went wrong, but dont fret lets give it another shot. ",
        "For those who are not familiar with silicon vendors' toolchain, it really is very poor quality especially when they started pushing for GUI based Graphical/System development.<p>Vendors make money selling silicon, they see the toolchain as a necessary evil.<p>There are 2018 tools that are still unable to fully support VHDL-2008 standard. Many bugs reported years again remain open. And often the GUI centric\n approach means you are left manually changing ad nauseam several GUI fields and ticking boxes, until you eventually determine what is the tcl 'equivalent' to at least try to ease your pain (tcl scripting often is another pain all together but arguably a lesser evil).<p>Also specifically with Xilinx they seem to have zero consideration for basic version control and create/duplicate/modify an explosion of files and cached versions of files.<p>Projects like GHDL and this are a breath of fresh are.",
        "I'm surprised no one has mentioned Icarus Verilog [0]. I used this extensively when I was in college around 2002. Open source, used to only support FreeBSD (my first BSD exposure), but is cross platform. It saved my ass, as I didnt have to compete for limited lab time on the few Solaris boxes with the proprietary tools we used in my VLSI class while studying EE.<p>I was sitting on my living room floor with my FreeBSD laptop punching out my project while others were waiting in line at 2am for lab time.<p>Fun times.<p>Wrote all of the components for a basic 8-bit ALU while watching with Mothman Propechies and sipping some Bourbon. Wrote a C++ program in that time, too, to generate exhaustive tests for all components. Icarus was fucking awesome for all this. As a commuter student my last 2 years, not having to hang out waiting for time was awesome. I got a lot more sleep, and a lot more done.<p>I've not kept up with its development, but its apparently now cross platform and still under active development. Any amateur interested in Verilog should definitely give it a look.<p>[0] <a href=\"http://iverilog.icarus.com\" rel=\"nofollow\">http://iverilog.icarus.com</a>"
      ],
      "relevant": "false"
    },
    {
      "id": 20377175,
      "title": "Quick start guide to research on human factors of software engineering",
      "search": [
        "Quick start guide to research on human factors of software engineering",
        "Normal",
        "http://web.eecs.utk.edu/~azh/blog/guidehciseresearch.html",
        "Austin Z. Henley Assistant Professor azh@utk.edu @austinzhenley github/AZHenley This guide is meant to help new graduate students get a short introduction to research at the intersection of human-computer interaction (HCI) and software engineering (SE). By reading the materials listed below, you will get a small taste of the field. ",
        "In my experience for most developers the behaviors boil down to just a few questions?<p>1. Are the developers willing to write original code or must they be limited to configurations or tooling?<p>2. Are the developers willing to accept any API (RTFM) or must the developers be limited to prior known APIs?<p>3. Are the developers willing to accept failure for missing unspecified, but commonly known, requirements such as accessibility, usability, security, or domain specific knowledge?<p>4. Are the developers willing to alter their personal routines to accommodate a shift in requirements and delivery dates or do the developers shift requirements to accommodate their routines, such as work-life balance?<p>5. Will the developers write technical documentation to describe process and approach or will the developers shift requirements in anticipation of forth-coming technical documentation?<p>6. Will the developers refactor code to achieve simplicity (imperative), descriptive concepts (declarative), code style, or not at all? The motivations generally do not overlap.<p>7. Will the developers accept code that better achieves business concerns or end-user preferences (object measures) in violation to preferred structures or styles (subjective measures)?<p>8. Are the developers willing to read the existing code (RTFC) before recommending new tools or solutions?",
        "I really want this kind of research to flourish, but the first click I made on an interesting looking paper led me to: \"To measure tool usage, we randomly sampled code changes from four Eclipse and eight Mylyn developers and ascertained, for each refactoring, if it was performed manually or with tool support.  We found that refactoring tools are seldom used: 11 percent by Eclipse developers and 9 percent by Mylyn developers.\"<p>To be fair, I haven't read the paper and the rest of the abstract looks reasonable: \"To understand refactoring practice at large, we drew from a variety of data sets spanning more than 39,000 developers, 240,000 tool-assisted refactorings, 2,500 developer hours, and 12,000 version control commits.\"<p>But what the heck is the first bit for?  Of 12 people I know, the vast majority don't use refactoring tools.  That's not the basis on which to launch a study.  I've skimmed the abstracts of the other papers as well and I'm not all that impressed.  Everything seems to be doing comparisons against Eclipse.  While Eclipse has a variety of different usability features, I'm actually not convinced any of them help at all (which is why I don't use it ;-) ).  So at the very least, I'd like to see a baseline against a traditional text editor like Emacs or Vim.  The \"improvements\" in usability that they are measuring may simply be the avoidance of problems in Eclipse.  I'm not trying to start an editor war here, I'm just saying you can't assume that any single editor is a good baseline.  I'd argue strenuously that feature rich editors like Eclipse, IntelliJ, VS Code, etc, etc are particularly bad candidates because nobody has really measured the effectiveness of their features.<p>Without being too negative, I hope there are better papers on these kinds of topics because I think it's incredibly important."
      ],
      "relevant": "false"
    },
    {
      "id": 19652376,
      "title": "Infrastructure as Code, Part One",
      "search": [
        "Infrastructure as Code, Part One",
        "Normal",
        "https://crate.io/a/infrastructure-as-code-part-one/",
        "Let's say you've developed a new feature and you want to release it. You've avoided all the typical pitfalls when it comes to making a new release and you've done everything as you were meant to. It's not a Friday, it's not 5 pm, and so on. But your organization is still doing manual releases. So that means that a systems administrator is logging on to each one of your production machines and deploying the latest version of the code. At your organization, the rules demand that you submit a rollout request in advance. And in this instance, you are granted a rollout window for Tuesday afternoon. Your application changes have already been successfully deployed in the staging environment. The tests pass, and everything else has gone smoothly. You're feeling confident. Tuesday afternoon rolls around, and it's time to make the release to the production environment. The deployment is successful on the first machine. And the second machine. But wait. Something goes wrong on the third machine. It turns out that the third production server has a different set of application dependencies installed. The versions are incompatible. You start debugging, but there's a fixed time window for the deployment, and time is running out... Eventually, time runs out. You've missed the window. The entire release is rolled back. And now you have to request another rollout. But approval from stakeholders is slow, so the next opportunity is a week away. Damn. You spend the rest of the day investigating what went wrong. Eventually, you figure it out. Somebody logged on to the third machine last week and manually updated some of the software. These changes were never propagated to the other servers, or back to the staging environment, or dev environments. Does any of this feel familiar? If so, you're not alone. Fortunately, Infrastructure as Code (IaC) can help you mitigate all of the problems described above. In part one of this IaC miniseries, I will introduce you to the basic concepts and explain some of the benefits. An Introduction As the name suggests, Infrastructure as Code uses code to provision, configure, and manage infrastructure. Using the right set of tools, it is straightforward to create a description of the infrastructure on which your application should be deployed. This description includes the specification of virtual machines, storage, software stacks, network configurations, security features, user accounts, access control limits, and so on. This description is done using code, often using a declarative language. The language you use varies depending on the tools you use, from common scripting languages to Domain Specific Languages (DSL) provided by the tools. IaC has evolved alongside the emergence of Infrastructure as a Service (IaaS) and other cloud-based services. The programmability of IaaS and the declarative nature of IaC work very well together. Instead of setting up that cloud environment by hand each time, you can just automate it with IaC. But that doesn't mean that IaC limits you to IaaS, whether public, private, or hybrid. With a little extra work, you can use infrastructure configuration tools to manage a traditional collection of physical servers. Alternatives Before I continue, it would be remiss of me not to mention the other options. There are three main ones that I can think of: Manually setting up your infrastructure using the visual console provided by your cloud provider.For example, using the Azure Portal by hand to set up your Microsoft Azure products, one by one. Clicking around the interface, creating a new VM, choosing the operating system from a drop-down menu, launching it, monitoring the status, and so on. Using the CLI tool provided by a cloud provider. Instead of using a cloud provider, you're managing your own physical machines or virtual machines. And you have written your own collection of configuration tools, management tools, deployment scripts, and so on. If you're using a cloud provider, the console is a great way to learn the ropes. But this quickly grows tiresome and error-prone if you try to manage your whole setup like this. And in addition, there's usually no built-in change visibility. You have to remember what actions you took, and document them for the rest of the team. And if you're managing your own servers by hand, developing your own system administration scripts can work okay. But it's easy for such a system to become a bit of a non-standard hodgepodge. And, well, things can quickly get out of hand... The Landscape Okay, let's take a high-level look at the IaC landscape. There are basically two categories of tools: Orchestration tools are used to provision, organize, and manage infrastructure components. Examples include Terraform, AWS CloudFormation, Azure Resource Manager. Configuration management tools are used to install, update, and manage the software running on the infrastructure components. Examples include SaltStack, Puppet, Chef, and Ansible. Additionally, when it comes to IaC, there are two primary approaches to managing infrastructure: Some tools (e.g., SaltStack) treat infrastructure components as mutable objects. That is, every time you make a change to the configuration, the necessary set of changes are made to the already-running components. Other tools (e.g., Terraform) treat infrastructure components as immutable objects. That is, when you make a change, new components with the new configuration are created to replace the old components. What Are the Benefits? Developer Mindset Developers ideally concern themselves with creating stable and sustainable software. But when infrastructure is \"something those other people take care of,\" it's easy for developers not to consider how the software they are building is going to be run. When you manage the infrastructure using code and involve the application developers in that process, it can prompt a change in mindset. How is this application going to be deployed? How is it going to be maintained once it's running? How are upgrades done? Have you thought about all the ways it might fail on a production machine? What preventative measures can you take? All of this and more becomes a natural part of the application development process itself when it is integrated with IaC. Version Control Because you are defining your infrastructure with code, it should also be versioned in a repository like the rest of your code. All of the benefits that change control offers application development are made available for infrastructure management: A single source of truth. The code itself, and the way it is laid out is a communication tool and can be used to understand the way things are built. The history of changes is recorded and accessible so you can understand what has changed and why over time. Coding standards can be developed and maintained. Pull requests and code reviews increase knowledge sharing and improve the overall quality of the code. Experimental changes can be made on branches and tested in isolation. Making changes is less daunting because if something goes wrong, you can revert back to a previously known working version. And so on, and so on... Knowledge Sharing It's a widespread phenomenon that one or two people in an organization will accumulate critical information that only they seem to possess. [At one of my previous companies, we kept a list of such individuals called the \"red bus\" list, so named because of the risk that one of them might be hit by one. Ed.] Less dramatically, such people take holidays and sometimes get sick, like anyone. So you should be able to cope with them not being around. With your infrastructure documented using code, it is hopefully relatively straightforward to understand. And what's more, this is a type of living documentation that should always be up-to-date. Better Use of Time In general, humans are bad with tedious, repetitive tasks. We lose interest, and that's when we're most likely to make mistakes. Fortunately, this is what machines are good at. When you manage your infrastructure with code, you offload all of the tedious, repetitive work to computers. And as a result, you reduce the chance of inconsistencies, mistakes, incomplete work, and other forms of human error. This also allows your people to spend their time and energies on other more important, high-value tasks Continuous Integration Continuous Integration (CI) is the practice of team members merging their code changes into a mainline branch multiple times per day. The benefit is that you are continually validating your code against your test suites, and you can adapt to changes being made to the codebase in a manageable, incremental fashion, as and when it happens, and not all in one go at the end of your project (what has been termed \"integration hell\"). IaC improves CI because changes to the infrastructure can be tested like changes to the application code. Additionally, a temporary testing environment can be provisioned for every change to application code. Continuous Delivery Continuous Delivery (CD) is the process of making regular automated releases every time code is pushed to the mainline branch. CD and IaC are a match made in heaven. With IaC, you can set up a deployment pipeline that automates the process of moving different versions of your application from one environment to the next as your testing and release schedules dictate. But more on that topic in another post. :) Wrap Up Infrastructure as Code (IaC) bridges the gap between system administrators and developers, and in doing so it: Helps developers think about the entire lifecycle of the software they are developing. Brings version control, code reviews, knowledge sharing, and other benefits to systems administration. Enables you to radically transform your CI and CD pipeline. Reduces the need for repetitive and error-prone tasks, freeing people up to work on more exciting things. The end result should be a more consistent, reliable, and well-understood infrastructure that is easier to develop and easier to maintain. In part two of this miniseries, I dive into the details and show you some of the ways we're using Terraform at Crate.io for provisioning and managing infrastructure. ",
        "Nice piece. Looking forward to Part II.<p>What I am missing (often, in these type of articles as well as in actual production environments) is the fact that if you develop (infrastructure) code, you also need  to test your (infrastructure) code. Which means you need actual infrastructure to test on.<p>In my case, this means network equipment, storage equipment and actual physical servers.<p>If you're in a cloud, this means you need a seperate account on a seperate creditcard and start from there to build up the infra that Dev and Ops can start deploying their infra-as-code on.<p>And this test-infrastructure is <i>not</i> the test environments other teams run <i>their</i> tests on.<p>If that is not available, automating your infrastructure can be dangerous at best. Since you cannot properly test your code. And your code will rot.",
        "What I find unfortunate about infrastructure-as-code tooling is that a lot of the tooling isn't actually using code, but instead uses esoteric configuration languages. Indeed, the article refers to Terraform with its custom syntax.<p>Imho tools should use actual code (whether it's TypeScript or Kotlin or whatever) instead of reinventing constructs like loops and string interpolation.<p>Thankfully these tools are getting more popular, because frankly I can't stand configuring another Kubernetes or GCP resource using a huge block of copy/pasted YAML."
      ],
      "relevant": "false"
    },
    {
      "id": 19580860,
      "title": "Design Tools for Everything",
      "search": [
        "Design Tools for Everything",
        "Normal",
        "https://github.com/LisaDziuba/Awesome-Design-Tools",
        "Awesome Design Tools Awesome Design Plugins Awesome Design Conferences Awesome Design UI Kits Awesome Design Tools as a part of Flawless App family joins Abstract! Today, were excited to announce that Flawless App has joined Abstract, a design delivery platform that brings visibility, accountability, measurability, and predictability to design. Flawless App was our first company, and were proud of everything that weve achieved with our 5-person team. Since 2015, weve launched powerful tools for designers and developers among them are Flawless App, Reduce, Flawless Feedback. Weve also invested a lot of love and care into community-driven initiatives. Awesome Design Tools is one of them. So whats next? Our team has joined Abstract and is focused on building out the Abstract SDK, bringing developers experience forward. One unbelievable journey has finished and the new one has just begun. And if you want to know more about the future of Awesome Design Tools, please keep reading our FAQ. How to Use and Contribute Now you are in the Awesome Design Tools section, if you need plugins go to Awesome Design Plugins. To find the tool, go through the Table of Contents or search for a keyword (for example, \"animation\", \"prototyping\"). Ask Lisa on Twitter. If you found some great design tool or plugin, just send a Pull Request with respect to our Contribution Guidelines (they're very simple, please take a look). Design tools should be submitted here and plugins in Awesome Design Plugins file. We use such labels for free , open source and Mac only tools, don't forget to add them. Now I'd love to see your suggestions! Table of Content Accessibility Tools Animation Tools Augmented Reality Collaboration Tools Color Picker Tools Design Feedback Tools Design Handoff Tools Design Inspiration Design System Tools Design to Code Tools Design Version Control Development Tools Experience Monitoring Font Tools Gradient Tools Icons Tools Illustrations Information Architecture Logo Design Mockup Tools No Code Tools Pixel Art Tools Prototyping Tools Screenshot Software Sketching Tools SMM Design Tools Sound Design Stock Photos Tools Stock Videos Tools for Learning Design UI Design Tools User Flow Tools User Research Tools Visual Debugging Tools Wireframing Tools 3D Modeling Software Accessibility Tools Accessibility is the practice of creating websites and apps usable for all people, including individuals with visual, motor, auditory, speech, or cognitive disabilities. Here you will find web accessibility tools, accessibility testing tools, and accessibility apps both for developers and designers: Accessibility checking features are also available in VisBug from the Visual Debugging Tools category. Animation Tools Animations guide people through the product friendly and smoothly. Live interactive UI makes users feel delighted with instant feedback and emotional touch. These free and paid tools are designed to make animation creation easier. If you plan to make animated transitions, micro-interactions or scroll-based animations, go through these tools: Drama, Principle, Framer, Invision Studio, Flinto are also among UI & UX animation apps and software animation tools. Augmented Reality Augmented Reality is a technology that upgrades our real world, by adding a layer of digital information to it. The use of AR increases day by day with dozens of new AR apps, development kits, and AR frameworks. So in this section is collected different augmented reality tools for creating, projecting and prototyping apps focused on AR: Collaboration Tools Looking to try some tools for agile design and development collaboration? Good idea because such tools make the lives of designers and developers much easier, save time and improve productivity. Well, you know all that in Slack-driven era. Here you'll find the best collaboration tools for product teams: Airtable part spreadsheet, part database, and entirely flexible, teams use Airtable to organize their work, their way. Asana the work management platform teams use to stay focused on the goals, projects, and daily tasks that grow business. Basecamp the project management suite designed to organize employees, delegate tasks, and monitor progress right from one place. Freedcamp the most innovative way to manage projects, completely free... forever. Droplr screenshot, file sharing and screencasts to help you capture and explain your ideas. Excalidraw a whiteboard tool that lets you easily sketch diagrams with a hand-drawn feel. Filestage an agile content approval software that helps you to review videos, designs, and documents with clients and co-workers. Float a tool to plan your projects and schedule your teams time all in one place. Gallery a collaborative tool for uploading design work, getting feedback, and tracking revisions. HiveDesk an automatic time tracking for remote employees with screenshots. It makes it easier to monitor the productivity of remote employees and manage projects. Jira software development tool used by agile teams. Jitsi multi-platform open-source video conferencing you can install yourself or use on their servers. Keybase a free collaboration app with built-in end-to-end encrypted chat, file sharing, git repositories, and more Lumeer - an easy visual collaborative tool to plan, organize and track anything, anywhere, anytime. Mattermost a flexible, open-source messaging platform that meets even the most demanding privacy and security standards. Milanote an easy-to-use, collaborative tool to organize your ideas and projects into visual boards. Mixed real-time whiteboard and collaboration tools for distributed teams. Moqhub fast online proofing for creative projects. Get feedback for images and PDFs. MURAL think and collaborate visually. Anywhere, anytime. Nextcloud open source collaboration platform for files, kanban boards, chat & calls, calendar and more. Notion write, plan, collaborate, and get organized. Notion is all you need in one tool. ProofHub the one place for all your projects, teams and communications. RealtimeBoard (Miro) whiteboarding platform for cross-functional team collaboration. It was recently renamed to Miro. Slack a collaboration hub for work, no matter what work you do. Its a place where conversations happen, decisions are made, and information is always at your fingertips. Sunsama a beautifully designed, team-oriented task manager that consolidates Trello/Jira/Asana tickets into a single, calendar-oriented view. Taskade team productivity made simple, fun and designed for remote teams. Taskade is collaborative and syncs in real-time across the web, mobile, and desktop. Trello a web-based project management application that enables you to organize and prioritize your projects in a fun, flexible and rewarding way. Witeboard simple real-time whiteboard for collaboration work. Workzone a simple, powerful project management software. Wrike an online project management software that gives you full visibility and control over your tasks. Zenkit a tool to schedule meetings, track the projects progress, and brainstorm new ideas. zipBoard an online visual bug tracking and website annotation tool Zulip combines the immediacy of real-time chat with an email threading model, helping to focus on important conversations while ignoring irrelevant ones. Color Picker Tools If you are looking for an eyedropper tool, color identifier or color capture, check this section. With the color pickers mentioned here, you will be able to create new color combinations and define great ones. Almost all of these tools are free: BrandColors the biggest collection of official brand color codes around. Calcolor a web-based color palette management tool which provides a new way to interact with digital colors. Chroma free web app which allows you to identify the color. Color create color schemes with the color wheel or browse thousands of color combinations from the Color community. Made by Adobe. Color by Cloudflare a tool to preview palettes against UI elements, cycle through accessible color combos and create palettes manually, via URL import, or generatively. Color Deck an HSL driven color palette collection. It's also open-source. Color Hexa free color tool providing information about any color and generating matching color palettes for designs. Color Hex Picker - a tool for getting the name of any color from any image. You also get the HEX code and RGB value for the color. Color Hunt free and open platform for color inspiration with thousands of trendy hand-picked color palettes. ColorKit a tool for blending colors and generating a color's shades and tints. Color Leap leap through time and see the colors of history. Colorpicker a complete and open-source color manipulation tool with picking. ColorSlurp the ultimate color productivity booster for designers and developers. ColorsWall/ place to store your color palettes or easy generate. Colorwise search through the color palettes of the most voted products on Product Hunt. Colour Cafe colors inspiration that has selected a modern color palette on Instagram. Colourcode an online designer tool, which allows you to easily and intuitively combine colors. Coolors the super-fast color scheme generator. Culrs thoughtfully crafted and easy-to-use color palettes. Geenes a tool to create harmonious color themes with code and sketch file export. Image Color Picker image color picker and color scheme generator. Instant Eyedropper a minimalist eyedropper tool for windows, supports multiple color formats for both designers and developers. Just Color Picker Free portable offline color picker and color editor. Khroma AI-based tool to generate color palettes based on your preferences. Material Colors Native Google's material design color palette in the form of a mac app. Material Design Palette Generator get perfect Material Design color palettes from any hex color. Paletton a designer tool for creating color combinations that work together well. Picular a rocket fast primary color generator using Google's image search. Pigment a color palette generator with innumerable color configurations suggested by the app. Pikka color picker & color schemes generator for macOS. React Color a collection of color pickers from Sketch, Photoshop, Chrome. Its free and open-source. Sip a better way to collect, organize and share colors. Global eyedropper tool for macOS. Skala Color works with a huge variety of formats, covering everything youre likely to need for web, iOS, Android, and macOS development. Swatches iOS app that lets you collect, inspect and share the colors that inspire you in your daily life. Tint & Shade Generator display tints and shades of a given hex color in 10% increments. Viz Palette color picker for data visualizations. You can also create color palettes with Leonardo, which is mentioned in the Accessibility Tools section. Design Feedback Tools How do you provide and get feedback during the development process? This process is usually pretty messy for many product teams, which caused product delays and time waste on back-and-forth communication. So if you wish to get fast and structural feedback on UI issues or visual bugs take a look at this tool: Flawless Feedback review and annotate iOS apps then share your feedback in Jira or Trello. GoVisually online proofing, design review & approval software. Design Handoff Tools Design handoff happens when designers finish the work and need to deliver designs to developers with all specs and assets. Design handoff tools allow to automatically generate style guide, comment on the design, inspect elements. These tools minimize guesswork and improve the effectiveness of the design process. You can also make a design handoff within Relay, mentioned in the Design Version Control section. Design Inspiration The creative process can be tough. So if ideas dont come to your mind right away, try to search for inspiration in the work of other designers. These design inspiration sites feature design patterns, user flows, email markups and creative solutions of popular companies and great products: Behance an online platform to showcase & discover creative work. CodeMyUI handpicked collection of web design & UI inspiration with code snippets. Collect UI a platform for your daily inspiration collected from Daily UI & beyond. Based on Dribbble shots, 14419 handpicked designs. Creative Portfolios a curation of the most creative portfolios made by designers & developers. Design Hunt a daily collection of the best products, apps, and inspirations for all creatives. Dribbble an online community for showcasing user-made artwork. A great resource to get inspired by others work. Ficture a font in use archive that will inspire you. Inspiration UI a community that aims to provide the best design resources for those who create for the web. Hover States showcase great work from the bleeding edge of digital culture for, and with, the creative community. Httpster an inspiration resource showcasing rocking websites made by people from all over the world. H69.Design landing page colletions & Free resources for designers. Lapa Ninja landing page design inspiration from around the web. 1800+ landing page examples and updated daily. Mobile Patterns a design inspirational library featuring finest UI UX Patterns (iOS and Android). Mobbin browse mobile design patterns for popular apps. Explore common user flows such as onboarding, account sign up and log in, core functionality, and more. One Page Love a collection of beautiful unique One Page websites for website design inspiration. Owwly home for digital products crafted with passion to design. Page Flows user flow videos and screenshots to inspire you when you're stuck. Discover mobile and web design patterns for over 160 different tasks. pttrns design patterns for popular mobile apps. Really Good Emails 4,150+ handpicked email design. ReallyGoodUX screenshots, and examples of great UX from real mobile and web products. Discover the best UX examplesincluding onboarding tours and walkthroughs. Saas Landing Page iscover the best landing page examples created by top-class SaaS companies, and get ideas and inspiration for your next design project. Saas Pages a collection of the best landing pages with a focus on copywriting and design. The Design Team comics about a design team for a tech startup in Silicon Valley. Typewolf helps designers choose the perfect font combination for their next design project. UI Garage the one-stop shop for designers, developers, and marketers to find inspiration, tools and the best resources. UI Sources over 500+ interactions from the best designed and top-grossing apps on the App Store today. UI Recipes weekly 15 min lessons on UI design from the hottest apps. UX Archive browse more than 400 user flows across 120 mobile apps. Examine tasks such as booking, logging in, onboarding, purchasing, searching, and more. Waveguide a design knowledge bank with thousands of artificially enriched examples of product and brand experience (examples of Mobile App, Landing pages, eCommerce, CX/UX Patterns). Web Design Museum over 1,200 carefully selected web sites that show web design trends between the years 1994 and 2006. Design System Tools I bet you heard about Design Systems, as its a pretty trendy topic. Design systems provide consistent, robust design patterns to keep design and development in sync. They are essentially collections of rules, constraints, and principles, implemented in design and code. Here you can find tools to build, maintain and organize your design system. Cabana a Premium Design System for Sketch that helps you create amazing products faster than ever before. Catalog a living style guide for digital products, combining design documentation with real live components. Design System Manager Invision's design system manager. DSK short for Design System Kit a workbench for collaboratively creating Design Systems. EOS Design System an open-source and customizable built on top of Bootstrap following the Atomic Design concept. Eva Design System customizable design system, available for Sketch with Mobile and Web component libraries. Frontify create graphical guidelines, patterns libraries, design systems. Interplay connect design and engineering around a single source of truth. The tool is not publicly available yet (beta). Lingo create a shared asset library with your entire team. Lucid tool for creating, managing and sharing a design system. From a simple component library through to detailed descriptions of your styles. Modulz design, build, document and publish your design systemwithout writing code. Prime Design System Kit it includes device templates, charts, UI kit and even illustration kit. Specify a tool to create, scale and maintain a design system. Storybook an open-source tool for developing UI components in isolation for React, Vue, and Angular. Symbol Design System design System for Sketch-based on atomic elements. Toolabs design systems and components based design, prototype and development tool. It's not public yet but you can apply to the early access. Zeroheight style guides created by designers, extended by developers, and editable by everyone. We can also add to this in Sketch, Figma, UXPin and Framer X (Framer X Team Store). Design to Code Tools Everyone can learn development but it takes time and effort. If you need a website or an app right now and you dont want to hire a developer, pay attention to the website builders. Such design to code tools will help you to make a portfolio, simple landing or an app pretty fast and beautiful. Anima a web app with a Sketch plugin that converts Sketch to HTML. Blocs a fast, easy to use and powerful visual web design tool, that lets you create responsive websites without writing code. Bootstrap Studio a powerful web design tool for creating responsive websites using the Bootstrap framework. Draftbit visually design and build mobile apps directly from your browser. EasyLogic Studio fantastic css+svg design tool, also it is converted into code as shown. Grapedrop design your components, web projects and publish them instantly online, with an easy to use editor. Mobirise an offline drag and drop website builder software that is based on Bootstrap 3/4 and \\ AMP. PageCloud the fastest and most customizable website builder that allows anyone to create their ideal website. PaintCode vector drawing app that instantly converts drawings into Swift, Objective-C, JavaScript or Java code. Pinegrow a professional visual editor for CSS Grid, Bootstrap 4 and 3, Foundation, responsive design, HTML, and CSS. px.div a proper site build tool for developers and designers. Readymag a visually-pleasing tool for designing on the web from landing pages to multimedia long-reads, presentations and portfolios. Sparkle the easiest way to make a real website, no code, no jargon. STUDIO design from scratch, collaborate in real-time and publish websites. Supernova Studio import designs from Sketch and convert them into Android, iOS or React Native code. Tilda create a website, landing page or online store for free with the help of Tilda modules and publish it on the same day. Wix the easiest and fullest-featured website builder, that allows you to create your own highly customized site. Webflow build responsive websites in your browser, then host with us or export your code to host wherever. Design Version Control Developers actively use version control tools for a long time, probably since 2005 (Git first release). Using a version control system is no brainer for dev teams, while the design version control system appeared only recently. This market is rapidly developing and we expect to see even more in version control for designers: Development Tools This section mentions development tools and browsers. Development browsers have features that help developers and designers create and test websites and apps. Experience Monitoring Listening to users is important but seeing the real usage is even more crucial. For these, you need to install different analytic tools, experience monitoring software, and user behavior apps. Just use those analytics solutions concerning users data: Font Tools Fonts are commonly used for making the web a more beautiful place. Its an essential part of any design. In this section, youll find fonts generators & font finder tools that allow you to manage and work with fonts: BeFonts a Decent collection of free fonts. Behance Free Fonts a list of free fonts uploaded on Behance. DaFont archive of freely downloadable fonts. Browse by alphabetical listing, by style, by author or by popularity. Emotype makes it easy to find fonts based on the emotions you want to convey on your website. Fontbase font management made easy. FontFabric gorgeous interface and good collection. Fontface Ninja browser extension to discover what fonts are being used on any website. FontPair a simple tool that helps you pair Google Fonts together. Fontown a typographic tool with a nonstop growing font catalog which facilitates designer workflow. Fonts thousands of beautiful fonts by Adobe. Fonts Arena curated typography website with high-quality free fonts, done-for-you research articles, free alternatives to premium fonts, news, and more. FontGet variety of fonts all sorted neatly with tags. FontSelf an extension for Illustrator and Photoshop CC that lets you turn any lettering into OpenType fonts in minutes! FontSpark a simple tool to help designers quickly find the best fonts for their projects. Font Squirrel download free fonts with wide collections. Google Fonts making the web more beautiful, fast, and open through great typography. Google Webfonts Helper a hassle way to self-host Google Fonts. Its free and open-source. LostType the first Pay-What-You-Want type foundry. Measure measure typographic line lengths with this browser extension for Chrome. RightFont font managing app, helps preview, sync, install and organize fonts over iCloud, Dropbox or Google Drive. Sans Forgetica a downloadable font that is scientifically designed to help you remember your study notes. Size Calculator calculate the perceived size using viewing distance and physical size of the printed typography. Typeface font manager that improves your design workflow with live font previews and flexible tagging. Wakamai Fondue the tool that answers the question \"what can my font do?\". Web Font Preview preview Google Font pairings with components and site templates. Webfont create and maintain custom SVG icon fonts, made a shared library of icons. WordMarkIt displays your written word/phrase with all the fonts which are already installed on your computer. You can also handle fonts with Specify, which is mentioned in the Design System Tools section. Gradient Tools You can see gradient colors are everywhere UI, branding, illustration, typography. A gradient is created by using two or more different colors to paint one element while gradually fading between them. It might look as a memorable, fresh and unique color. To make such a gradient for your design, use these gradient color palettes. You can also create and audit gradients with Leonardo, which is mentioned in the Accessibility Tools section. Icons Tools As well as fonts, icons are used in every design. These basic elements support and guide many user actions inside the product. Without a doubt, icons are a vital element in user navigation. While making those small design elements is hard and time-consuming, you can get thousands of vector icons for personal and commercial use. Animaticons a growing set of beautiful, high-resolution, animated GIF icons that you can customize. CoreUI Icons premium designed free icon set with marks in SVG, Webfont and raster formats. Digital Nomad Icons lifestyle icon & emoji pack for your next project. 25 high-resolution flat icons. Essential Glyphs created to cover your needs in perfect-shaped icons. Adapted for small and large sizes. Feather Icons each icon is designed on a 24x24 grid with an emphasis on simplicity, consistency, and readability. Flaticon 1593000+ vector icons in SVG, PSD, PNG, EPS format or as icon font. Font Awesome the web's most popular icon set and toolkit, also it's open source. Fontello tool to build custom fonts with icons, also open source. Freepik collection of exclusive freebies and all graphic resources that you need for your projects. Iconscout get high-quality Icons, Illustrations and Stock photos at one place. Iconfinder a marketplace for vector icons (SVG). Icon sets available in IconJar format. IconJar store all your icons in one icon manager. Iconmonstr discover 4412+ free icons in 305 collections.Big and continuously growing source of simple icons. Iconset free, cross-platform and fast SVG icon organizer working on Mac and Windows. Icon Store a library of free vector icons for personal and commercial projects, designed by first-class designers. ICONSVG a tool to simplify the process of finding and generating common icons for your project. Icons8 free iOS, Android and Windows styled icons. Ikonate customize, adjust and download free vector icons. illustrio a smarter icon library. Build something great with 100% customizable icons. Ionicons beautifully crafted open source icons. Material Design Icons free material design icons made possible by open source contributons. Material Icons Library free collection of 1000+ icons for popular graphics tools. Motion free, simple animated icon editor. Norde Source mac, Windows and Linux app to color and customize icon sets to fit your brand. Noun Project icons for everything. Nucleo a Mac and Windows app to collect, customize and export all your icons. Orion Icons SVG vector icons with an advanced interactive web app. Simple Icons free SVG icons for popular brands. Simply click the icon you want, and the download should start automatically. Share Icon more than 300 000 free download icons in different formats. Streamline Emoji a free collection of 850 + vector emoji. The style is inspired by the japanese Kawaii (cute) style. Svgsus SVG icon management tool. SVG Colorizer a tool to automatically change the entire color palette of any given SVG icon pack intelligently keeping the shades, highlights & shadows. SVGRepo a site with 300.000+ SVG Vectors and Icons. Tilda Icons download free icons for landing pages. More than 700 vector icons, collected in 43 sets for business. Twemoji Twitters open-source emoji has you covered for all your project's emoji needs. Unicons 1000+ pixel-perfect vector icons for your next project. VisualPharm free SVG Icons with super-fast search and free Coke. Built for fun by Icons8. Xicons free vector icons, that update every 10 days. Zwicon handcrafted icon set for your next project. You can also handle icons with Specify, which is mentioned in the Design System Tools section. Illustrations Illustrations can be used on your landing page, blog posts, inside your app or email campaign. They make your design live and playful. While drawing good illustration is a task of a skilled graphic designer, you can grab free SVG images & illustrations from very kind people in our community: Absurd Design free surrealist illustrations for your projects. Blobmaker create vector blob illustrations in the browser, with varying colour, complexity and contrast. Blush create, mix and customize illustrations made by artists around the world. Humaaans a free library to mix-&-match illustrations of people. Illustration by Pngtree over 13142 professionally designed illustrations of different styles. IRA Design create amazing illustrations, using hand-drawn sketch components, a cool selection of 5 gradients and ai., svg. or png. formats. JoeSchmoe an illustrated avatar collection for developers and designers, perfect as placeholders or live sites. LukaszAdam free vector art illustrations and icons. They are available for personal and commercial use. ManyPixels royalty-free illustrations to power up your projects. Mega Doodles Pack big vector pack with hand-drawn doodles for presentations, social media, blog posts and so on. Open Doodles a set of free illustrations by Pablo Stanley that embraces the idea of Open Design. You can copy, edit, remix, share, or redraw these images for any purpose without restriction under copyright or database law (CC0 license.). Ouch vector illustrations to class up your project. Free for both personal and commercial use. Squircley - all you need to start creating beautiful SVG squircles. unDraw a collection of beautiful SVG images. Wannapik a collection of free illustrations, vector images, photos, and animations for any use. Information Architecture Information architecture helps designers organize and structure content inside websites, mobile apps, and other software. So users will understand product functionality and will find everything needed. These information architecture tools should allow you to create visual sitemaps and to improve your website content structure: DYNO Mapper organize website projects using visual sitemaps, content inventory, content audit, content planning, daily keyword tracking, and website accessibility testing. Octopus.do visual sitemap builder. Build your website structure in real-time and rapidly share it to collaborate with your team or clients. OmniGraffle reate beautiful diagrams and designs with this powerful and easy to use app. OptimalSort card sorting tool that allows you to understand how people categorize content in your UI. Treejack upload your proposed sitemap to see how a user would move through your site. WriteMaps create sitemaps that impress! Plan out the pages and content for your next website project in a visual, fun, and beautiful manner. Logo Design A logo is the starting point of your brand identity. It reflects the product mission, functionality and brand message. Ideally, the logo creates a strong connection between your product and the users. Logo design is an art, as well as many other design disciplines. With the right logo design tools, this art can be done right a bit faster. You can also do your logo design with Adobe Photoshop, GIMP, Inkscape, Krita and Vectr which are mentioned in UI design tools. Mockup Tools A mockup is a visual way of representing the product. While a wireframe mostly represents a products structure, a mockup shows how the product is going to look like. These mockup tools that help you create and collaborate on mockups, wireframes, diagrams, and prototypes: Artboard Studio online graphic design application mainly focused on product mockups. Cleanmock create stunning mockups using the latest device frames like iPhone & custom backgrounds. Craftwork Design free and premium high-quality digital products that make your work faster and easier. Device Shots a tool that helps you create beautiful device mockups with the screenshot of your website or mobile application, for free. Devices by Facebook images and Sketch files of popular devices. Dimmy.club device mockup generator for your website and app screenshots. Frrames Frrames mockups is perfectly crafted responsive windows mockups for your ideal presentation. Lstore Graphics free and premium mockups, UI/UX tools, scene creators for busy designers. Mediamodifier create impressive product mockups in seconds. Mockflow the quickest way to brainstorm user interface ideas. Mockup World tons of free and legal, fully layered, easily customizable photo realistic PSDs. Mockups For Free free design resources, PSD files for graphic and web designers. Mockuuups drag-and-drop tool for creating beautiful app previews or any marketing materials. Mock Video instantly create mockups by adding a device frame to your videos. Moqups helps you create and collaborate in real-time on wireframes, mockups, diagrams and prototypes. Original Mockups high-quality mockups for Photoshop that make your designs stand out. Overframe for Mac record your prototype & app with device frame overlay. PixelBuddha free and premium high-quality resources for web designers and developers. Ramotion Store carefully crafted Apple and Android mockups for Sketch and Photoshop. Rotato animated 3D mockups for your app designs. SceneLab create realistic mockups and customized brand designs online. Screely quickly frame web page designs into a minimalist browser window. ScreenSpace 3D devices videos for motion designer. Screenzy instantly transform your pictures and screenshots into beautiful mockups ready to be shared on social media. Screeener use this app to insert a bunch of images to a keynote file, using the mockup you choose. Smartmockups create stunning product mockups with just a few clicks. shotsnapp create beautiful device mockup presentation for your digital app and website design. The Mockup Club a directory of the best free design mockups for Photoshop, Sketch, Figma and InVision Studio. Threed generate custom 3D Device Mockups in your Browser. UI Store Design 200+ free handpicked design resources for Sketch, Figma, Adobe XD, InVision Studio, Photoshop, Illustrator CC. UI8 Design Freebies epic design freebies to get you started. Vector Mockups Library free collection of presentation Mockups for Sketch, Figma & Photoshop. No Code Tools With a rise of no code tools, everyone with a laptop can build and launch a project. These tools help designers and makers create websites, apps, and even games. No code tools allow to automate routine tasks and can be used without a development background. Take a look at the tools here and if you need more check Design to Code section. Bubble build and host web applications without having to write code or hire a team of engineers. Carrd simple, free, fully responsive one-page sites for pretty much anything. Coda a new type of document that blends the flexibility of documents, the power of spreadsheets, and the utility of apps into a single new canvas. Kodika.io build iOS apps with Kodika no code app builder for Mac & iPad, capable of creating powerful apps with Drag & Drop. PageXL a simple one-page website builder for quickly creating landing pages and online stores. Remove.bg a free service to remove the background of any photo. Retool gives you building blocks and you can build tools much faster. sheet2api create an API from Google Sheets or Excel Online Spreadsheets, no coding required. Sheet2Site create a website from Google Sheets without writing code. Shopify one platform with all the e-commerce and point of sale features you need to start, run, and grow your business. Thunkable a drag-and-drop tool for anyone to build native mobile apps. UserGuiding create walkthroughs, checklists, hotspots, and modals to improve user onboarding. Pixel Art Tools Pixel art is a digital art form where color is applied to individual pixels to create an image. The pixel art can be used to create everything from intricate scenes and game backgrounds to character designs or emoji. If you feel curious to try, check this pixel art software for both macOS and Windows: Prototyping Tools A prototype is a simple experimental design of a proposed solution. It should help to test ideas, design assumptions, and hypotheses in a fast and cheap way. Prototyping tools allow designers and clients to see how the product would function in the real world and collaborate on this solution. Many modern prototyping tools can use for wireframing, prototyping, and collaboration: Alva create living prototypes with code components. It's also open source. Axure RP wireframing, prototyping, collaboration & specifications generation. SAP Build a complete set of cloudbased tools to design and build your enterprise app. Creo prototyping, code exporting and built-in mobile app builder. Drama prototype, animate and design in a single Mac app. InVision prototyping, collaboration & workflow platform. Flinto a Mac app for creating interactive and animated prototypes of app designs. Framer X a tool to visually design realistic interactive prototypes. Keynote the built-in Mac app for creating presentations that can also be used for quick prototyping (see how Apple designers use it in the WWDC 2014 session \"Prototyping: Fake It Till You Make It\" to verify design concepts). Lightwell visual tool and SDK to build mobile layouts and animations that translate into native iOS elements. Marvel App the collaborative design platform. Wireframe, prototype, design online and create design specs in one place. Maze a tool for designers and developers that gives analytical results with actionable KPIs for your Invision prototypes. Origami a free tool for designing modern user interfaces. Quickly put together a prototype, run it on your iPhone or iPad, iterate on it, and export code snippets your engineers can use. Pencil prototyping tool with many built-in components that people can easily install and use to create mockups in popular desktop platforms. Principle makes it easy to design animated and interactive user interfaces. ProtoPie piece hi-fi interactions together, build sensor-aided prototypes and share your amazing creations in a matter of minutes. Proto.io a tool to create fully-interactive high-fidelity prototypes that look and work exactly as your app should. Prott an easy to use and intuitive prototyping tool, promotes team collaboration. Uizard transform wireframes into high-fidelity interactive prototypes, customize style systems, export to Sketch, export to HTML/CSS code. Useberry a usability testing tool that allows importing prototypes from InVision, AdodeXD, Sketch, Marvel and getting users behavior insights with heatmaps, video recordings, user flows, time bars and answers of follow-up questions. UXPin build prototypes that feel real, with powers of code components, logic, states, and design systems. You can also do prototyping with Figma, Adobe XD, Sketch and InVision Studio, which are mentioned in the UI Design Tools section. Screenshot Software Taking screenshots is a typical task in the design & development workflow. So these free and full-featured screenshot apps can help you capture a screen with ease. Some screen captures are macOS only, while others support both OS: Camtasia a screen recorder that comes with a full-blown built-in editor. CleanShot capture your screen in a superior way with a built-in annotation tool and Quick Access Overlay. CloudApp record videos, webcam, annotate screenshots, create GIFs. Collabshot take and collaborate on screenshots in real-time with your coworkers. Gifox delightful GIF recording and sharing app. Giphy Capture capture parts of your screen and export as gif or mp4. Greenshot take a screenshot of a selected region, window or fullscreen. Kap open source screen recorder with options to export to GIF, MP4, WebM and APNG. Lighshot taking quick captures of your screen. Monosnap create screenshots, annotate and upload them to the cloud. OBS open source software for video recording and live streaming. Quicktime a video player that you can use to record your screen. ScreenFlow video editing and screen recording software for Mac. Screenie filter and search through images, change screenshot filetypes. ScreenshotAPI.net create pixel-perfect full page website screenshots. ScreenToGif record a gif of part of the screen. Only available for Windows. ShareX screen capture, file sharing, and productivity tool. Shotty a menu bar app that helps you quickly find the screenshot you're looking for so you can drag and drop it into any application. Snagit capture images and video, create GIFs, annotate, edit, and share. Snipping Tool Windows free screenshot tool. Snappy takes quick shots and organizes them for you into collections. Teampaper Snap allows you to take screenshots of a selected area. Sketching Tools Sometimes you need just a pencil and paper to start creating your app or website. So here are you can find online sketching tools with great sketch sheet templates to speed up your creative process: You can also do some sketching with Sketch mentioned in UI design tools. SMM Design Tools Often marketing teams need well-design materials. It can be different banners, promo visuals, favicons, animations or just nice images for social platforms, like Twitter or Instagram. It this section we will keep adding tools for everyone to create marketing designs. Sound Design Sound design is an art of creating a soundscape for a site, app, movie, game or any other product. The sound has great potential for transforming the way people connect with your product. Some sound design software is very advanced and can be used mostly by sound designers, while others are good for beginners. Appsounds UI Sound packs for apps, games, and any product. AudioJungle 836,206 tracks and sounds from the community of musicians and sound engineers. Bensound download creative commons music, royalty free music for free and use it in your project. Freesound a collaborative database of Creative Commons Licensed sounds. Browse, download and share sounds. Fugue Music download free background music for your videos. Max connect objects with virtual patch cords to create interactive sounds, graphics, and custom effects. Reaper import any audio and MIDI, synthesize, sample, compose, arrange, edit, mix, and master songs or any other audio projects. Sonic Pi a live coding music synth. SoundKit a UI sound library designed for all of your interface needs. UI Sounds learn sound design for user interfaces by example. Wistia Music download some free background tracks to add energy and emotion to your videos. WOWA download royalty-free music for YouTube videos, podcasts, and apps. No copyright CC0. Music inspired by Unsplash. YouTube Audio Library browse and download free music for your project. Stock Photos Tools Need a high-quality photo for iOS app or new banner? You can always shoot it yourself or borrow from the stock photo sites. Luckily, there are hundreds of beautiful, free stock photos and royalty-free images that you can use for any project: Burst free stock photos for websites and commercial use. Duotone free duotone images to use in any project, or make custom duotone images. Death to Stock paid-for stock photo service with a mailing list for occasional free packs, and a focus on not looking like stock photography. FoodiesFeed thousands of beautiful realistic free food pictures in high resolution. FreePhotos.cc free stock photos for commercial use. Freestocks.org high quality photos all released under Creative Commons CC0. Gratisography a collection of free high-resolution pictures. Jay Mantri 7 new photos released every Thursday under the Creative Commons CC0. Kaboom Pics stock photos including abstract, city/architecture, fashion, food & landscapes. LandingStock a collection of free images for your landing page. Life of Pix free high-resolution photos, created by the LEEROY team. LoremPixel an API that serves stock photos at specified sizes and categories. Great for placeholder/user-generated content. Magdeleine free high-quality stock photos for your inspiration. Moose don't search for stock photos, create them. MMT STock high-resolution photos provided by Jeffrey Betts with Creative Commons CC0. New Old Stock a vintage photos from the public archives free of known copyright restrictions. Pexels an aggregate of many free stock photo resources. Photo Creator a free tool for creating realistic stock photos on your demand. Picography free stock photos by Dave Meier and various other photographers with Creative Commons CC0. Pixabay sharing photos, illustrations, vector graphics, and film footage under a proprietary license. Picjumbo a collection of totally free photos for your commercial & personal works. Pngtree millions of PNG images, backgrounds and vectors for free download. pxhere free image stock. Reshot a massive library of handpicked free stock photos you wont find elsewhere. ShotStash thousands of free high-resolution CC0 photos and videos. SkitterPhoto a wide variety of stock photos and are released under Creative Commons CC0. Startup Stock Photos free photos for startups, bloggers and publishers. StockSnap.io a large selection of free stock photos and high-resolution images. StyledStock free feminine stock photography for every woman entrepreneur. The Gender Spectrum Collection a stock photo library featuring images of trans and non-binary models that go beyond the clichs. UI Faces an aggregator that indexes various free avatar sources that you can use in your design mockups. Unsplash stock photos free to use. #WOCinTech Chat Photos free stock photos of women technologists of diverse backgrounds. Zoommy helps you find awesome free stock photos for your creative product or inspiration. Stock Videos If you work with video-content, you will enjoy these high-quality, hand-curated stock videos. You'll find many good and free stock video sites below, which you can use on your website, in your ad campaigns or social media: Tools for Learning Design UI Design Tools What are the best UI design tools in 2019? You can pick any of the tools below and it will allow you to do dozens of design tasks UI for site or mobile, wireframe, prototype, animation, logo. These are great and fully-functional tools for UX & UI designers: Adobe XD design, prototype, and share any user experience, from websites and mobile apps to voice interactions. Affinity Designer a vector graphics editor for macOS, iOS, and Microsoft Windows. Akira native Linux App for UI and UX Design built in Vala and Gtk. Botmock design, prototype, and test voice and text conversational apps. Supports multiple platforms. CleverBrush a browser-based online vector editor and digital publishing tool which is possible to integrate to the page as JS component. Figma a design tool based in the browser, that allows to design and prototype with real-time collaboration. GIMP a free & open-source imaging and graphic design software. Gravit a free vector design app, available for macOS, Windows, Linux, ChromeOS, and browser. Illustrator create logos, icons, drawings, typography, and illustrations for print, web, video, and mobile. Made by Adobe. Inkscape a free and open-source vector graphics editor. It can create or edit vector graphics such as illustrations, diagrams, line arts, charts, logos, and complex paintings. Krita a free painting and graphic design software considered a good alternative to Adobe Photoshop. Lunacy a free native windows app that works offline and supports .sketch files. Flexible and light weighed. Intuitive and easy to use. Speedups and empowers UI and UX designers. The must have to produce stunning designs. Photopea a free browser-based graphic design app alternative to Photoshop. Photoshop imaging and graphic design software developed by Adobe. Pixelixe a graphic design tool built for marketers, bloggers and small businesses that needs to create stunning and unique images, graphics or static webpages in minutes. Sketch a design toolkit built for Mac. Studio combines design, prototyping, and collaboration into one harmonious workflow. Made by InVision. TwitPile creates tiled images out of Twitter followers, interests and lists. Vectr a simple web and desktop cross-platform tool to create vector graphics easily and intuitively. Voiceflow prototype, design and deploy real apps for Amazon Alexa & Google Home. User Flow Tools User flow is a series of steps a user takes to achieve a meaningful goal. It's a fast way to plan customer journey paths and improve UX. So if you need to make a user flow diagram, user flow map or a sitemap, take a look at these tools: Draw.io a free online diagram software for making flowcharts, process diagrams, org charts, UML, ER, and network diagrams. Flowmapp an online tool for creating sitemaps and user flows that helps you to effectively design and plan user experience. Google Drawings create diagrams and charts, for free; all within Google Docs. Lucidchart an online tool for creating diagrams, flow charts, sitemaps, and more. MindNode a mind mapping app that makes brainstorming simple and easy. NinjaMock wireframe and user flow online tool. Link your views and create logic flow prototype. All with freehand visual style. OmniGraffle a diagramming and digital illustration application for macOS and iOS. Overflow turn your designs into playable user flow diagrams that tell a story. Sketch.systems ui and flow design with interactive state machines. SQUID create beautiful User Flows in Sketch in just minutes. WebSequenceDiagrams a simple webapp to work out object interactions arranged in time sequence. Whimsical easy to create flow charts, wireframes and sticky notes. Wireflow free, online and open source tool for creating beautiful user flow prototypes. XMind: ZEN a brainstorming and mind mapping tool that can switch between outline and tree-chart. Link topics with other charts. yEd free desktop tool for making diagrams. Usable for the wide variety of use cases. Auto-layout helps a lot when making flowcharts. User Research Tools User research helps you understand user behaviors, needs, and motivations through various qualitative and quantitative methods (interviews, observation, forms, etc). These user research tools can be useful for you: Appoint.ly a web-based scheduling tool that helps to schedule meetings quickly through the integration with calendars online. Calendly Calendly helps you schedule meetings without the back-and-forth emails. Crowd Signal collect, organize and analyze data from a variety of sources, including social media and mobile. Doodle online calendar tool for time management, and coordinating events, meetings, appointments Evolt create user personas, storyboards, business model canvas, experience maps, brainstorming boards and moodboards in a clean and modern way. Feedback Lite collect high quality customer feedback using Voice of Customer solutions designed to improve your website performance and boost customer engagement. GoToMeeting a simple, extraordinarily powerful web conferencing service. Handrail end-to-end, collaborative user research and insights platform plan research, collect and analyze data, and share your findings. JotForm create online forms, get an email for each response, collect data. Lookback remotely run, record, and take notes for your user research sessions, either with a live product or with a prototype. MineTime a free calendar app with smart scheduling and time analytics features. Reflector Reflector is a basic screen-mirroring and recording tool so you can conduct user tests remotely, using any existing wireframes or prototypes. Reframer a research tool that helps your team to capture, tag (code) and identify patterns in qualitative data across multiple research participants. Sticktail a platform for centralizing, finding and sharing user insights within your organization. Survey Monkey online survey tool to capture the voices and opinions of the people who matter most to you. Typeform use a simple drag-and-drop interface to create any kind of form, survey, or questionnaire, and even take credit card payments. Wufoo reate forms, collect data and payments and automate your workflows. YesInsights simple one question and NPS surveys to improve your business. UserBit a platform of real-time research tools for your team. Tag/code interviews and feedback, capture insights, create personas, visual sitemaps and more. User Interviews recruit participants from a community of 125,000 members based on profession, demographics, geography and more, for any kind of research. Zoom it's one of the best online meeting services. Visual Debugging Tools Wireframing Tools A wireframe is a visual mockup that outlines the basic structure of the site or an app. It contains the most essential elements and the content, helping you easily explain ideas on design. Wireframes are a low-fidelity way of showing a design. This section is presented the best wireframing tools for a variety of use cases. Three D Modeling Software 3D graphics are used in gaming, film making, architecture, engineering, and 3D printing. 3D artists & designers use specific 3D modeling software, mentioned in this section. Autodesk integrated CAD, CAM, and CAE software. Unify design, engineering, and manufacturing into a single platform. Blender free and open-source 3D Creation Software. FreeCAD a free and open-source multiplatform 3D parametric modeler. MatterControl a free, open-source, all-in-one software package that lets you design, slice, organize and manage your 3D prints. Maya make animations, environments, motion graphics, virtual reality, and character creation, all in one toolset. Onshape a modeling software specially oriented to design technical and spare parts, was the first full-cloud 3D software created. OpenSCAD a software for creating solid 3D CAD objects. Rhino a curve-based 3D modeling software that creates mathematically-precise models of 3D surfaces. SketchUp 3D design software that truly makes 3D modeling for everyone, with a simple to learn yet robust toolset. Tinkercad a free, easy-to-use app for 3D design, electronics, and coding. Vectary create beautiful 3D models with our drag and drop 3D modeling tool. 3D Slash 3D modeling tool, available on all devices and all OS, online and offline. Addendum (Reference & Inspiration) Awesome Design Tools & Plugins is curated by Lisa Dziuba & Valia Havruliyk from Flawless team. And it was hugely inspired by articles from the design community and Prototypr.io Toolbox made by our good friend Graeme Fulton. If you found some great design tools, please suggest it. Thanks for making this project awesome :) ",
        "I read the title as an imperative statement and was disappointed that it’s just yet another GitHub “<i>Awesome list of...</i>”.<p>Was really hoping for an article about building custom tooling as I feel like a lot of my day is spent doing exactly that (ie mini tools to automate recurring semi manual tasks).",
        "These lists are a nice idea, but i do not like the execution - they are little more than a dump of someone's bookmarks. Personally i'd like to see a bit more information about each entry, including screenshots and a short explanation about the program.<p>Something like Softpedia would be great (although simpler), although preferably without garbage reviews like this: <a href=\"https://www.softpedia.com/get/Programming/Coding-languages-Compilers/DMD.shtml\" rel=\"nofollow\">https://www.softpedia.com/get/Programming/Coding-languages-C...</a> (for a bonus WTF check the screenshot).<p>Alternatively (and probably easier to do) something like tinyapps.org but with a bit more information per entry."
      ],
      "relevant": "true"
    }
  ]
}
