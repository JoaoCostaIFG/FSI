{
  "responseHeader": {
    "status": 0,
    "QTime": 19
  },
  "response": {
    "numFound": 10049,
    "start": 0,
    "numFoundExact": true,
    "docs": [
      {
        "story_id": 20745393,
        "story_author": "ingve",
        "story_descendants": 355,
        "story_score": 357,
        "story_time": "2019-08-20T10:39:18Z",
        "story_title": "Sunsetting Mercurial Support in Bitbucket",
        "search": [
          "Sunsetting Mercurial Support in Bitbucket",
          "https://bitbucket.org/blog/sunsetting-mercurial-support-in-bitbucket",
          "[Update Aug 26, 2020] All hg repos have now been disabled and cannot be accessed.[Update July 1, 2020] Today, mercurial repositories, snippets, and wikis will turn to read-only mode. After July 8th, 2020 they will no longer be accessible. The version control software market has evolved a lot since Bitbucket began in 2008. When we launched, centralized version control was the norm and we only supported Mercurial repos. But Git adoption has grown over the years to become the default system, helping teams of all sizes work faster as they become more distributed.As we surpass 10 million registered users on the platform, we're at a point in our growth where we are conducting a deeper evaluation of the market and how we can best support our users going forward. After much consideration, we've decided to remove Mercurial support from Bitbucket Cloud and its API. Mercurial features and repositories will be officially deprecated on July 1, 2020.Read on to learn more about this decision, the important timelines, and get migration resources and support. The timeline and how this may affect your team Here are the key dates as we sunset Mercurial functionality: February 1, 2020: users will no longer be able to create new Mercurial repositories [Extended] July 1, 2020: users will not be able to use Mercurial features. All hg repos, wikis, and snippets will be in read-only mode. Heres why were focusing on Git This wasnt an easy decision, and Mercurial will always have a special place in Bitbuckets history. DevOps adoption has skyrocketed over the last decade and our customers are adopting this new way of working at an exponential rate. In this time, Bitbucket has steadily grown from being just a version control management tool to being a place to manage the entire software development lifecycle. And there's always more work to be done. This year we will concentrate on building deeper integrations to enhance automation and collaboration. Our improvements will make it even easier and safer to plan, code, test, and deploy all from within Bitbucket. Building quality features requires intense focus, and supporting two version control systems means splitting focus doubling shipping time and technical overhead. With Git being the more popularly used tool, Mercurial runs the risk of overlooked issues as we scale. According to a Stack Overflow Developer Survey, almost 90% of developers use Git, while Mercurial is the least popular version control system with only about 3% developer adoption. In fact, Mercurial usage on Bitbucket is steadily declining, and the percentage of new Bitbucket users choosing Mercurial has fallen to less than 1%. This deprecation will enable us to focus on building the best possible experience for our users. How to migrate and export We recommend that teams migrate their existing Mercurial repos to Git. There are various Git conversion tools in the market, including hg-fast-export and hg-git mercurial plugin. We are happy to support your migration, and you can find a discussion about available options in our dedicated Community thread. If you prefer to continue using the Mercurial system, there are a number of free and paid Mercurial hosting services. We realize that there is no one-size-fits-all solution. That's why we've created the following resources to best equip you with the knowledge and tools for a seamless transition: A Community thread to discuss conversion tools, migration, tips, and offer troubleshooting help A Git tutorial that covers anywhere from the basics of creating pull requests to rebasing and Git hooks We want to thank all the loyal users who have grown with us over the years. We look forward to this new focus on our roadmap and to introducing exciting new features. "
        ],
        "story_type": "Normal",
        "url_raw": "https://bitbucket.org/blog/sunsetting-mercurial-support-in-bitbucket",
        "url_text": "[Update Aug 26, 2020] All hg repos have now been disabled and cannot be accessed.[Update July 1, 2020] Today, mercurial repositories, snippets, and wikis will turn to read-only mode. After July 8th, 2020 they will no longer be accessible. The version control software market has evolved a lot since Bitbucket began in 2008. When we launched, centralized version control was the norm and we only supported Mercurial repos. But Git adoption has grown over the years to become the default system, helping teams of all sizes work faster as they become more distributed.As we surpass 10 million registered users on the platform, we're at a point in our growth where we are conducting a deeper evaluation of the market and how we can best support our users going forward. After much consideration, we've decided to remove Mercurial support from Bitbucket Cloud and its API. Mercurial features and repositories will be officially deprecated on July 1, 2020.Read on to learn more about this decision, the important timelines, and get migration resources and support. The timeline and how this may affect your team Here are the key dates as we sunset Mercurial functionality: February 1, 2020: users will no longer be able to create new Mercurial repositories [Extended] July 1, 2020: users will not be able to use Mercurial features. All hg repos, wikis, and snippets will be in read-only mode. Heres why were focusing on Git This wasnt an easy decision, and Mercurial will always have a special place in Bitbuckets history. DevOps adoption has skyrocketed over the last decade and our customers are adopting this new way of working at an exponential rate. In this time, Bitbucket has steadily grown from being just a version control management tool to being a place to manage the entire software development lifecycle. And there's always more work to be done. This year we will concentrate on building deeper integrations to enhance automation and collaboration. Our improvements will make it even easier and safer to plan, code, test, and deploy all from within Bitbucket. Building quality features requires intense focus, and supporting two version control systems means splitting focus doubling shipping time and technical overhead. With Git being the more popularly used tool, Mercurial runs the risk of overlooked issues as we scale. According to a Stack Overflow Developer Survey, almost 90% of developers use Git, while Mercurial is the least popular version control system with only about 3% developer adoption. In fact, Mercurial usage on Bitbucket is steadily declining, and the percentage of new Bitbucket users choosing Mercurial has fallen to less than 1%. This deprecation will enable us to focus on building the best possible experience for our users. How to migrate and export We recommend that teams migrate their existing Mercurial repos to Git. There are various Git conversion tools in the market, including hg-fast-export and hg-git mercurial plugin. We are happy to support your migration, and you can find a discussion about available options in our dedicated Community thread. If you prefer to continue using the Mercurial system, there are a number of free and paid Mercurial hosting services. We realize that there is no one-size-fits-all solution. That's why we've created the following resources to best equip you with the knowledge and tools for a seamless transition: A Community thread to discuss conversion tools, migration, tips, and offer troubleshooting help A Git tutorial that covers anywhere from the basics of creating pull requests to rebasing and Git hooks We want to thank all the loyal users who have grown with us over the years. We look forward to this new focus on our roadmap and to introducing exciting new features. ",
        "comments.comment_id": [20745989, 20746077],
        "comments.comment_author": ["garganzol", "dragonsh"],
        "comments.comment_descendants": [4, 19],
        "comments.comment_time": [
          "2019-08-20T12:13:11Z",
          "2019-08-20T12:22:53Z"
        ],
        "comments.comment_text": [
          "It's funny to see how the whole world concentrates on this Git thing, while there is a treasure trove called Mercurial.<p>Mercurial was made for humans. It is seriously convenient and productive. Something I cannot say about Git, which more reminds me of an adhoc job.<p>I use both Git and Mercurial on daily basis. But my preference goes to Mercurial: it is just more sane in a big way. It is clearly a piece of art and love.",
          "It's very sad to see bitbucket dropping mercurial support. Now only Facebook and volunteers are keeping mercurial alive. \nSometimes technically better architecture and user interface lose to a non user friendly hard solutions due to inertia of mass adoption.<p>So a lesson in Software development is similar to betamax and VHS, so marketing is still a winner over technically superior architecture and ease of use. GitHub successfully marketed git, so git and GitHub are synonymous for most developers. Now majority of open source projects are reliant on a single proprietary solution Github by Microsoft, for managing code and project. Can understand the difficulty of bitbucket, when Python language itself moved out of mercurial due to the same inertia.<p>Hopefully gitlab can come out with mercurial support to migrate projects using it from bitbucket.<p>For people who believe in self hosted solution can install Kallithea (<a href=\"https://kallithea-scm.org\" rel=\"nofollow\">https://kallithea-scm.org</a>) or Rhodecode open source edition. Kallithea is used by Unity engine to manage their source code internally with mercurial."
        ],
        "id": "57cda62c-a990-4246-96fd-2efab14a3720",
        "_version_": 1718536513273200640
      },
      {
        "story_id": 21055373,
        "story_author": "gk1",
        "story_descendants": 5,
        "story_score": 26,
        "story_time": "2019-09-24T00:47:23Z",
        "story_title": "Building a Modern CI/CD Pipeline in the Serverless Era with GitOps",
        "search": [
          "Building a Modern CI/CD Pipeline in the Serverless Era with GitOps",
          "https://aws.amazon.com/blogs/aws/building-a-modern-ci-cd-pipeline-in-the-serverless-era-with-gitops/",
          "Guest post by AWS Community Hero Shimon Tolts, CTO and co-founder at Datree.io. He specializes in developer tools and infrastructure, running a company that is 100% serverless. In recent years, there was a major transition in the way you build and ship software. This was mainly around microservices, splitting code into small components, using infrastructure as code, and using Git as the single source of truth that glues it all together. In this post, I discuss the transition and the different steps of modern software development to showcase the possible solutions for the serverless world. In addition, I list useful tools that were designed for this era. What is serverless? Before I dive into the wonderful world of serverless development and tooling, heres what I mean by serverless. The AWS website talks about four main benefits: No server management. Flexible scaling. Pay for value. Automated high availability. To me, serverless is any infrastructure that you dont have to manage and scale yourself. At my company Datree.io, we run 95% of our workload on AWS Fargate and 5% on AWS Lambda. We are a serverless company; we have zero Amazon EC2 instances in our AWS account. For more information, see the following: Datree.io case study Migrating to AWS ECS Fargate in production CON320: Operational Excellence w/ Containerized Workloads Using AWS Fargate (re:Invent 2018) What is GitOps? Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. According to Luis Faceira, a CI/CD consultant, GitOps is a way of working. You might look at it as an approach in which everything starts and ends with Git. Here are some key concepts: Git as the SINGLE source of truth of a system Git as the SINGLE place where we operate (create, change and destroy) ALL environments ALL changes are observable/verifiable. How you built software before the cloud Back in the waterfall pre-cloud era, you used to have separate teams for development, testing, security, operations, monitoring, and so on. Nowadays, in most organizations, there is a transition to full developer autonomy and developers owning the entire production path. The developer is the King or Queen :) Those teams (Ops/Security/IT/etc) used to be gatekeepers to validate and control every developer change. Now they have become more of a satellite unit that drives policy and sets best practices and standards. They are no longer the production bottleneck, so they provide organization-wide platforms and enablement solutions. Everything is codified With the transition into full developer ownership of the entire pipeline, developers automated everything. We have more code than ever, and processes that used to be manual are now described in code. This is a good transition, in my opinion. Here are some of the benefits: Automation: By storing all things as code, everything can be automated, reused, and re-created in moments. Immutable: If anything goes wrong, create it again from the stored configuration. Versioning: Changes can be applied and reverted, and are tracked to a single user who made the change. GitOps: Git has become the single source of truth The second major transition is that now everything is in one place! Git is the place where all of the code is stored and where all operations are initiated. Whether its testing, building, packaging, or releasing, nowadays everything is triggered through pull requests. This is amplified by the codification of everything. Useful tools in the serverless era There are many useful tools in the market, here is a list of ones that were designed for serverless. Code Always store your code in a source control system. In recent years, more and more functions are codified, such as, BI, ops, security, and AI. For new developers, it is not always obvious that they should use source control for some functionality. GitHub AWS CodeCommit GitLab BitBucket Build and test The most common mistake I see is manually configuring build jobs in the GUI. This might be good for a small POC but it is not scalable. You should have your job codified and inside your Git repository. Here are some tools to help with building and testing: AWS CodeBuild CodeFresh GitHub Actions Jenkins-x CircleCI TravisCI Security and governance When working in a serverless way, you end up having many Git repos. The number of code packages can be overwhelming. The demand for unified code standards remains as it was but now it is much harder to enforce it on top of your R&D org. Here are some tools that might help you with the challenge: Snyk Datree PureSec Aqua Protego Bundle and release Building a serverless application is connecting microservices into one unit. For example, you might be using Amazon API Gateway, AWS Lambda, and Amazon DynamoDB. Instead of configuring each one separately, you should use a bundler to hold the configuration in one place. That allows for easy versioning and replication of the app for several environments. Here are a couple of bundlers: Serverless Framework AWS Serverless Application Model (AWS SAM) Package When working with many different serverless components, you should create small packages of tools to be able to import across different Lambda functions. You can use a language-specific store like npm or RubyGems, or use a more holistic solution. Here are several package artifact stores that allow hosting for multiple programming languages: GitHub Package Registry Jfrog Artifactory Sonatype Nexus Monitor This part is especially tricky when working with serverless applications, as everything is split into small pieces. Its important to use monitoring tools that support this mode of work. Here are some tools that can handle serverless: Rookout Amazon CloudWatch Epsagon Lumigo NewRelic DataDog Summary The serverless era brings many transitions along with it like a codification of the entire pipeline and Git being the single source of truth. This doesnt mean that the same problems that we use to have like security, logging and more disappeared, you should continue addressing them and leveraging tools that enable you to focus on your business. "
        ],
        "story_type": "Normal",
        "url_raw": "https://aws.amazon.com/blogs/aws/building-a-modern-ci-cd-pipeline-in-the-serverless-era-with-gitops/",
        "comments.comment_id": [21057480, 21063347],
        "comments.comment_author": ["tracer4201", "acdha"],
        "comments.comment_descendants": [0, 0],
        "comments.comment_time": [
          "2019-09-24T07:36:59Z",
          "2019-09-24T18:46:43Z"
        ],
        "comments.comment_text": [
          "Lol at the image where before microservices, it was a single monolithic application.<p>FaaS has its use cases but this “serverless for every solution” or 100% serverless marketing is annoying and NOT customer centric (Amazon said they were earths most customer centric company).",
          "This post was disappointing when it first ran: I was expecting some content after the basic intro but then it’s just a couple of saved Google searches with no discussion or analysis. It would have been a lot more interesting if they’d discussed anything about the trade offs of the different services or what they liked about a particular combination."
        ],
        "id": "fc3cb876-2ae6-4d1b-8f25-c0c2268d6bb3",
        "url_text": "Guest post by AWS Community Hero Shimon Tolts, CTO and co-founder at Datree.io. He specializes in developer tools and infrastructure, running a company that is 100% serverless. In recent years, there was a major transition in the way you build and ship software. This was mainly around microservices, splitting code into small components, using infrastructure as code, and using Git as the single source of truth that glues it all together. In this post, I discuss the transition and the different steps of modern software development to showcase the possible solutions for the serverless world. In addition, I list useful tools that were designed for this era. What is serverless? Before I dive into the wonderful world of serverless development and tooling, heres what I mean by serverless. The AWS website talks about four main benefits: No server management. Flexible scaling. Pay for value. Automated high availability. To me, serverless is any infrastructure that you dont have to manage and scale yourself. At my company Datree.io, we run 95% of our workload on AWS Fargate and 5% on AWS Lambda. We are a serverless company; we have zero Amazon EC2 instances in our AWS account. For more information, see the following: Datree.io case study Migrating to AWS ECS Fargate in production CON320: Operational Excellence w/ Containerized Workloads Using AWS Fargate (re:Invent 2018) What is GitOps? Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. According to Luis Faceira, a CI/CD consultant, GitOps is a way of working. You might look at it as an approach in which everything starts and ends with Git. Here are some key concepts: Git as the SINGLE source of truth of a system Git as the SINGLE place where we operate (create, change and destroy) ALL environments ALL changes are observable/verifiable. How you built software before the cloud Back in the waterfall pre-cloud era, you used to have separate teams for development, testing, security, operations, monitoring, and so on. Nowadays, in most organizations, there is a transition to full developer autonomy and developers owning the entire production path. The developer is the King or Queen :) Those teams (Ops/Security/IT/etc) used to be gatekeepers to validate and control every developer change. Now they have become more of a satellite unit that drives policy and sets best practices and standards. They are no longer the production bottleneck, so they provide organization-wide platforms and enablement solutions. Everything is codified With the transition into full developer ownership of the entire pipeline, developers automated everything. We have more code than ever, and processes that used to be manual are now described in code. This is a good transition, in my opinion. Here are some of the benefits: Automation: By storing all things as code, everything can be automated, reused, and re-created in moments. Immutable: If anything goes wrong, create it again from the stored configuration. Versioning: Changes can be applied and reverted, and are tracked to a single user who made the change. GitOps: Git has become the single source of truth The second major transition is that now everything is in one place! Git is the place where all of the code is stored and where all operations are initiated. Whether its testing, building, packaging, or releasing, nowadays everything is triggered through pull requests. This is amplified by the codification of everything. Useful tools in the serverless era There are many useful tools in the market, here is a list of ones that were designed for serverless. Code Always store your code in a source control system. In recent years, more and more functions are codified, such as, BI, ops, security, and AI. For new developers, it is not always obvious that they should use source control for some functionality. GitHub AWS CodeCommit GitLab BitBucket Build and test The most common mistake I see is manually configuring build jobs in the GUI. This might be good for a small POC but it is not scalable. You should have your job codified and inside your Git repository. Here are some tools to help with building and testing: AWS CodeBuild CodeFresh GitHub Actions Jenkins-x CircleCI TravisCI Security and governance When working in a serverless way, you end up having many Git repos. The number of code packages can be overwhelming. The demand for unified code standards remains as it was but now it is much harder to enforce it on top of your R&D org. Here are some tools that might help you with the challenge: Snyk Datree PureSec Aqua Protego Bundle and release Building a serverless application is connecting microservices into one unit. For example, you might be using Amazon API Gateway, AWS Lambda, and Amazon DynamoDB. Instead of configuring each one separately, you should use a bundler to hold the configuration in one place. That allows for easy versioning and replication of the app for several environments. Here are a couple of bundlers: Serverless Framework AWS Serverless Application Model (AWS SAM) Package When working with many different serverless components, you should create small packages of tools to be able to import across different Lambda functions. You can use a language-specific store like npm or RubyGems, or use a more holistic solution. Here are several package artifact stores that allow hosting for multiple programming languages: GitHub Package Registry Jfrog Artifactory Sonatype Nexus Monitor This part is especially tricky when working with serverless applications, as everything is split into small pieces. Its important to use monitoring tools that support this mode of work. Here are some tools that can handle serverless: Rookout Amazon CloudWatch Epsagon Lumigo NewRelic DataDog Summary The serverless era brings many transitions along with it like a codification of the entire pipeline and Git being the single source of truth. This doesnt mean that the same problems that we use to have like security, logging and more disappeared, you should continue addressing them and leveraging tools that enable you to focus on your business. ",
        "_version_": 1718536524950142976
      },
      {
        "story_id": 19083580,
        "story_author": "briansack35",
        "story_descendants": 3,
        "story_score": 27,
        "story_time": "2019-02-05T07:32:49Z",
        "story_title": "What is GitOps and why you should know about it",
        "search": [
          "What is GitOps and why you should know about it",
          "https://venturebeat.com/2019/02/02/what-is-gitops-and-why-you-should-know-about-it/",
          "February 2, 2019 12:10 PM Developing technology is far more expansive than just writing code. Technology teams need to consider a number of different aspects of the companys technology stack, including its compute infrastructure, storage, development pipeline, security, and more. Companies often purchase various third-party products to complete their technology stack so they dont have to build it all on their own. Each of these tools comes with some form of management console or dashboard that enables companies to tailor that specific tool to the their own needs as well as integrate it within their product. The onboarding, configuration, and ongoing management will likely occur directly from within that console. In fact, managing these third-party products and dashboards actually becomes a significant portion of a technology teams workload and today often falls under the responsibility of the DevOps team. Above: Dashboard overdose: IT organisations are bombarded by dashboards across their entire tech stack To increase automation and efficiency, some companies now are bypassing dashboards and instead preferring to manage these products directly from within their code base. These products are then deployed and configured not as another management console, but rather by developers, as code, in the companys Git (GitHub, GitLab, or Bitbucket). This trend has been coined GitOps or Git Centric, as increasingly products are being codified and deployed within Git environments. In a somewhat unusual twist of events, Git has become the tool that software companies use to manage their entire technology stack. This means they are deploying their infrastructure, security, and the automation of their development pipeline all from within their Git. Technology blog Dzone put it nicely: Increasingly, companies are using Git as their single source of truth for their code, configurations and infrastructure. All their business logic lives in Git, and automated processes can turn their Git repositories into built and deployed software Weve entered the world of GitOps. A great example of a Git Centric tool is Terraform by Hashicorp. Terraform allows developers to define their infrastructure as code within their Git environment and to consistently and automatically spin up servers with a consistent set of configurations in a scalable manner. It also helps teams of developers understand the underlying server configurations by simply looking at the code rather than having to enter their cloud providers dashboard. The GitOps market is growing exceptionally fast, with companies announcing the codification of their products on a daily basis. At the same time, it is giving developers a perhaps unconsidered and threatening gateway into their production environments. So well also see tools likeDatree.iothat provide automatic policy compliance checks for every code commit. (Disclosure: Datree.io is one of my firms investments). Other tools are emerging to allow GitOps manage and automate more than application deployments. For example, Gitpitch enables teams to build, edit, change, and publish slide presentations. In other words, developers can build entire slide decks and presentations from within their Git provider. They can then manage changes to these presentations and collaborate around them just as they would over their application code base. And theres Waffle.io, a project management tool built within Git for engineering teams. By operating from within Git, Waffle can automatically determine what features and tasks developers have been completed and what is still in progress. It can then automatically communicate status updates to the rest of the team so that everyone is on the same page. I believe Git is likely to become the de-facto tool for automating many company operations. Obviously, the first use cases are focused on the deployment and configuration of applications. But it can also be used effectively for other business processes. The image at the top of this story shows the beginnings of a GitOps landscape. Since we are still in the early days of this market, I may have missed a number of relevant companies. If so, please reach out to me at brian@tlv.partners and let me know. Brian Sack is on the investment team at TLV Partners, an early stage VC based in Tel Aviv, Israel.VentureBeat VentureBeat's mission is to be a digital town square for technical decision-makers to gain knowledge about transformative technology and transact. Our site delivers essential information on data technologies and strategies to guide you as you lead your organizations. We invite you to become a member of our community, to access: up-to-date information on the subjects of interest to you our newsletters gated thought-leader content and discounted access to our prized events, such as Transform 2021: Learn More networking features, and more Become a member "
        ],
        "story_type": "Normal",
        "url_raw": "https://venturebeat.com/2019/02/02/what-is-gitops-and-why-you-should-know-about-it/",
        "comments.comment_id": [19087094, 19087577],
        "comments.comment_author": ["mameshini", "h668"],
        "comments.comment_descendants": [0, 0],
        "comments.comment_time": [
          "2019-02-05T16:56:14Z",
          "2019-02-05T17:47:34Z"
        ],
        "comments.comment_text": [
          "Great article, explains why Git can be used as the primary tool for interface between developers and infrastructure.",
          "Git is the bridge between development and production."
        ],
        "id": "17891c11-9899-4c05-b1f7-ee8b74a09dde",
        "url_text": "February 2, 2019 12:10 PM Developing technology is far more expansive than just writing code. Technology teams need to consider a number of different aspects of the companys technology stack, including its compute infrastructure, storage, development pipeline, security, and more. Companies often purchase various third-party products to complete their technology stack so they dont have to build it all on their own. Each of these tools comes with some form of management console or dashboard that enables companies to tailor that specific tool to the their own needs as well as integrate it within their product. The onboarding, configuration, and ongoing management will likely occur directly from within that console. In fact, managing these third-party products and dashboards actually becomes a significant portion of a technology teams workload and today often falls under the responsibility of the DevOps team. Above: Dashboard overdose: IT organisations are bombarded by dashboards across their entire tech stack To increase automation and efficiency, some companies now are bypassing dashboards and instead preferring to manage these products directly from within their code base. These products are then deployed and configured not as another management console, but rather by developers, as code, in the companys Git (GitHub, GitLab, or Bitbucket). This trend has been coined GitOps or Git Centric, as increasingly products are being codified and deployed within Git environments. In a somewhat unusual twist of events, Git has become the tool that software companies use to manage their entire technology stack. This means they are deploying their infrastructure, security, and the automation of their development pipeline all from within their Git. Technology blog Dzone put it nicely: Increasingly, companies are using Git as their single source of truth for their code, configurations and infrastructure. All their business logic lives in Git, and automated processes can turn their Git repositories into built and deployed software Weve entered the world of GitOps. A great example of a Git Centric tool is Terraform by Hashicorp. Terraform allows developers to define their infrastructure as code within their Git environment and to consistently and automatically spin up servers with a consistent set of configurations in a scalable manner. It also helps teams of developers understand the underlying server configurations by simply looking at the code rather than having to enter their cloud providers dashboard. The GitOps market is growing exceptionally fast, with companies announcing the codification of their products on a daily basis. At the same time, it is giving developers a perhaps unconsidered and threatening gateway into their production environments. So well also see tools likeDatree.iothat provide automatic policy compliance checks for every code commit. (Disclosure: Datree.io is one of my firms investments). Other tools are emerging to allow GitOps manage and automate more than application deployments. For example, Gitpitch enables teams to build, edit, change, and publish slide presentations. In other words, developers can build entire slide decks and presentations from within their Git provider. They can then manage changes to these presentations and collaborate around them just as they would over their application code base. And theres Waffle.io, a project management tool built within Git for engineering teams. By operating from within Git, Waffle can automatically determine what features and tasks developers have been completed and what is still in progress. It can then automatically communicate status updates to the rest of the team so that everyone is on the same page. I believe Git is likely to become the de-facto tool for automating many company operations. Obviously, the first use cases are focused on the deployment and configuration of applications. But it can also be used effectively for other business processes. The image at the top of this story shows the beginnings of a GitOps landscape. Since we are still in the early days of this market, I may have missed a number of relevant companies. If so, please reach out to me at brian@tlv.partners and let me know. Brian Sack is on the investment team at TLV Partners, an early stage VC based in Tel Aviv, Israel.VentureBeat VentureBeat's mission is to be a digital town square for technical decision-makers to gain knowledge about transformative technology and transact. Our site delivers essential information on data technologies and strategies to guide you as you lead your organizations. We invite you to become a member of our community, to access: up-to-date information on the subjects of interest to you our newsletters gated thought-leader content and discounted access to our prized events, such as Transform 2021: Learn More networking features, and more Become a member ",
        "_version_": 1718536443855372290
      },
      {
        "story_id": 19100986,
        "story_author": "Boulth",
        "story_descendants": 79,
        "story_score": 289,
        "story_time": "2019-02-06T22:55:16Z",
        "story_title": "Sr.ht becomes Sourcehut",
        "search": [
          "Sr.ht becomes Sourcehut",
          "https://sourcehut.org/",
          "Welcome to sourcehut! This suite of open source tools is the software development platform you've been waiting for. We've taken the wisdom of the most successful open-source communities and turned it into a platform of efficient engineering tools. Absolutely no tracking or advertising All features work without JavaScript Many features work without an account The fastest & lightest software forge 100% free and open source software Sourcehut is currently available as a public alpha. What should I expect? \"Small internet\" protocols? The Plan 9 renaissance? Esoteric programming languages for music creation, and novel smartphone operating systems? These projects and more are waiting to be found on the sourcehut project index. Browse projects Hosted git repositories Public, private, and \"unlisted\" repositories Fine grained access control, including access for users without accounts First-class Mercurial support also available We've completely migrated our repo hosting, both git and Mercurial, to SourceHut. The speed, functionality, integrations, and minimal-yet-friendly UI makes it easy to use and work with. Peter Sanchez, Netlandish Inc. Powerful continuous integration Runs fully virtualised builds on various Linux distros and BSDs Submit ad-hoc jobs without pushing to your repository Post-build triggers for email, webhooks, etc Log in with SSH after build failures to investigate further This CI experience is leagues ahead of all others. Resubmitting builds and SSH'ing in is saving me multiple hours. Andrew Kelley, author of the Zig programming language Mailing lists & code review tools Patch review tools on the web Threaded, searchable mail archives Tools for working with third party mailing lists Powered by git send-email SourceHut mailing lists are the best thing since the invention of reviewing patches. Martijn Braam, postmarketOS developer Focused ticket tracking Actionable tasks only no discussions, questions, or duplicates Private bug reports and bug trackers for security issues Participation via email, with or without an account I think it is really convenient that you can send a plaintext email with your bug report, whether or not you have an account. Cadence Ember, author of Bibliogram Sophisticated account management & security PGP encrypted and signed emails from each service Two-factor authentication with TOTP Detailed audit logs of account activity Fine-grained third-party OAuth access controls I really appreciate the option to get encrypted mail with a PGP key that I provide why don't more companies have this?! Cadence Ember Markdown- and git-driven wikis Use git to version control and manage your wiki Use any organizational hierarchy you like, a flat wiki is not imposed Hosts the detailed sourcehut manual And more! Integrations with third-party services via dispatch.sr.ht Ad-hoc source code hosting via paste.sr.ht Static web hosting via srht.site "
        ],
        "story_type": "Normal",
        "url_raw": "https://sourcehut.org/",
        "url_text": "Welcome to sourcehut! This suite of open source tools is the software development platform you've been waiting for. We've taken the wisdom of the most successful open-source communities and turned it into a platform of efficient engineering tools. Absolutely no tracking or advertising All features work without JavaScript Many features work without an account The fastest & lightest software forge 100% free and open source software Sourcehut is currently available as a public alpha. What should I expect? \"Small internet\" protocols? The Plan 9 renaissance? Esoteric programming languages for music creation, and novel smartphone operating systems? These projects and more are waiting to be found on the sourcehut project index. Browse projects Hosted git repositories Public, private, and \"unlisted\" repositories Fine grained access control, including access for users without accounts First-class Mercurial support also available We've completely migrated our repo hosting, both git and Mercurial, to SourceHut. The speed, functionality, integrations, and minimal-yet-friendly UI makes it easy to use and work with. Peter Sanchez, Netlandish Inc. Powerful continuous integration Runs fully virtualised builds on various Linux distros and BSDs Submit ad-hoc jobs without pushing to your repository Post-build triggers for email, webhooks, etc Log in with SSH after build failures to investigate further This CI experience is leagues ahead of all others. Resubmitting builds and SSH'ing in is saving me multiple hours. Andrew Kelley, author of the Zig programming language Mailing lists & code review tools Patch review tools on the web Threaded, searchable mail archives Tools for working with third party mailing lists Powered by git send-email SourceHut mailing lists are the best thing since the invention of reviewing patches. Martijn Braam, postmarketOS developer Focused ticket tracking Actionable tasks only no discussions, questions, or duplicates Private bug reports and bug trackers for security issues Participation via email, with or without an account I think it is really convenient that you can send a plaintext email with your bug report, whether or not you have an account. Cadence Ember, author of Bibliogram Sophisticated account management & security PGP encrypted and signed emails from each service Two-factor authentication with TOTP Detailed audit logs of account activity Fine-grained third-party OAuth access controls I really appreciate the option to get encrypted mail with a PGP key that I provide why don't more companies have this?! Cadence Ember Markdown- and git-driven wikis Use git to version control and manage your wiki Use any organizational hierarchy you like, a flat wiki is not imposed Hosts the detailed sourcehut manual And more! Integrations with third-party services via dispatch.sr.ht Ad-hoc source code hosting via paste.sr.ht Static web hosting via srht.site ",
        "comments.comment_id": [19101220, 19101723],
        "comments.comment_author": ["niftich", "jordigh"],
        "comments.comment_descendants": [3, 6],
        "comments.comment_time": [
          "2019-02-06T23:23:36Z",
          "2019-02-07T00:23:06Z"
        ],
        "comments.comment_text": [
          "As of posting, the info on this site is very lean, but going forward sourcehut seems to be the name for the software suite of the service 'sr.ht'. The linkage is implied by the quote on the site that \"<i>sr.ht is a hosted instance of sourcehut provided for your convenience</i>\".<p>The impetus behind the branding clarification seems to be this HN thread [1]. For more history, see the the debut announcement [2] and its corresponding HN thread [3].<p>[1] <a href=\"https://news.ycombinator.com/item?id=18929709#18930413\" rel=\"nofollow\">https://news.ycombinator.com/item?id=18929709#18930413</a> [2] <a href=\"https://drewdevault.com/2018/11/15/sr.ht-general-availability.html\" rel=\"nofollow\">https://drewdevault.com/2018/11/15/sr.ht-general-availabilit...</a> [3] <a href=\"https://news.ycombinator.com/item?id=18458908\" rel=\"nofollow\">https://news.ycombinator.com/item?id=18458908</a>",
          "Mercurial support, fuck yeah:<p><a href=\"https://hg.sr.ht/\" rel=\"nofollow\">https://hg.sr.ht/</a><p>This is the killer feature for me.<p>Why Mercurial?<p>Here’s a list of Mercurial features that I think are really cool:<p>Revsets – a domain-specific language for querying your commits<p>Templates – a domain-specific language for altering the output of almost every command. Putting together these two you can do things like this: <a href=\"http://jordi.inversethought.com/blog/customising-mercurial-like-a-pro/\" rel=\"nofollow\">http://jordi.inversethought.com/blog/customising-mercurial-l...</a><p>Evolution – a distributed and safe way to share rewrites (think automatically recovering from upstream rebase without any git reset --hard and no git push --force).<p>Absorb – automatically amends an entire stack of WIP commits at once by picking the right diffs from your working directory based on which commits’ contexts they fit best.<p>Curses interface for hunk-picking – a unified interface for splitting diffs for any purpose: whether to revert working-directory changes, write a new commit, uncommit parts of a commit, or amend a commit with more diffs. Just add --interactive to any of those commands and start picking hunks!<p>A fairly rich built-in web interface – hg serve and point your browser to <a href=\"http://localhost:8000\" rel=\"nofollow\">http://localhost:8000</a> and you’re good to go.<p>Lots of support for monorepos – indeed, this is the main reason that Google, Facebook, and Mozilla are all pouring work into hg and are using it.<p>A consistent UI – this one is more subjective but often-touted feature of Mercurial. If a command accepts a revision/hash/tag/bookmark; it always uses the -r/--rev flag for it (and you can also always use a revset for any command that accepts a revision). If a command allows hunk selection, it always uses the -i/--interactive flag for it. The help for every command fits in about a screenful.<p>Give it a try! Mercurial is neat!"
        ],
        "id": "7d3b9c2a-01b2-41cc-8b4f-126d54a2479b",
        "_version_": 1718536444446769152
      },
      {
        "story_id": 20936679,
        "story_author": "marlynm",
        "story_descendants": 1,
        "story_score": 11,
        "story_time": "2019-09-11T04:57:48Z",
        "story_title": "Show HN: GitHub action to setup PHP with required extensions and Composer",
        "search": [
          "Show HN: GitHub action to setup PHP with required extensions and Composer",
          "https://github.com/shivammathur/setup-php",
          "Setup PHP in GitHub Actions Setup PHP with required extensions, php.ini configuration, code-coverage support and various tools like composer in GitHub Actions. This action gives you a cross platform interface to set up the PHP environment you need to test your application. Refer to Usage section and examples to see how to use this. Contents OS/Platform Support GitHub-Hosted Runners Self-Hosted Runners PHP Support PHP Extension Support Tools Support Coverage Support Xdebug PCOV Disable Coverage Usage Inputs Outputs Flags Basic Setup Matrix Setup Nightly Build Setup Thread Safe Setup Force Update Setup Verbose Setup Multi-Arch Setup Self Hosted Setup Local Testing Setup JIT Configuration Cache Extensions Cache Composer Dependencies Composer GitHub OAuth Inline PHP Scripts Problem Matchers Examples Versioning License Contributions Support This Project Dependencies Further Reading OS/Platform Support Both GitHub-hosted and self-hosted runners are suppported by setup-php on the following OS/Platforms. GitHub-Hosted Runners Virtual environment YAML workflow label Pre-installed PHP Ubuntu 18.04 ubuntu-18.04 PHP 7.1 to PHP 8.0 Ubuntu 20.04 ubuntu-latest or ubuntu-20.04 PHP 7.4 to PHP 8.0 Windows Server 2019 windows-latest or windows-2019 PHP 8.0 Windows Server 2022 windows-2022 PHP 8.0 macOS Catalina 10.15 macos-latest or macos-10.15 PHP 8.0 macOS Big Sur 11.x macos-11 PHP 8.0 Self-Hosted Runners Host OS/Virtual environment YAML workflow label Ubuntu 18.04 self-hosted or Linux Ubuntu 20.04 self-hosted or Linux Ubuntu 21.04 self-hosted or Linux Debian 9 self-hosted or Linux Debian 10 self-hosted or Linux Debian 11 self-hosted or Linux Windows 7 and newer self-hosted or Windows Windows Server 2012 R2 and newer self-hosted or Windows macOS Catalina 10.15 self-hosted or macOS macOS Big Sur 11.x x86_64/arm64 self-hosted or macOS Refer to the self-hosted setup to use the action on self-hosted runners. Operating systems based on the above Ubuntu and Debian versions are also supported on a best effort basis. If the requested PHP version is pre-installed, setup-php switches to it, otherwise it installs the PHP version. PHP Support On all supported OS/Platforms the following PHP versions are supported as per the runner. PHP 5.3 to PHP 8.2 on GitHub-hosted runners. PHP 5.6 to PHP 8.2 on self-hosted runners. PHP Version Stability Release Support Runner Support 5.3 Stable End of life GitHub-hosted 5.4 Stable End of life GitHub-hosted 5.5 Stable End of life GitHub-hosted 5.6 Stable End of life GitHub-hosted, self-hosted 7.0 Stable End of life GitHub-hosted, self-hosted 7.1 Stable End of life GitHub-hosted, self-hosted 7.2 Stable End of life GitHub-hosted, self-hosted 7.3 Stable Security fixes only GitHub-hosted, self-hosted 7.4 Stable Active GitHub-hosted, self-hosted 8.0 Stable Active GitHub-hosted, self-hosted 8.1 Nightly In development GitHub-hosted, self-hosted 8.2 Nightly In development GitHub-hosted, self-hosted Notes: Specifying 8.1 and 8.2 in php-version input installs a nightly build of PHP 8.1.0-dev and PHP 8.2.0-dev respectively. See nightly build setup for more information. To use JIT on PHP 8.0 and above, refer to the JIT configuration section. PHP Extension Support PHP extensions can be set up using the extensions input. It accepts a string in csv-format. On Ubuntu, extensions which are available as a package, available on PECL or a git repository can be set up. - name: Setup PHP with PECL extension uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: imagick, swoole On Windows, extensions available on PECL which have the DLL binary can be set up. On macOS, extensions available on PECL or a git repository can be set up. On Ubuntu and macOS to compile and install an extension from a git repository follow this guide. Extensions installed along with PHP if specified are enabled. Specific versions of extensions available on PECL can be set up by suffixing the extension's name with the version. This is useful for installing old versions of extensions which support end of life PHP versions. - name: Setup PHP with specific version of PECL extension uses: shivammathur/setup-php@v2 with: php-version: '5.4' extensions: swoole-1.9.3 Pre-release versions extensions available on PECL can be set up by suffixing the extension's name with its state i.e alpha, beta, devel or snapshot. - name: Setup PHP with pre-release PECL extension uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: xdebug-beta Shared extensions can be disabled by prefixing them with a :. All extensions depending on the specified extension will also be disabled. - name: Setup PHP and disable opcache uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: :opcache All shared extensions can be disabled by specifying none. When none is specified along with other extensions, it is hoisted to the start of the input. So, all the shared extensions will be disabled first, then rest of the extensions in the input will be processed. Note: This disables all core and third-party shared extensions and thus, can break some tools which need them. So, make sure you add the required extensions after none in the extensions input. - name: Setup PHP without any shared extensions except mbstring uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: none, mbstring Extension intl can be set up with specific ICU version for PHP 5.6 and above in Ubuntu workflows by suffixing intl with the ICU version. ICU 50.2 and newer versions are supported. Refer to ICU builds for the specific versions supported. - name: Setup PHP with intl uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: intl-69.1 Extensions loaded by default after setup-php runs can be found on the wiki. These extensions have custom support: cubrid, pdo_cubrid and gearman on Ubuntu. geos on Ubuntu and macOS. blackfire, couchbase, ioncube, oci8, pdo_firebird, pdo_oci, pecl_http, phalcon3 and phalcon4 on all supported OS. By default, extensions which cannot be added or disabled gracefully leave an error message in the logs, the action is not interrupted. To change this behaviour you can set fail-fast flag to true. - name: Setup PHP with fail-fast uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: oci8 env: fail-fast: true Tools Support These tools can be set up globally using the tools input. It accepts a string in csv-format. behat, blackfire, blackfire-player, codeception, composer, composer-normalize, composer-prefetcher, composer-require-checker, composer-unused, cs2pr, deployer, flex, grpc_php_plugin, infection, parallel-lint, pecl, phan, phing, phinx, phive, php-config, php-cs-fixer, phpcbf, phpcpd, phpcs, phpdoc or phpDocumentor, phpize, phplint, phpmd, phpspec, phpstan, phpunit, phpunit-bridge, phpunit-polyfills, prestissimo, protoc, psalm, symfony or symfony-cli, vapor or vapor-cli, wp or wp-cli - name: Setup PHP with tools uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: php-cs-fixer, phpunit In addition to above tools any composer tool or package can also be set up globally by specifying it as vendor/package matching the listing on Packagist. This format accepts the same version constraints as composer. - name: Setup PHP with tools uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: vimeo/psalm To set up a particular version of a tool, specify it in the form tool:version. Version can be in the following format: Semver. For example tool:1.2.3 or tool:1.2.3-beta1. Major version. For example tool:1 or tool:1.x. Major and minor version. For example tool:1.2 or tool:1.2.x. When you specify just the major version or the version in major.minor format, the latest patch version matching the input will be setup. Except for major versions of composer, For other tools when you specify only the major version or the version in major.minor format for any tool you can get rate limited by GitHub's API. To avoid this, it is recommended to provide a GitHub OAuth token. You can do that by setting COMPOSER_TOKEN environment variable. - name: Setup PHP with tools uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: php-cs-fixer:3, phpunit:8.5 env: COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }} The latest stable version of composer is set up by default. You can set up the required composer version by specifying the major version v1 or v2, or the version in major.minor or semver format, Additionally for composer snapshot and preview can also be specified to set up the respective releases. - name: Setup PHP with composer v2 uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: composer:v2 If you do not use composer in your workflow, you can specify tools: none to skip it. - name: Setup PHP without composer uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: none Scripts phpize and php-config are set up with the same version as of the input PHP version. The latest version of blackfire cli is set up when blackfire is specified in tools input. Please refer to the official documentation for using blackfire with GitHub Actions. Tools prestissimo and composer-prefetcher will be skipped unless composer:v1 is also specified in tools input. It is recommended to drop prestissimo and use composer v2. By default, tools which cannot be set up gracefully leave an error message in the logs, the action is not interrupted. To change this behaviour you can set fail-fast flag to true. - name: Setup PHP with fail-fast uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: deployer env: fail-fast: true Notes Input tools is useful to set up tools which you only use in GitHub Actions, thus keeping your composer.json tidy. If you do not want to use all your dev-dependencies in GitHub Actions workflow, you can run composer with --no-dev and install required tools using tools input to speed up your workflow. If you have a tool in your composer.json, do not set up it with tools input as the two instances of the tool might conflict. Coverage Support Xdebug Specify coverage: xdebug to use Xdebug and disable PCOV. Runs on all PHP versions supported. - name: Setup PHP with Xdebug uses: shivammathur/setup-php@v2 with: php-version: '8.0' coverage: xdebug The latest version of Xdebug compatible with the PHP version is set up by default. If you need Xdebug 2.x on PHP 7.2, 7.3 or 7.4, you can specify coverage: xdebug2. - name: Setup PHP with Xdebug 2.x uses: shivammathur/setup-php@v2 with: php-version: '7.4' coverage: xdebug2 PCOV Specify coverage: pcov to use PCOV and disable Xdebug. Runs on PHP 7.1 and newer PHP versions. If your source code directory is other than src, lib or, app, specify pcov.directory using the ini-values input. - name: Setup PHP with PCOV uses: shivammathur/setup-php@v2 with: php-version: '8.0' ini-values: pcov.directory=api #optional, see above for usage. coverage: pcov PHPUnit 8.x and above supports PCOV out of the box. If you are using PHPUnit 5.x, 6.x or 7.x, you need to set up pcov/clobber before executing your tests. - name: Setup PCOV run: | composer require pcov/clobber vendor/bin/pcov clobber Disable Coverage Specify coverage: none to disable both Xdebug and PCOV. Disable coverage for these reasons: You are not generating coverage reports while testing. It will disable Xdebug, which will have a positive impact on PHP performance. You are using phpdbg for running your tests. You are profiling your code using blackfire. You are using PHP in JIT mode. Please refer to JIT configuration section for more details. - name: Setup PHP with no coverage driver uses: shivammathur/setup-php@v2 with: php-version: '8.0' coverage: none Usage Inputs Specify using with keyword php-version (required) Specify the PHP version you want to set up. Accepts a string. For example '8.0'. Accepts latest to set up the latest stable PHP version. Accepts nightly to set up a nightly build from the master branch of PHP. Accepts the format d.x, where d is the major version. For example 5.x, 7.x and 8.x. See PHP support for supported PHP versions. extensions (optional) Specify the extensions you want to add or disable. Accepts a string in csv-format. For example mbstring, :opcache. Accepts none to disable all shared extensions. Shared extensions prefixed with : are disabled. See PHP extension support for more info. ini-values (optional) Specify the values you want to add to php.ini. Accepts a string in csv-format. For example post_max_size=256M, max_execution_time=180. Accepts ini values with commas if wrapped in quotes. For example xdebug.mode=\"develop,coverage\". coverage (optional) Specify the code-coverage driver you want to set up. Accepts xdebug, pcov or none. See coverage support for more info. tools (optional) Specify the tools you want to set up. Accepts a string in csv-format. For example: phpunit, phpcs See tools Support for tools supported. Outputs php-version To use outputs, give the setup-php step an id, you can use the same to get the outputs in a later step. Provides the PHP version in semver format. - name: Setup PHP id: setup-php uses: shivammathur/setup-php@v2 with: php-version: '8.0' - name: Print PHP version run: echo ${{ steps.setup-php.outputs.php-version }} Flags Specify using env keyword fail-fast (optional) Specify to mark the workflow as failed if an extension or tool fails to set up. This changes the default mode from graceful warnings to fail-fast. By default, it is set to false. Accepts true and false. phpts (optional) Specify to set up thread-safe version of PHP on Windows. Accepts ts and nts. By default, it is set to nts. See thread safe setup for more info. update (optional) Specify to update PHP on the runner to the latest patch version. Accepts true and false. By default, it is set to false. See force update setup for more info. See below for more info. Basic Setup Setup a particular PHP version. steps: - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: mbstring, intl ini-values: post_max_size=256M, max_execution_time=180 coverage: xdebug tools: php-cs-fixer, phpunit Matrix Setup Setup multiple PHP versions on multiple operating systems. jobs: run: runs-on: ${{ matrix.operating-system }} strategy: matrix: operating-system: ['ubuntu-latest', 'windows-latest', 'macos-latest'] php-versions: ['7.3', '7.4', '8.0'] phpunit-versions: ['latest'] include: - operating-system: 'ubuntu-latest' php-versions: '7.2' phpunit-versions: '8.5.21' steps: - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: ${{ matrix.php-versions }} extensions: mbstring, intl ini-values: post_max_size=256M, max_execution_time=180 coverage: xdebug tools: php-cs-fixer, phpunit:${{ matrix.phpunit-versions }} Nightly Build Setup Setup a nightly build of PHP 8.1 or PHP 8.2. This version is currently in development. Some user space extensions might not support this version currently. steps: - name: Setup nightly PHP uses: shivammathur/setup-php@v2 with: php-version: '8.1' extensions: mbstring ini-values: post_max_size=256M, max_execution_time=180 coverage: xdebug tools: php-cs-fixer, phpunit Thread Safe Setup Setup TS or NTS PHP on Windows. NTS versions are set up by default. On Ubuntu and macOS only NTS versions are supported. On Windows both TS and NTS versions are supported. jobs: run: runs-on: windows-latest name: Setup PHP TS on Windows steps: - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' env: phpts: ts # specify ts or nts Force Update Setup Update to the latest patch of PHP versions. Pre-installed PHP versions on the GitHub Actions images are not updated to their latest patch release by default. You can specify the update environment variable to true for updating to the latest release. - name: Setup PHP with latest versions uses: shivammathur/setup-php@v2 with: php-version: '8.0' env: update: true # specify true or false Verbose Setup Debug your workflow To debug any issues, you can use the verbose tag instead of v2. - name: Setup PHP with logs uses: shivammathur/setup-php@verbose with: php-version: '8.0' Multi-Arch Setup Setup PHP on multiple architecture on Ubuntu GitHub Runners. PHP 5.6 to PHP 8.0 are supported by setup-php on multiple architecture on Ubuntu. For this, you can use shivammathur/node images as containers. These have compatible Nodejs installed for JavaScript based GitHub Actions. Currently, for ARM based setup, you will need self-hosted runners. jobs: run: runs-on: ubuntu-latest container: shivammathur/node:latest-${{ matrix.arch }} strategy: matrix: arch: [\"amd64\", \"i386\"] steps: - name: Install PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' Self Hosted Setup Setup PHP on a self-hosted runner. To set up a containerised self-hosted runner, refer to the following guides as per your base operating system. Linux Windows To set up the runner directly on the host OS or in a virtual machine, follow this requirements guide before setting up the self-hosted runner. If your workflow uses service containers, then set up the runner on a Linux host or in a Linux virtual machine. GitHub Actions does not support nested virtualization on Linux, so services will not work in a dockerized container. Specify the environment variable runner with the value self-hosted. Without this your workflow will fail. jobs: run: runs-on: self-hosted strategy: matrix: php-versions: ['5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0'] name: PHP ${{ matrix.php-versions }} steps: - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: ${{ matrix.php-versions }} env: runner: self-hosted # Specify the runner. Notes Do not set up multiple self-hosted runners on a single server instance as parallel workflow will conflict with each other. Do not set up self-hosted runners on the side on your development environment or your production server. Avoid using the same labels for your self-hosted runners which are used by GitHub-hosted runners. Local Testing Setup Test your Ubuntu workflow locally using nektos/act. jobs: run: runs-on: ubuntu-latest steps: - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' Run the workflow locally with act using shivammathur/node docker images. Choose the image tag which matches the runs-on property in your workflow. For example, if you are using ubuntu-20.04 in your workflow, run act -P ubuntu-20.04=shivammathur/node:20.04. # For runs-on: ubuntu-latest act -P ubuntu-latest=shivammathur/node:latest # For runs-on: ubuntu-20.04 act -P ubuntu-20.04=shivammathur/node:2004 # For runs-on: ubuntu-18.04 act -P ubuntu-18.04=shivammathur/node:1804 JIT Configuration Enable Just-in-time(JIT) on PHP 8.0 and above. To enable JIT, enable opcache in cli mode by setting opcache.enable_cli=1. JIT conflicts with Xdebug, PCOV, and other extensions which override zend_execute_ex function, so set coverage: none and disable any such extension if added. By default, opcache.jit=1235 and opcache.jit_buffer_size=256M are set which can be changed using ini-values input. For detailed information about JIT related directives refer to the official PHP documentation. For example to enable JIT in tracing mode with buffer size of 64 MB. - name: Setup PHP with JIT in tracing mode uses: shivammathur/setup-php@v2 with: php-version: '8.0' coverage: none ini-values: opcache.enable_cli=1, opcache.jit=tracing, opcache.jit_buffer_size=64M Cache Extensions You can cache PHP extensions using shivammathur/cache-extensions and action/cache GitHub Actions. Extensions which take very long to set up when cached are available in the next workflow run and are enabled directly. This reduces the workflow execution time. Refer to shivammathur/cache-extensions for details. Cache Composer Dependencies If your project uses composer, you can persist the composer's internal cache directory. Dependencies cached are loaded directly instead of downloading them while installation. The files cached are available across check-runs and will reduce the workflow execution time. - name: Get composer cache directory id: composer-cache run: echo \"::set-output name=dir::$(composer config cache-files-dir)\" - name: Cache dependencies uses: actions/cache@v2 with: path: ${{ steps.composer-cache.outputs.dir }} key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }} restore-keys: ${{ runner.os }}-composer- - name: Install dependencies run: composer install --prefer-dist Notes Please do not cache vendor directory using action/cache as that will have side effects. If you do not commit composer.lock, you can use the hash of composer.json as the key for your cache. key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }} If you support a range of composer dependencies and use prefer-lowest and prefer-stable options, you can store them in your matrix and add them to the keys. key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}-${{ matrix.prefer }}- restore-keys: ${{ runner.os }}-composer-${{ matrix.prefer }}- Composer GitHub OAuth If you have a number of workflows which set up multiple tools or have many composer dependencies, you might hit the GitHub's rate limit for composer. Also, if you specify only the major version or the version in major.minor format, you can hit the rate limit. To avoid this you can specify an OAuth token by setting COMPOSER_TOKEN environment variable. You can use GITHUB_TOKEN secret for this purpose. - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' env: COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }} Inline PHP Scripts If you have to run multiple lines of PHP code in your workflow, you can do that easily without saving it to a file. Put the code in the run property of a step and specify the shell as php {0}. - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' - name: Run PHP code shell: php {0} run: | <?php $welcome = \"Hello, world\"; echo $welcome; Problem Matchers Problem matchers are json configurations which identify errors and warnings in your logs and surface them prominently in the GitHub Actions UI by highlighting them and creating code annotations. PHP Setup problem matchers for your PHP output by adding this step after the setup-php step. - name: Setup problem matchers for PHP run: echo \"::add-matcher::${{ runner.tool_cache }}/php.json\" PHPUnit Setup problem matchers for your PHPUnit output by adding this step after the setup-php step. - name: Setup problem matchers for PHPUnit run: echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\" PHPStan PHPStan supports error reporting in GitHub Actions, so it does not require problem matchers. - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: phpstan - name: Run PHPStan run: phpstan analyse src Psalm Psalm supports error reporting in GitHub Actions with an output format github. - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: psalm - name: Run Psalm run: psalm --output-format=github Tools with checkstyle support For tools that support checkstyle reporting like phpstan, psalm, php-cs-fixer and phpcs you can use cs2pr to annotate your code. For examples refer to cs2pr documentation. Here is an example with phpcs. - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: cs2pr, phpcs - name: Run phpcs run: phpcs -q --report=checkstyle src | cs2pr Examples Examples of using setup-php with various PHP Frameworks and Packages. Framework/Package Runs on Workflow Blackfire macOS, ubuntu and windows blackfire.yml Blackfire Player macOS, ubuntu and windows blackfire-player.yml CakePHP with MySQL and Redis ubuntu cakephp-mysql.yml CakePHP with PostgreSQL and Redis ubuntu cakephp-postgres.yml CakePHP without services macOS, ubuntu and windows cakephp.yml CodeIgniter macOS, ubuntu and windows codeigniter.yml Laravel with MySQL and Redis ubuntu laravel-mysql.yml Laravel with PostgreSQL and Redis ubuntu laravel-postgres.yml Laravel without services macOS, ubuntu and windows laravel.yml Lumen with MySQL and Redis ubuntu lumen-mysql.yml Lumen with PostgreSQL and Redis ubuntu lumen-postgres.yml Lumen without services macOS, ubuntu and windows lumen.yml Phalcon with MySQL ubuntu phalcon-mysql.yml Phalcon with PostgreSQL ubuntu phalcon-postgres.yml Roots/bedrock ubuntu bedrock.yml Roots/sage ubuntu sage.yml Slim Framework macOS, ubuntu and windows slim-framework.yml Symfony with MySQL ubuntu symfony-mysql.yml Symfony with PostgreSQL ubuntu symfony-postgres.yml Symfony without services macOS, ubuntu and windows symfony.yml Yii2 Starter Kit with MySQL ubuntu yii2-mysql.yml Yii2 Starter Kit with PostgreSQL ubuntu yii2-postgres.yml Zend Framework macOS, ubuntu and windows zend-framework.yml Versioning Use the v2 tag as setup-php version. It is a rolling tag and is synced with the latest minor and patch releases. With v2 you automatically get the bug fixes, security patches, new features and support for latest PHP releases. For debugging any issues verbose tag can be used temporarily. It outputs all the logs and is also synced with the latest releases. Semantic release versions can also be used. It is recommended to use dependabot with semantic versioning to keep the actions in your workflows up to date. Commit SHA can also be used, but are not recommended. They have to be updated with every release manually, without which you will not get any bug fixes, security patches or new features. It is highly discouraged to use the master branch as version, it might break your workflow after major releases as they have breaking changes. If you are using the v1 tag or a 1.x.y version, you should switch to v2 as v1 only gets critical bug fixes. Maintenance support for v1 will be dropped with the last PHP 8.0 release. License The scripts and documentation in this project are under the MIT License. This project has multiple dependencies. Their licenses can be found in their respective repositories. The logo for setup-php is a derivative work of php.net logo and is licensed under the CC BY-SA 4.0 License. Contributions Contributions are welcome! See Contributor's Guide before you start. If you face any issues or want to suggest a feature/improvement, start a discussion here. Contributors of setup-php and other related projects Support This Project Please star the project and share it. If you blog, please share your experience of using this action. Please sponsor setup-php using GitHub sponsors. Please reach out if you have any questions about sponsoring setup-php. Corporate Sponsors Individual Sponsors Dependencies Node.js dependencies aaronparker/VcRedist mlocati/powershell-phpmanager ppa:ondrej/php shivammathur/cache-extensions shivammathur/composer-cache shivammathur/homebrew-extensions shivammathur/homebrew-php shivammathur/icu-intl shivammathur/php-builder shivammathur/php-builder-windows shivammathur/php-ubuntu shivammathur/php5-darwin shivammathur/php5-ubuntu Further Reading About GitHub Actions GitHub Actions Syntax Other Awesome Actions "
        ],
        "story_type": "ShowHN",
        "url_raw": "https://github.com/shivammathur/setup-php",
        "id": "c5c60444-6119-44f7-85e9-6d0d4a913675",
        "url_text": "Setup PHP in GitHub Actions Setup PHP with required extensions, php.ini configuration, code-coverage support and various tools like composer in GitHub Actions. This action gives you a cross platform interface to set up the PHP environment you need to test your application. Refer to Usage section and examples to see how to use this. Contents OS/Platform Support GitHub-Hosted Runners Self-Hosted Runners PHP Support PHP Extension Support Tools Support Coverage Support Xdebug PCOV Disable Coverage Usage Inputs Outputs Flags Basic Setup Matrix Setup Nightly Build Setup Thread Safe Setup Force Update Setup Verbose Setup Multi-Arch Setup Self Hosted Setup Local Testing Setup JIT Configuration Cache Extensions Cache Composer Dependencies Composer GitHub OAuth Inline PHP Scripts Problem Matchers Examples Versioning License Contributions Support This Project Dependencies Further Reading OS/Platform Support Both GitHub-hosted and self-hosted runners are suppported by setup-php on the following OS/Platforms. GitHub-Hosted Runners Virtual environment YAML workflow label Pre-installed PHP Ubuntu 18.04 ubuntu-18.04 PHP 7.1 to PHP 8.0 Ubuntu 20.04 ubuntu-latest or ubuntu-20.04 PHP 7.4 to PHP 8.0 Windows Server 2019 windows-latest or windows-2019 PHP 8.0 Windows Server 2022 windows-2022 PHP 8.0 macOS Catalina 10.15 macos-latest or macos-10.15 PHP 8.0 macOS Big Sur 11.x macos-11 PHP 8.0 Self-Hosted Runners Host OS/Virtual environment YAML workflow label Ubuntu 18.04 self-hosted or Linux Ubuntu 20.04 self-hosted or Linux Ubuntu 21.04 self-hosted or Linux Debian 9 self-hosted or Linux Debian 10 self-hosted or Linux Debian 11 self-hosted or Linux Windows 7 and newer self-hosted or Windows Windows Server 2012 R2 and newer self-hosted or Windows macOS Catalina 10.15 self-hosted or macOS macOS Big Sur 11.x x86_64/arm64 self-hosted or macOS Refer to the self-hosted setup to use the action on self-hosted runners. Operating systems based on the above Ubuntu and Debian versions are also supported on a best effort basis. If the requested PHP version is pre-installed, setup-php switches to it, otherwise it installs the PHP version. PHP Support On all supported OS/Platforms the following PHP versions are supported as per the runner. PHP 5.3 to PHP 8.2 on GitHub-hosted runners. PHP 5.6 to PHP 8.2 on self-hosted runners. PHP Version Stability Release Support Runner Support 5.3 Stable End of life GitHub-hosted 5.4 Stable End of life GitHub-hosted 5.5 Stable End of life GitHub-hosted 5.6 Stable End of life GitHub-hosted, self-hosted 7.0 Stable End of life GitHub-hosted, self-hosted 7.1 Stable End of life GitHub-hosted, self-hosted 7.2 Stable End of life GitHub-hosted, self-hosted 7.3 Stable Security fixes only GitHub-hosted, self-hosted 7.4 Stable Active GitHub-hosted, self-hosted 8.0 Stable Active GitHub-hosted, self-hosted 8.1 Nightly In development GitHub-hosted, self-hosted 8.2 Nightly In development GitHub-hosted, self-hosted Notes: Specifying 8.1 and 8.2 in php-version input installs a nightly build of PHP 8.1.0-dev and PHP 8.2.0-dev respectively. See nightly build setup for more information. To use JIT on PHP 8.0 and above, refer to the JIT configuration section. PHP Extension Support PHP extensions can be set up using the extensions input. It accepts a string in csv-format. On Ubuntu, extensions which are available as a package, available on PECL or a git repository can be set up. - name: Setup PHP with PECL extension uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: imagick, swoole On Windows, extensions available on PECL which have the DLL binary can be set up. On macOS, extensions available on PECL or a git repository can be set up. On Ubuntu and macOS to compile and install an extension from a git repository follow this guide. Extensions installed along with PHP if specified are enabled. Specific versions of extensions available on PECL can be set up by suffixing the extension's name with the version. This is useful for installing old versions of extensions which support end of life PHP versions. - name: Setup PHP with specific version of PECL extension uses: shivammathur/setup-php@v2 with: php-version: '5.4' extensions: swoole-1.9.3 Pre-release versions extensions available on PECL can be set up by suffixing the extension's name with its state i.e alpha, beta, devel or snapshot. - name: Setup PHP with pre-release PECL extension uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: xdebug-beta Shared extensions can be disabled by prefixing them with a :. All extensions depending on the specified extension will also be disabled. - name: Setup PHP and disable opcache uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: :opcache All shared extensions can be disabled by specifying none. When none is specified along with other extensions, it is hoisted to the start of the input. So, all the shared extensions will be disabled first, then rest of the extensions in the input will be processed. Note: This disables all core and third-party shared extensions and thus, can break some tools which need them. So, make sure you add the required extensions after none in the extensions input. - name: Setup PHP without any shared extensions except mbstring uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: none, mbstring Extension intl can be set up with specific ICU version for PHP 5.6 and above in Ubuntu workflows by suffixing intl with the ICU version. ICU 50.2 and newer versions are supported. Refer to ICU builds for the specific versions supported. - name: Setup PHP with intl uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: intl-69.1 Extensions loaded by default after setup-php runs can be found on the wiki. These extensions have custom support: cubrid, pdo_cubrid and gearman on Ubuntu. geos on Ubuntu and macOS. blackfire, couchbase, ioncube, oci8, pdo_firebird, pdo_oci, pecl_http, phalcon3 and phalcon4 on all supported OS. By default, extensions which cannot be added or disabled gracefully leave an error message in the logs, the action is not interrupted. To change this behaviour you can set fail-fast flag to true. - name: Setup PHP with fail-fast uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: oci8 env: fail-fast: true Tools Support These tools can be set up globally using the tools input. It accepts a string in csv-format. behat, blackfire, blackfire-player, codeception, composer, composer-normalize, composer-prefetcher, composer-require-checker, composer-unused, cs2pr, deployer, flex, grpc_php_plugin, infection, parallel-lint, pecl, phan, phing, phinx, phive, php-config, php-cs-fixer, phpcbf, phpcpd, phpcs, phpdoc or phpDocumentor, phpize, phplint, phpmd, phpspec, phpstan, phpunit, phpunit-bridge, phpunit-polyfills, prestissimo, protoc, psalm, symfony or symfony-cli, vapor or vapor-cli, wp or wp-cli - name: Setup PHP with tools uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: php-cs-fixer, phpunit In addition to above tools any composer tool or package can also be set up globally by specifying it as vendor/package matching the listing on Packagist. This format accepts the same version constraints as composer. - name: Setup PHP with tools uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: vimeo/psalm To set up a particular version of a tool, specify it in the form tool:version. Version can be in the following format: Semver. For example tool:1.2.3 or tool:1.2.3-beta1. Major version. For example tool:1 or tool:1.x. Major and minor version. For example tool:1.2 or tool:1.2.x. When you specify just the major version or the version in major.minor format, the latest patch version matching the input will be setup. Except for major versions of composer, For other tools when you specify only the major version or the version in major.minor format for any tool you can get rate limited by GitHub's API. To avoid this, it is recommended to provide a GitHub OAuth token. You can do that by setting COMPOSER_TOKEN environment variable. - name: Setup PHP with tools uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: php-cs-fixer:3, phpunit:8.5 env: COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }} The latest stable version of composer is set up by default. You can set up the required composer version by specifying the major version v1 or v2, or the version in major.minor or semver format, Additionally for composer snapshot and preview can also be specified to set up the respective releases. - name: Setup PHP with composer v2 uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: composer:v2 If you do not use composer in your workflow, you can specify tools: none to skip it. - name: Setup PHP without composer uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: none Scripts phpize and php-config are set up with the same version as of the input PHP version. The latest version of blackfire cli is set up when blackfire is specified in tools input. Please refer to the official documentation for using blackfire with GitHub Actions. Tools prestissimo and composer-prefetcher will be skipped unless composer:v1 is also specified in tools input. It is recommended to drop prestissimo and use composer v2. By default, tools which cannot be set up gracefully leave an error message in the logs, the action is not interrupted. To change this behaviour you can set fail-fast flag to true. - name: Setup PHP with fail-fast uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: deployer env: fail-fast: true Notes Input tools is useful to set up tools which you only use in GitHub Actions, thus keeping your composer.json tidy. If you do not want to use all your dev-dependencies in GitHub Actions workflow, you can run composer with --no-dev and install required tools using tools input to speed up your workflow. If you have a tool in your composer.json, do not set up it with tools input as the two instances of the tool might conflict. Coverage Support Xdebug Specify coverage: xdebug to use Xdebug and disable PCOV. Runs on all PHP versions supported. - name: Setup PHP with Xdebug uses: shivammathur/setup-php@v2 with: php-version: '8.0' coverage: xdebug The latest version of Xdebug compatible with the PHP version is set up by default. If you need Xdebug 2.x on PHP 7.2, 7.3 or 7.4, you can specify coverage: xdebug2. - name: Setup PHP with Xdebug 2.x uses: shivammathur/setup-php@v2 with: php-version: '7.4' coverage: xdebug2 PCOV Specify coverage: pcov to use PCOV and disable Xdebug. Runs on PHP 7.1 and newer PHP versions. If your source code directory is other than src, lib or, app, specify pcov.directory using the ini-values input. - name: Setup PHP with PCOV uses: shivammathur/setup-php@v2 with: php-version: '8.0' ini-values: pcov.directory=api #optional, see above for usage. coverage: pcov PHPUnit 8.x and above supports PCOV out of the box. If you are using PHPUnit 5.x, 6.x or 7.x, you need to set up pcov/clobber before executing your tests. - name: Setup PCOV run: | composer require pcov/clobber vendor/bin/pcov clobber Disable Coverage Specify coverage: none to disable both Xdebug and PCOV. Disable coverage for these reasons: You are not generating coverage reports while testing. It will disable Xdebug, which will have a positive impact on PHP performance. You are using phpdbg for running your tests. You are profiling your code using blackfire. You are using PHP in JIT mode. Please refer to JIT configuration section for more details. - name: Setup PHP with no coverage driver uses: shivammathur/setup-php@v2 with: php-version: '8.0' coverage: none Usage Inputs Specify using with keyword php-version (required) Specify the PHP version you want to set up. Accepts a string. For example '8.0'. Accepts latest to set up the latest stable PHP version. Accepts nightly to set up a nightly build from the master branch of PHP. Accepts the format d.x, where d is the major version. For example 5.x, 7.x and 8.x. See PHP support for supported PHP versions. extensions (optional) Specify the extensions you want to add or disable. Accepts a string in csv-format. For example mbstring, :opcache. Accepts none to disable all shared extensions. Shared extensions prefixed with : are disabled. See PHP extension support for more info. ini-values (optional) Specify the values you want to add to php.ini. Accepts a string in csv-format. For example post_max_size=256M, max_execution_time=180. Accepts ini values with commas if wrapped in quotes. For example xdebug.mode=\"develop,coverage\". coverage (optional) Specify the code-coverage driver you want to set up. Accepts xdebug, pcov or none. See coverage support for more info. tools (optional) Specify the tools you want to set up. Accepts a string in csv-format. For example: phpunit, phpcs See tools Support for tools supported. Outputs php-version To use outputs, give the setup-php step an id, you can use the same to get the outputs in a later step. Provides the PHP version in semver format. - name: Setup PHP id: setup-php uses: shivammathur/setup-php@v2 with: php-version: '8.0' - name: Print PHP version run: echo ${{ steps.setup-php.outputs.php-version }} Flags Specify using env keyword fail-fast (optional) Specify to mark the workflow as failed if an extension or tool fails to set up. This changes the default mode from graceful warnings to fail-fast. By default, it is set to false. Accepts true and false. phpts (optional) Specify to set up thread-safe version of PHP on Windows. Accepts ts and nts. By default, it is set to nts. See thread safe setup for more info. update (optional) Specify to update PHP on the runner to the latest patch version. Accepts true and false. By default, it is set to false. See force update setup for more info. See below for more info. Basic Setup Setup a particular PHP version. steps: - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: mbstring, intl ini-values: post_max_size=256M, max_execution_time=180 coverage: xdebug tools: php-cs-fixer, phpunit Matrix Setup Setup multiple PHP versions on multiple operating systems. jobs: run: runs-on: ${{ matrix.operating-system }} strategy: matrix: operating-system: ['ubuntu-latest', 'windows-latest', 'macos-latest'] php-versions: ['7.3', '7.4', '8.0'] phpunit-versions: ['latest'] include: - operating-system: 'ubuntu-latest' php-versions: '7.2' phpunit-versions: '8.5.21' steps: - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: ${{ matrix.php-versions }} extensions: mbstring, intl ini-values: post_max_size=256M, max_execution_time=180 coverage: xdebug tools: php-cs-fixer, phpunit:${{ matrix.phpunit-versions }} Nightly Build Setup Setup a nightly build of PHP 8.1 or PHP 8.2. This version is currently in development. Some user space extensions might not support this version currently. steps: - name: Setup nightly PHP uses: shivammathur/setup-php@v2 with: php-version: '8.1' extensions: mbstring ini-values: post_max_size=256M, max_execution_time=180 coverage: xdebug tools: php-cs-fixer, phpunit Thread Safe Setup Setup TS or NTS PHP on Windows. NTS versions are set up by default. On Ubuntu and macOS only NTS versions are supported. On Windows both TS and NTS versions are supported. jobs: run: runs-on: windows-latest name: Setup PHP TS on Windows steps: - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' env: phpts: ts # specify ts or nts Force Update Setup Update to the latest patch of PHP versions. Pre-installed PHP versions on the GitHub Actions images are not updated to their latest patch release by default. You can specify the update environment variable to true for updating to the latest release. - name: Setup PHP with latest versions uses: shivammathur/setup-php@v2 with: php-version: '8.0' env: update: true # specify true or false Verbose Setup Debug your workflow To debug any issues, you can use the verbose tag instead of v2. - name: Setup PHP with logs uses: shivammathur/setup-php@verbose with: php-version: '8.0' Multi-Arch Setup Setup PHP on multiple architecture on Ubuntu GitHub Runners. PHP 5.6 to PHP 8.0 are supported by setup-php on multiple architecture on Ubuntu. For this, you can use shivammathur/node images as containers. These have compatible Nodejs installed for JavaScript based GitHub Actions. Currently, for ARM based setup, you will need self-hosted runners. jobs: run: runs-on: ubuntu-latest container: shivammathur/node:latest-${{ matrix.arch }} strategy: matrix: arch: [\"amd64\", \"i386\"] steps: - name: Install PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' Self Hosted Setup Setup PHP on a self-hosted runner. To set up a containerised self-hosted runner, refer to the following guides as per your base operating system. Linux Windows To set up the runner directly on the host OS or in a virtual machine, follow this requirements guide before setting up the self-hosted runner. If your workflow uses service containers, then set up the runner on a Linux host or in a Linux virtual machine. GitHub Actions does not support nested virtualization on Linux, so services will not work in a dockerized container. Specify the environment variable runner with the value self-hosted. Without this your workflow will fail. jobs: run: runs-on: self-hosted strategy: matrix: php-versions: ['5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0'] name: PHP ${{ matrix.php-versions }} steps: - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: ${{ matrix.php-versions }} env: runner: self-hosted # Specify the runner. Notes Do not set up multiple self-hosted runners on a single server instance as parallel workflow will conflict with each other. Do not set up self-hosted runners on the side on your development environment or your production server. Avoid using the same labels for your self-hosted runners which are used by GitHub-hosted runners. Local Testing Setup Test your Ubuntu workflow locally using nektos/act. jobs: run: runs-on: ubuntu-latest steps: - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' Run the workflow locally with act using shivammathur/node docker images. Choose the image tag which matches the runs-on property in your workflow. For example, if you are using ubuntu-20.04 in your workflow, run act -P ubuntu-20.04=shivammathur/node:20.04. # For runs-on: ubuntu-latest act -P ubuntu-latest=shivammathur/node:latest # For runs-on: ubuntu-20.04 act -P ubuntu-20.04=shivammathur/node:2004 # For runs-on: ubuntu-18.04 act -P ubuntu-18.04=shivammathur/node:1804 JIT Configuration Enable Just-in-time(JIT) on PHP 8.0 and above. To enable JIT, enable opcache in cli mode by setting opcache.enable_cli=1. JIT conflicts with Xdebug, PCOV, and other extensions which override zend_execute_ex function, so set coverage: none and disable any such extension if added. By default, opcache.jit=1235 and opcache.jit_buffer_size=256M are set which can be changed using ini-values input. For detailed information about JIT related directives refer to the official PHP documentation. For example to enable JIT in tracing mode with buffer size of 64 MB. - name: Setup PHP with JIT in tracing mode uses: shivammathur/setup-php@v2 with: php-version: '8.0' coverage: none ini-values: opcache.enable_cli=1, opcache.jit=tracing, opcache.jit_buffer_size=64M Cache Extensions You can cache PHP extensions using shivammathur/cache-extensions and action/cache GitHub Actions. Extensions which take very long to set up when cached are available in the next workflow run and are enabled directly. This reduces the workflow execution time. Refer to shivammathur/cache-extensions for details. Cache Composer Dependencies If your project uses composer, you can persist the composer's internal cache directory. Dependencies cached are loaded directly instead of downloading them while installation. The files cached are available across check-runs and will reduce the workflow execution time. - name: Get composer cache directory id: composer-cache run: echo \"::set-output name=dir::$(composer config cache-files-dir)\" - name: Cache dependencies uses: actions/cache@v2 with: path: ${{ steps.composer-cache.outputs.dir }} key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }} restore-keys: ${{ runner.os }}-composer- - name: Install dependencies run: composer install --prefer-dist Notes Please do not cache vendor directory using action/cache as that will have side effects. If you do not commit composer.lock, you can use the hash of composer.json as the key for your cache. key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }} If you support a range of composer dependencies and use prefer-lowest and prefer-stable options, you can store them in your matrix and add them to the keys. key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}-${{ matrix.prefer }}- restore-keys: ${{ runner.os }}-composer-${{ matrix.prefer }}- Composer GitHub OAuth If you have a number of workflows which set up multiple tools or have many composer dependencies, you might hit the GitHub's rate limit for composer. Also, if you specify only the major version or the version in major.minor format, you can hit the rate limit. To avoid this you can specify an OAuth token by setting COMPOSER_TOKEN environment variable. You can use GITHUB_TOKEN secret for this purpose. - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' env: COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }} Inline PHP Scripts If you have to run multiple lines of PHP code in your workflow, you can do that easily without saving it to a file. Put the code in the run property of a step and specify the shell as php {0}. - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' - name: Run PHP code shell: php {0} run: | <?php $welcome = \"Hello, world\"; echo $welcome; Problem Matchers Problem matchers are json configurations which identify errors and warnings in your logs and surface them prominently in the GitHub Actions UI by highlighting them and creating code annotations. PHP Setup problem matchers for your PHP output by adding this step after the setup-php step. - name: Setup problem matchers for PHP run: echo \"::add-matcher::${{ runner.tool_cache }}/php.json\" PHPUnit Setup problem matchers for your PHPUnit output by adding this step after the setup-php step. - name: Setup problem matchers for PHPUnit run: echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\" PHPStan PHPStan supports error reporting in GitHub Actions, so it does not require problem matchers. - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: phpstan - name: Run PHPStan run: phpstan analyse src Psalm Psalm supports error reporting in GitHub Actions with an output format github. - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: psalm - name: Run Psalm run: psalm --output-format=github Tools with checkstyle support For tools that support checkstyle reporting like phpstan, psalm, php-cs-fixer and phpcs you can use cs2pr to annotate your code. For examples refer to cs2pr documentation. Here is an example with phpcs. - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' tools: cs2pr, phpcs - name: Run phpcs run: phpcs -q --report=checkstyle src | cs2pr Examples Examples of using setup-php with various PHP Frameworks and Packages. Framework/Package Runs on Workflow Blackfire macOS, ubuntu and windows blackfire.yml Blackfire Player macOS, ubuntu and windows blackfire-player.yml CakePHP with MySQL and Redis ubuntu cakephp-mysql.yml CakePHP with PostgreSQL and Redis ubuntu cakephp-postgres.yml CakePHP without services macOS, ubuntu and windows cakephp.yml CodeIgniter macOS, ubuntu and windows codeigniter.yml Laravel with MySQL and Redis ubuntu laravel-mysql.yml Laravel with PostgreSQL and Redis ubuntu laravel-postgres.yml Laravel without services macOS, ubuntu and windows laravel.yml Lumen with MySQL and Redis ubuntu lumen-mysql.yml Lumen with PostgreSQL and Redis ubuntu lumen-postgres.yml Lumen without services macOS, ubuntu and windows lumen.yml Phalcon with MySQL ubuntu phalcon-mysql.yml Phalcon with PostgreSQL ubuntu phalcon-postgres.yml Roots/bedrock ubuntu bedrock.yml Roots/sage ubuntu sage.yml Slim Framework macOS, ubuntu and windows slim-framework.yml Symfony with MySQL ubuntu symfony-mysql.yml Symfony with PostgreSQL ubuntu symfony-postgres.yml Symfony without services macOS, ubuntu and windows symfony.yml Yii2 Starter Kit with MySQL ubuntu yii2-mysql.yml Yii2 Starter Kit with PostgreSQL ubuntu yii2-postgres.yml Zend Framework macOS, ubuntu and windows zend-framework.yml Versioning Use the v2 tag as setup-php version. It is a rolling tag and is synced with the latest minor and patch releases. With v2 you automatically get the bug fixes, security patches, new features and support for latest PHP releases. For debugging any issues verbose tag can be used temporarily. It outputs all the logs and is also synced with the latest releases. Semantic release versions can also be used. It is recommended to use dependabot with semantic versioning to keep the actions in your workflows up to date. Commit SHA can also be used, but are not recommended. They have to be updated with every release manually, without which you will not get any bug fixes, security patches or new features. It is highly discouraged to use the master branch as version, it might break your workflow after major releases as they have breaking changes. If you are using the v1 tag or a 1.x.y version, you should switch to v2 as v1 only gets critical bug fixes. Maintenance support for v1 will be dropped with the last PHP 8.0 release. License The scripts and documentation in this project are under the MIT License. This project has multiple dependencies. Their licenses can be found in their respective repositories. The logo for setup-php is a derivative work of php.net logo and is licensed under the CC BY-SA 4.0 License. Contributions Contributions are welcome! See Contributor's Guide before you start. If you face any issues or want to suggest a feature/improvement, start a discussion here. Contributors of setup-php and other related projects Support This Project Please star the project and share it. If you blog, please share your experience of using this action. Please sponsor setup-php using GitHub sponsors. Please reach out if you have any questions about sponsoring setup-php. Corporate Sponsors Individual Sponsors Dependencies Node.js dependencies aaronparker/VcRedist mlocati/powershell-phpmanager ppa:ondrej/php shivammathur/cache-extensions shivammathur/composer-cache shivammathur/homebrew-extensions shivammathur/homebrew-php shivammathur/icu-intl shivammathur/php-builder shivammathur/php-builder-windows shivammathur/php-ubuntu shivammathur/php5-darwin shivammathur/php5-ubuntu Further Reading About GitHub Actions GitHub Actions Syntax Other Awesome Actions ",
        "_version_": 1718536520623718400
      },
      {
        "story_id": 21158487,
        "story_author": "danicgross",
        "story_descendants": 65,
        "story_score": 470,
        "story_time": "2019-10-04T15:15:12Z",
        "story_title": "Streamlit: Turn a Python script into an interactive data analysis tool",
        "search": [
          "Streamlit: Turn a Python script into an interactive data analysis tool",
          "https://towardsdatascience.com/coding-ml-tools-like-you-code-ml-models-ddba3357eace",
          "Introducing Streamlit, an app framework built for ML engineersCoding a semantic search engine with real-time neural-net inference in 300 lines of Python.In my experience, every nontrivial machine learning project is eventually stitched together with bug-ridden and unmaintainable internal tools. These tools often a patchwork of Jupyter Notebooks and Flask apps are difficult to deploy, require reasoning about client-server architecture, and dont integrate well with machine learning constructs like Tensorflow GPU sessions.I saw this first at Carnegie Mellon, then at Berkeley, Google X, and finally while building autonomous robots at Zoox. These tools were often born as little Jupyter notebooks: the sensor calibration tool, the simulation comparison app, the LIDAR alignment app, the scenario replay tool, and so on.As a tool grew in importance, project managers stepped in. Processes sprouted. Requirements flowered. These solo projects gestated into scripts, and matured into gangly maintenance nightmares.The machine learning engineers ad-hoc app building flow.When a tool became crucial, we called in the tools team. They wrote fluent Vue and React. They blinged their laptops with stickers about declarative frameworks. They had a design process:The tools teams clean-slate app building flow.Which was awesome. But these tools all needed new features, like weekly. And the tools team was supporting ten other projects. They would say, well update your tool again in two months.So we were back to building our own tools, deploying Flask apps, writing HTML, CSS, and JavaScript, and trying to version control everything from notebooks to stylesheets. So my old Google X friend, Thiago Teixeira, and I began thinking about the following question: What if we could make building tools as easy as writing Python scripts?We wanted machine learning engineers to be able to create beautiful apps without needing a tools team. These internal tools should arise as a natural byproduct of the ML workflow. Writing such tools should feel like training a neural net or performing an ad-hoc analysis in Jupyter! At the same time, we wanted to preserve all of the flexibility of a powerful app framework. We wanted to create beautiful, performant tools that engineers could show off. Basically, we wanted this:The Streamlit app building flow.With an amazing beta community including engineers from Uber, Twitter, Stitch Fix, and Dropbox, we worked for a year to create Streamlit, a completely free and open source app framework for ML engineers. With each prototype, the core principles of Streamlit became simpler and purer. They are:#1: Embrace Python scripting. Streamlit apps are really just scripts that run from top to bottom. Theres no hidden state. You can factor your code with function calls. If you know how to write Python scripts, you can write Streamlit apps. For example, this is how you write to the screen:import streamlit as stst.write('Hello, world!')Nice to meet you.#2: Treat widgets as variables. There are no callbacks in Streamlit! Every interaction simply reruns the script from top to bottom. This approach leads to really clean code:import streamlit as stx = st.slider('x')st.write(x, 'squared is', x * x)An interactive Streamlit app in three lines of code.#3: Reuse data and computation. What if you download lots of data or perform complex computation? The key is to safely reuse information across runs. Streamlit introduces a cache primitive that behaves like a persistent, immutable-by-default, data store that lets Streamlit apps safely and effortlessly reuse information. For example, this code downloads data only once from the Udacity Self-driving car project, yielding a simple, fast app:Using st.cache to persist data across Streamlit runs. To run this code, please follow these instructions.The output of running the st.cache example above.In short, Streamlit works like this:The entire script is run from scratch for each user interaction.Streamlit assigns each variable an up-to-date value given widget states.Caching allows Streamlit to skip redundant data fetches and computation.Or in pictures:User events trigger Streamlit to rerun the script from scratch. Only the cache persists across runs.If this sounds intriguing, you can try it right now! Just run:$ pip install --upgrade streamlit $ streamlit hello You can now view your Streamlit app in your browser. Local URL: http://localhost:8501 Network URL: http://10.0.1.29:8501This will automatically pop open a web browser pointing to your local Streamlit app. If not, just click the link.To see more examples like this fractal animation, run streamlit hello from the command line.Ok. Are you back from playing with fractals? Those can be mesmerizing.The simplicity of these ideas does not prevent you from creating incredibly rich and useful apps with Streamlit. During my time at Zoox and Google X, I watched as self-driving car projects ballooned into gigabytes of visual data, which needed to be searched and understood, including running models on images to compare performance. Every self-driving car project Ive seen eventually has had entire teams working on this tooling.Building such a tool in Streamlit is easy. This Streamlit demo lets you perform semantic search across the entire Udacity self-driving car photo dataset, visualize human-annotated ground truth labels, and run a complete neural net (YOLO) in real time from within the app [1].This 300-line Streamlit demo combines semantic visual search with interactive neural net inference.The whole app is a completely self-contained, 300-line Python script, most of which is machine learning code. In fact, there are only 23 Streamlit calls in the whole app. You can run it yourself right now!$ pip install --upgrade streamlit opencv-python$ streamlit runhttps://raw.githubusercontent.com/streamlit/demo-self-driving/master/app.pyAs we worked with machine learning teams on their own projects, we came to realize that these simple ideas yield a number of important benefits:Streamlit apps are pure Python files. So you can use your favorite editor and debugger with Streamlit.My favorite layout for writing Streamlit apps has VSCode on the left and Chrome on the right.Pure Python scripts work seamlessly with Git and other source control software, including commits, pull requests, issues, and comments. Because Streamlits underlying language is pure Python, you get all the benefits of these amazing collaboration tools for free .Because Streamlit apps are just Python scripts, you can easily version control them with Git.Streamlit provides an immediate-mode live coding environment. Just click Always rerun when Streamlit detects a source file change.Click Always rerun to enable live coding.Caching simplifies setting up computation pipelines. Amazingly, chaining cached functions automatically creates efficient computation pipelines! Consider this code adapted from our Udacity demo:A simple computation pipeline in Streamlit. To run this code, please follow these instructions.Basically, the pipeline is load_metadata create_summary. Every time the script is run Streamlit only recomputes whatever subset of the pipeline is required to get the right answer. Cool!To make apps performant, Streamlit only recomputes whatever is necessary to update the UI.Streamlit is built for GPUs. Streamlit allows direct access to machine-level primitives like TensorFlow and PyTorch and complements these libraries. For example in this demo, Streamlits cache stores the entire NVIDIA celebrity face GAN [2]. This approach enables nearly instantaneous inference as the user updates sliders.This Streamlit app demonstrates NVIDIA celebrity face GAN [2] model using Shaobo Guans TL-GAN [3].Streamlit is a free and open-source library rather than a proprietary web app. You can serve Streamlit apps on-prem without contacting us. You can even run Streamlit locally on a laptop without an Internet connection! Furthermore, existing projects can adopt Streamlit incrementally.Several ways incrementally adopt Streamlit. (Icons courtesy of fullvector / Freepik.)This just scratches the surface of what you can do with Streamlit. One of the most exciting aspects of Streamlit is how these primitives can be easily composed into complex apps that look like scripts. Theres a lot more we could say about how our architecture works and the features we have planned, but well save that for future posts.Block diagram of Streamlits components. More coming soon!Were excited to finally share Streamlit with the community today and see what you all build with it. We hope that youll find it easy and delightful to turn your Python scripts into beautiful ML apps.Thanks to Amanda Kelly, Thiago Teixeira, TC Ricks, Seth Weidman, Regan Carey, Beverly Treuille, Genevive Wachtell, and Barney Pell for their helpful input on this article.References:[1] J. Redmon and A. Farhadi, YOLOv3: An Incremental Improvement (2018), arXiv.[2] T. Karras, T. Aila, S. Laine, and J. Lehtinen, Progressive Growing of GANs for Improved Quality, Stability, and Variation (2018), ICLR.[3] S. Guan, Controlled image synthesis and editing using a novel TL-GAN model (2018), Insight Data Science Blog. "
        ],
        "story_type": "Normal",
        "url_raw": "https://towardsdatascience.com/coding-ml-tools-like-you-code-ml-models-ddba3357eace",
        "comments.comment_id": [21169495, 21170226],
        "comments.comment_author": ["_gwlb", "random42"],
        "comments.comment_descendants": [2, 0],
        "comments.comment_time": [
          "2019-10-06T02:43:38Z",
          "2019-10-06T06:33:03Z"
        ],
        "comments.comment_text": [
          "This looks really slick, can't wait to try it out!<p>If anyone is curious about other tools in the same space, our data scientists use Dash[1] and plotly to build interactive exploration and visualization apps. We set up a Git repo that deploys their apps internally with every merge to master, so they're actually building and updating tools that our operations, marketing, etc teams use every day.<p>[1] <a href=\"https://plot.ly/dash/\" rel=\"nofollow\">https://plot.ly/dash/</a>",
          "Interesting project, but why does an open source developer tool needs browser telemetry?<p>You should ask for telemetry permissions _before_ the process starts up (as you do for email address), and keep the default as \"No\", instead of start to send the data transparently unless non user friendly steps are taken by the user."
        ],
        "id": "1da01bb2-1ce3-4329-a97b-b34951d6a828",
        "url_text": "Introducing Streamlit, an app framework built for ML engineersCoding a semantic search engine with real-time neural-net inference in 300 lines of Python.In my experience, every nontrivial machine learning project is eventually stitched together with bug-ridden and unmaintainable internal tools. These tools often a patchwork of Jupyter Notebooks and Flask apps are difficult to deploy, require reasoning about client-server architecture, and dont integrate well with machine learning constructs like Tensorflow GPU sessions.I saw this first at Carnegie Mellon, then at Berkeley, Google X, and finally while building autonomous robots at Zoox. These tools were often born as little Jupyter notebooks: the sensor calibration tool, the simulation comparison app, the LIDAR alignment app, the scenario replay tool, and so on.As a tool grew in importance, project managers stepped in. Processes sprouted. Requirements flowered. These solo projects gestated into scripts, and matured into gangly maintenance nightmares.The machine learning engineers ad-hoc app building flow.When a tool became crucial, we called in the tools team. They wrote fluent Vue and React. They blinged their laptops with stickers about declarative frameworks. They had a design process:The tools teams clean-slate app building flow.Which was awesome. But these tools all needed new features, like weekly. And the tools team was supporting ten other projects. They would say, well update your tool again in two months.So we were back to building our own tools, deploying Flask apps, writing HTML, CSS, and JavaScript, and trying to version control everything from notebooks to stylesheets. So my old Google X friend, Thiago Teixeira, and I began thinking about the following question: What if we could make building tools as easy as writing Python scripts?We wanted machine learning engineers to be able to create beautiful apps without needing a tools team. These internal tools should arise as a natural byproduct of the ML workflow. Writing such tools should feel like training a neural net or performing an ad-hoc analysis in Jupyter! At the same time, we wanted to preserve all of the flexibility of a powerful app framework. We wanted to create beautiful, performant tools that engineers could show off. Basically, we wanted this:The Streamlit app building flow.With an amazing beta community including engineers from Uber, Twitter, Stitch Fix, and Dropbox, we worked for a year to create Streamlit, a completely free and open source app framework for ML engineers. With each prototype, the core principles of Streamlit became simpler and purer. They are:#1: Embrace Python scripting. Streamlit apps are really just scripts that run from top to bottom. Theres no hidden state. You can factor your code with function calls. If you know how to write Python scripts, you can write Streamlit apps. For example, this is how you write to the screen:import streamlit as stst.write('Hello, world!')Nice to meet you.#2: Treat widgets as variables. There are no callbacks in Streamlit! Every interaction simply reruns the script from top to bottom. This approach leads to really clean code:import streamlit as stx = st.slider('x')st.write(x, 'squared is', x * x)An interactive Streamlit app in three lines of code.#3: Reuse data and computation. What if you download lots of data or perform complex computation? The key is to safely reuse information across runs. Streamlit introduces a cache primitive that behaves like a persistent, immutable-by-default, data store that lets Streamlit apps safely and effortlessly reuse information. For example, this code downloads data only once from the Udacity Self-driving car project, yielding a simple, fast app:Using st.cache to persist data across Streamlit runs. To run this code, please follow these instructions.The output of running the st.cache example above.In short, Streamlit works like this:The entire script is run from scratch for each user interaction.Streamlit assigns each variable an up-to-date value given widget states.Caching allows Streamlit to skip redundant data fetches and computation.Or in pictures:User events trigger Streamlit to rerun the script from scratch. Only the cache persists across runs.If this sounds intriguing, you can try it right now! Just run:$ pip install --upgrade streamlit $ streamlit hello You can now view your Streamlit app in your browser. Local URL: http://localhost:8501 Network URL: http://10.0.1.29:8501This will automatically pop open a web browser pointing to your local Streamlit app. If not, just click the link.To see more examples like this fractal animation, run streamlit hello from the command line.Ok. Are you back from playing with fractals? Those can be mesmerizing.The simplicity of these ideas does not prevent you from creating incredibly rich and useful apps with Streamlit. During my time at Zoox and Google X, I watched as self-driving car projects ballooned into gigabytes of visual data, which needed to be searched and understood, including running models on images to compare performance. Every self-driving car project Ive seen eventually has had entire teams working on this tooling.Building such a tool in Streamlit is easy. This Streamlit demo lets you perform semantic search across the entire Udacity self-driving car photo dataset, visualize human-annotated ground truth labels, and run a complete neural net (YOLO) in real time from within the app [1].This 300-line Streamlit demo combines semantic visual search with interactive neural net inference.The whole app is a completely self-contained, 300-line Python script, most of which is machine learning code. In fact, there are only 23 Streamlit calls in the whole app. You can run it yourself right now!$ pip install --upgrade streamlit opencv-python$ streamlit runhttps://raw.githubusercontent.com/streamlit/demo-self-driving/master/app.pyAs we worked with machine learning teams on their own projects, we came to realize that these simple ideas yield a number of important benefits:Streamlit apps are pure Python files. So you can use your favorite editor and debugger with Streamlit.My favorite layout for writing Streamlit apps has VSCode on the left and Chrome on the right.Pure Python scripts work seamlessly with Git and other source control software, including commits, pull requests, issues, and comments. Because Streamlits underlying language is pure Python, you get all the benefits of these amazing collaboration tools for free .Because Streamlit apps are just Python scripts, you can easily version control them with Git.Streamlit provides an immediate-mode live coding environment. Just click Always rerun when Streamlit detects a source file change.Click Always rerun to enable live coding.Caching simplifies setting up computation pipelines. Amazingly, chaining cached functions automatically creates efficient computation pipelines! Consider this code adapted from our Udacity demo:A simple computation pipeline in Streamlit. To run this code, please follow these instructions.Basically, the pipeline is load_metadata create_summary. Every time the script is run Streamlit only recomputes whatever subset of the pipeline is required to get the right answer. Cool!To make apps performant, Streamlit only recomputes whatever is necessary to update the UI.Streamlit is built for GPUs. Streamlit allows direct access to machine-level primitives like TensorFlow and PyTorch and complements these libraries. For example in this demo, Streamlits cache stores the entire NVIDIA celebrity face GAN [2]. This approach enables nearly instantaneous inference as the user updates sliders.This Streamlit app demonstrates NVIDIA celebrity face GAN [2] model using Shaobo Guans TL-GAN [3].Streamlit is a free and open-source library rather than a proprietary web app. You can serve Streamlit apps on-prem without contacting us. You can even run Streamlit locally on a laptop without an Internet connection! Furthermore, existing projects can adopt Streamlit incrementally.Several ways incrementally adopt Streamlit. (Icons courtesy of fullvector / Freepik.)This just scratches the surface of what you can do with Streamlit. One of the most exciting aspects of Streamlit is how these primitives can be easily composed into complex apps that look like scripts. Theres a lot more we could say about how our architecture works and the features we have planned, but well save that for future posts.Block diagram of Streamlits components. More coming soon!Were excited to finally share Streamlit with the community today and see what you all build with it. We hope that youll find it easy and delightful to turn your Python scripts into beautiful ML apps.Thanks to Amanda Kelly, Thiago Teixeira, TC Ricks, Seth Weidman, Regan Carey, Beverly Treuille, Genevive Wachtell, and Barney Pell for their helpful input on this article.References:[1] J. Redmon and A. Farhadi, YOLOv3: An Incremental Improvement (2018), arXiv.[2] T. Karras, T. Aila, S. Laine, and J. Lehtinen, Progressive Growing of GANs for Improved Quality, Stability, and Variation (2018), ICLR.[3] S. Guan, Controlled image synthesis and editing using a novel TL-GAN model (2018), Insight Data Science Blog. ",
        "_version_": 1718536529514594304
      },
      {
        "story_id": 21196107,
        "story_author": "joebaf",
        "story_descendants": 145,
        "story_score": 194,
        "story_time": "2019-10-08T19:25:11Z",
        "story_title": "C++ Ecosystem: Compilers, IDEs, Tools, Testing",
        "search": [
          "C++ Ecosystem: Compilers, IDEs, Tools, Testing",
          "https://www.bfilipek.com/2019/10/cppecosystem.html",
          "Table of Contents Introduction Compilers GCC Microsoft Visual C++ Clang Intel C++ Compiler Build Tools & Package Managers Make Cmake Ninja Microsoft Build Engine (MSBuild) Conan, Vcpkg, Buckaroo Integrated Development Environments Sublime Text, Atom, And Visual Studio Code Vi/Vim & Emacs Clion Qt Creator C++Builder Visual Studio Xcode KDevelop Eclipse CDT IDE Cevelop Android Studio Oracle Studio Extra: Compiler Explorer & Online Tools Debugging & Testing GDB LLDB Debugging Tools For Windows Mozillas RR CATCH/CATCH2 BOOST.TEST GOOGLE TEST CUTE DocTest Mull Sanitizers Valgrind HeapTrack Dr. Memory Deleaker Summary & More Your Turn To write a professional C++ application, you not only need a basic text editor and a compiler. You require some more tooling. In this blog post, youll see a broad list of tools that make C++ programming possible: compilers, IDEs, debuggers and other. Last Update: 14th October 2019. Note: This is a blog post based on the White Paper created by Embarcadero, see the full paper here: C++ Ecosystem White Paper. Introduction The C++ computer programming language has become one of the most widely used modern programming languages. Software built with C++ is known for its performance and efficiency. C++ has been used to build numerous vastly popular core libraries, applications such as Microsoft Office, game engines such as Unreal, software tools like Adobe Photoshop, compilers like Clang, databases like MySQL, and even operating systems such as Windows across a wide variety of platforms as it continues to evolve and grow. Modern C++ is generally defined as C++ code that utilizes language features in C++11, C++14, and C++17 based compilers. These are language standards named after the year they were defined (2011, 2014 and 2017 respectively) and include a number of significant additions and enhancements to the original core language for powerful, highly performant, and bug-free code. Modern C++ has high-level features that support object-oriented programming, functional programming, generic programming, and low-level memory manipulation features. Big names in the computer industry such as Microsoft, Intel, the Free Software Foundation, and others have their modern C++ compilers. Companies such as Microsoft, The QT Company, JetBrains, and Embarcadero provide integrated development environments for writing code in modern C++. Popular libraries are available for C++ across a wide range of computer disciplines including Artificial Intelligence, Machine Learning, Robotics, Math, Scientific Computing, Audio Processing, and Image Processing. In this blog post, we are going to cover a number of these compilers, build tools, IDEs, libraries, frameworks, coding assistants, and much more that can support and enhance your development with modern C++. Lets get started! Compilers There are a number of popular compilers that support modern C++ including GCC/g++, MSVC (Microsoft Visual C++), Clang and Intel Compiler. Each compiler has varying support for each of the major operating systems with the open-source GCC/g++ originating in the late 1980s, Microsofts Visual C++ in the early 1990s, and Clang in the late 2000s. All four compilers support modern C++ up to at least C++17, but the source code licenses for each of them vary greatly. GCC GCC is a general-use compiler developed and maintained and regularly updated by the GCC Steering committee as part of the GNU Project. GCC describes a large growing family of compilers targeting many hardware platforms and several languages. While it mainly targets Unix-like platforms, Windows support is provided through the Cygwin or MinGW runtime libraries. GCC compiles modern C++ code up to C++17 with experimental support for some C++20 features. It also compiles with a variety of language extensions that build upon C++ standards. It is free and open-source (GPL3) with the GCC Runtime Library Exception. GCC has support from build tools such as CMake and Ninja and many IDEs such as CLion, Qt Creator, and Visual Studio Code. https://gcc.gnu.org/ https://gcc.gnu.org/projects/cxx-status.html Microsoft Visual C++ Microsoft Visual C++ (MSVC) is Microsofts compiler for their custom implementation of the C++ standard, known as Visual C++. It is regularly updated, and like GCC and Clang, supports modern C++ standards up to C++17 with experimental support for some C++20 features. MSVC is the primary method for building C++ applications in Microsofts own Visual Studio. It generally targets a number of architectures on Windows, Android, iOS, and Linux. Support for build tools and IDEs are limited but growing. CMake extensions are available in Visual Studio 2019. MSVC can be used with Visual Studio Code, with limited support from CLion and Qt Creator with additional extensions. MSVC is proprietary and available under a commercial license, but theres also a Community edition. https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B https://devblogs.microsoft.com/visualstudio/ https://visualstudio.microsoft.com/vs/community/ Clang Clang describes a large family of compilers for the C family of languages maintained and regularly developed as part of the LLVM project. Although it targets many popular architectures, it generally targets fewer platforms than GCC. The LLVM project defines Clang through key design principles - strict adherence to C++ standards (although support for GCC extensions is offered), modular design, and minimal modification to the source codes structure during compilation, to name a few. Like GCC, Clang compiles modern C++ code with support for the C++17 standard with experimental C++20 support. It is available under an open-source (Apache License Version 2.0) license. Clang also has widespread support from build tools such as CMake and Ninja and IDEs such as CLion, Qt Creator, Xcode, and others. https://clang.llvm.org/ https://clang.llvm.org/cxx_status.html Intel C++ Compiler Intel C++ Compiler can generate highly optimized code for various Intel CPUs (including Xeon, Core, and Atom processors). The compiler can seamlessly integrate with popular IDE like Visual Studio, GCC toolchain and others. It can leverage advanced instruction set (even AVX512) and generate parallel code (for example, thanks to OpenMP 5.0 support). Intel doesnt ship the compiler with the Standard Library implementation, so it uses the library you provide on your platform. The compiler is available as a part of Intel Parallel Studio XE or Intel System Studio. https://software.intel.com/en-us/c-compilers https://software.intel.com/en-us/articles/c17-features-supported-by-intel-c-compiler On top of compilers, you need an infrastructure that helps to build a whole application: build tools, pipelines and package managers. Make Make is a well-known build system widely used, especially in Unix and Unix-like operating systems. Make is typically used to build executable programs and libraries from source code. But the tool applies to any process that involves executing arbitrary commands to transform a source file to a target result. Make is not tight to any particular programming language. It automatically determines which source files has been changed and then performs the minimal build process to get the final output. It also helps with the installation of the results in the system https://www.gnu.org/software/make/ Cmake CMake is a cross-platform tool for managing your build process. Building, especially large apps and with dependent libraries, can be a very complex process, especially when you support multiple compilers; CMake abstracts this. You can define complex build processes in one common language and convert them to native build directives for any number of supported compilers, IDEs, and build tools, including Ninja (below.) There are versions of CMake available for Windows, macOS, and Linux. https://cmake.org/ Note: Heres a good answer about the differences between Make and Cmake: Difference between using Makefile and CMake to compile the code - Stack Overflow. Ninja The Ninja build system is used for the actual process of building apps and is similar to Make. It focuses on running as fast as possible by parallelizing builds. It is commonly used paired with CMake, which supports creating build files for the Ninja build system. The feature set of Ninja is intentionally kept minimal because the focus is on speed. https://ninja-build.org/ Microsoft Build Engine (MSBuild) MSBuild is a command-line based built platform available from Microsoft under an open-source (MIT) license. It can be used to automate the process of compiling and deploying projects. It is available standalone, packaged with Visual Studio, or from Github. The structure and function of MSBuild files is very similar to Make. MSBuild has an XML based file format and mainly has support for Windows but also macOS and Linux. IDEs such as CLion and C++Builder can integrate with MSBuild as well. https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild Conan, Vcpkg, Buckaroo Package managers such as Conan, vcpkg, Buckaroo and NIX have been gaining popularity in the C++ community. A package manager is a tool to install libraries or components. Conan is a decentralized open-source (MIT) package manager that supports multiple platforms and all build systems (such as CMake and MSBuild). Conan supports binaries with a goal of automating dependency management to save time in development and continuous integration. Microsofts vcpkg is open source under an MIT license and supports Windows, macOS, and Linux. Out of the box, it makes installed libraries available in Visual Studio, but it also supports CMake build recipes. It can build libs for every toolchain that can be fitted into CMake. Buckaroo is a lesser-known open-source package manager that can pull dependencies from GitHub, BitBucket, GitLab, and others. Buckaroo offers integrations for a number of IDEs including CLion, Visual Studio Code, XCode, and others. Here are the links for the mentioned package managers: https://conan.io/ https://github.com/microsoft/vcpkg https://buckaroo.pm/ Integrated Development Environments A host of editors and integrated development environments (IDEs) can be used for developing with modern C++. Text editors are typically lightweight, but are less featureful than a full IDE and so are used only for the process of writing code, not debugging or testing it. Full development requires other tools, and an IDE contains those and integrates into a cohesive, integrated development environment. Any number of text editors like Sublime Text, Atom, Visual Studio Code, vi/vim, and Emacs can be used for writing C++ code. However, some IDEs are specifically designed with modern C++ in mind like CLion, Qt Creator, and C++Builder, while IDEs like Xcode and Visual Studio also support other languages. You can also compare various IDE for C++ in this handy table on Wikipedia: Comparison of integrated development environments - C++ - Wikipedia Sublime Text, Atom, And Visual Studio Code The list below summarises a set of advanced source code editors that thanks to various plugins and extensions allow creating applications in almost all programming languages. Sublime Text is a commercial text editor with extended support for modern C++ available via plugins. Atom is an open-source (MIT license) text editor that supports modern C++ via packages with integrations available for debugging and compiling. Visual Studio Code is a popular open-source (MIT license) source-code editor from Microsoft. A wide variety of extensions are available that bring features such as debugging and code completion for modern C++ to Visual Studio Code. Sublime Text, Atom, and Visual Studio Code are all available for Windows, macOS, and Linux. Here are the links for the above tools: https://www.sublimetext.com/ https://atom.io/ https://code.visualstudio.com/ Vi/Vim & Emacs Vi/Vim and Emacs are free command-line based text editors that are mainly used on Linux but are also available for macOS and Windows. Modern C++ support can be added to Vi/Vim through the use of scripts while modern C++ support can be added to Emacs through the use of modules. https://www.vim.org/ https://www.gnu.org/software/emacs/ Clion CLion is a commercial IDE from JetBrains that supports modern C++. It can be used with build tools like CMake and Gradle, integrates with the GDB and LLDB debuggers, can be used with version control systems like Git, test libraries like Boost.Test, and various documentation tools. It has features such as code generation, refactoring, on the fly code analysis, symbol navigation, and more. https://www.jetbrains.com/clion/ Qt Creator Qt Creator is a (non)commercial IDE from The Qt Company which supports Windows, macOS, and Linux. Qt Creator has features such as a UI designer, syntax highlighting, auto-completion, and integration with a number of different modern C++ compilers like GCC and Clang. Qt Creator tightly integrates with the Qt library for rapidly building cross-platform applications. Additionally, it integrates with standard version control systems like Git, debuggers like GDB and LLDB, build systems like CMake, and can deploy cross-platform to iOS and Android devices. https://www.qt.io/ C++Builder C++Builder is a commercial IDE from Embarcadero Technologies which runs on Windows and supports modern C++. It features the award-winning Visual Component Library (VCL) for Windows development and FireMonkey (FMX) for cross-platform development for Windows, iOS and Android. The C++Builder compiler features an enhanced version of Clang, an integrated debugger, visual UI designer, database library, comprehensive RTL, and standard features like syntax highlighting, code completion, and refactoring. C++Builder has integrations for CMake, can be used with Ninja, and also MSBuild. https://www.embarcadero.com/products/cbuilder https://www.embarcadero.com/products/cbuilder/starter Visual Studio Visual C++ is a commercial Visual Studio IDE from Microsoft. Visual Studio integrates building, debugging, and testing within the IDE. It provides the Microsoft Foundation Class (MFC) library which gives access to the Win32 APIs. Visual Studio features a visual UI designer for certain platforms, comes with MSBuild, supports CMake, and provides standard features such as code completion, refactoring, and syntax highlighting. Additionally, Visual Studio supports a number of other programming languages, and the C++ side of it is focused on Windows, with other platforms slowly being added. https://visualstudio.microsoft.com/ Xcode Xcode is a multi-language IDE from Apple available only on macOS that supports modern C++. Xcode is proprietary but available for free from Apple. Xcode has an integrated debugger, supports version control systems like Git, features a Clang compiler, and utilizes libc++ as its standard library. It supports standard features such as syntax highlighting, code completion, and finally, Xcode supports external build systems like CMake and utilizes the LLDB debugger. https://developer.apple.com/xcode/ KDevelop KDevelop (its 0.1 version was released in 1998) is a cross-platform IDE for C, C++, Python, QML/JavaScript and PHP. This IDE is part of the KDE project, and is based on KDE Frameworks and Qt. The C/C++ backend uses Clang and LLVM. It has UI integration with several version control systems: Git, SVN, Bazaar and more, build process based on CMake, QMake or custom makefiles. Among many interesting features, its essential to mention advanced syntax colouring and Context-sensitive, semantic code completion. https://www.kdevelop.org/ https://www.kdevelop.org/features Eclipse CDT IDE The Eclipse C/C++ Development Toolkit (CDT) is a combination of the Eclipse IDE with a C++ toolchain (usually GNU - GCC). This IDE supports project creation and build management for various toolchains, like the standard make build. CDT IDE offers source navigation, various source knowledge tools, such as type hierarchy, call graph, include browser, macro definition browser, code editor with syntax highlighting, folding and hyperlink navigation, source code refactoring and code generation, visual debugging tools, including memory, registers, and disassembly viewers. https://www.eclipse.org/cdt/ Cevelop Cevelop is a powerful IDE based Eclipse CDT. Its main strength lies in the powerful refactoring and static analysis support for code modernization. In addition, it comes with unit testing and TDD support for the CUTE unit testing framework. Whats more, you can easily visualize your template instantiation/function overload resolution and optimize includes. https://www.cevelop.com/ Android Studio Android Studio is the official IDE for Googles Android operating system, built on JetBrains IntelliJ IDEA software and designed specifically for Android development. It is available for download on Windows, macOS and Linux based operating systems. It is a replacement for the Eclipse Android Development Tools (ADT) as the primary IDE for native Android application development. Android Studio focuses mainly on Kotlin but you can also write applications in C++. Oracle Studio Oracle Developer Studio is Oracle Corporations flagship software development product for the Solaris and Linux operating systems. It includes optimizing C, C++, and Fortran compilers, libraries, and performance analysis and debugging tools, for Solaris on SPARC and x86 platforms, and Linux on x86/x64 platforms, including multi-core systems. You can download Developer Studio at no charge but if you want the full support and patch updates, then you need a paid support contract. The C++ Compiler supports C++14. https://www.oracle.com/technetwork/server-storage/developerstudio/overview/index.html https://www.oracle.com/technetwork/server-storage/solarisstudio/features/compilers-2332272.html If you want to check some shorter code samples and you dont want to install the whole compiler/.IDE suite then we have lots of online tools that can make those tests super simple. Just open a web browser and put the code Compiler Explorer is a web-based tool that allows you to select from a wide variety of C++ compilers and different versions of the same compiler to test out your code. This allows developers to compare the generated code for specific C++ constructs among compilers, and test for correct behaviour. Clang, GCC, and MSVC are all there but also lesser-known compilers such as DJGPP, ELLCC, Intel C++, and others. https://godbolt.org/ Extra: Heres a list of handy online compilers that you can use: like Coliru, Wandbox, CppInsighs and more: https://arnemertz.github.io/online-compilers/ Debugging & Testing GDB GDB is a portable command-line based debugging platform that supports modern C++ and is available under an open-source license (GPL). A number of editors and IDEs like Visual Studio, Qt Creator, and CLion support integration with GDB. It can also be used to debug applications remotely where GDB is running on one device, and the application being debugged is running on another device. It supports a number of platforms including Windows, macOS, and Linux. https://www.gnu.org/software/gdb/ LLDB LLDB is an open-source debugging interface that supports modern C++ and integrates with the Clang compiler. It has a number of optional performance-enhancing features such as JIT but also supports debugging memory, multiple threads, and machine code analysis. It is built in C++. LLDB is the default debugger for Xcode and can be used with Visual Studio Code, CLion, and Qt Creator. It supports a number of platforms including Windows, macOS, and Linux. https://lldb.llvm.org/ Debugging Tools For Windows On Windows, you can use several debuggers, ranging from Visual Studio Debugger (integrated and one of the most user-friendly), WinDBG, CDB and several more. WinDbg is a multipurpose debugger for the Microsoft Windows Platform. It can be used to debug user-mode applications, device drivers, and the operating system itself in kernel mode. It has a graphical user interface (GUI) and is more powerful than Visual Studio Debugger. You can debug memory dumps obtained even from kernel drivers. One of the recent exciting features in Debugging on Windows is called Time Travel Debugging (Available in WinDBG Preview and also in Visual Studio Ultimate). It allows you to record the execution of the process and then replay the steps backwards or forwards. This flexibility enables us to easily tracks back the state that caused a bug. https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/ https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-overview Mozillas RR RR is an advanced debugger that aims to replace GDB on Linux. It offers the full state recordings of the application so that you can replay the action backwards and forwards (similarly to Time Travel Debugging). The debugger is used to work with large applications like Chrome, OpenOffice or even Firefox code bases. https://rr-project.org/ CATCH/CATCH2 Catch2 is a cross-platform open-source (BSL-1.0) testing framework for modern C++. It is very lightweight because only a header file needs to be included. Unit tests can be tagged and run in groups. It supports both test-driven development and behaviour-driven development. Catch2 also easily integrates with CLion. https://github.com/catchorg/Catch2 BOOST.TEST Boost.Test is a feature-rich open-source (BSL-1.0) testing framework that utilizes modern C++ standards. It can be used to quickly detect errors, failures, and time outs through customizable logging and real-time monitoring. Tests can be grouped into suites, and the framework supports both small scale testing and large scale testing. https://github.com/boostorg/test GOOGLE TEST Google Test is Googles C++ testing and mocking framework, which is available under an open-source (BSD) license. Google test can be used on a broad range of platforms, including Linux, macOS, Windows, and others. It contains a unit testing framework, assertions, death tests, detects failures, handles parameterized tests, and creates XML test reports. https://github.com/google/googletest CUTE CUTE is a unit testing framework integrated into Cevelop, but it can also be used standalone. It spans C++ versions from c++98 to c++2a and is header-only. While not as popular as Google Test it is less macro-ridden and uses macros only, where no appropriate C++ feature is available. In addition, it features a mode that easily allows it to run on embedded platforms, by sidestepping some of the I/O formatting features. https://cute-test.com/ DocTest DocTest is a single-header unit testing framework. Available for C++11 up to C++20 and is easy to configure and works on probably all platforms. It offers regular TDD testing macros (also with subcases) as well as BDD-style test cases. http://bit.ly/doctest-docs https://github.com/onqtam/doctest Mull Mull is an LLVM-based tool for Mutation Testing with a strong focus on C and C++ languages. In general, it creates many variations of the input source code (using LLVM bytecode) and then checks it against the test cases. Thanks to this advanced testing technique, you can make your code more secure. https://github.com/mull-project/mull PDF: https://lowlevelbits.org/pdfs/Mull_Mutation_2018.pdf Sanitizers AddressSanitizer - https://clang.llvm.org/docs/AddressSanitizer.html (supported in Clang, GCC and XCode) UndefinedBehaviorSanitizer - https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html LeakSanitizer - https://clang.llvm.org/docs/LeakSanitizer.html Application Verifier for Windows - https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/application-verifier Sanitizers are relatively new tools that add extra instrumentation to your application (for example they replace new/malloc/delete calls) and can detect various runtime errors: leaks, use after delete, double free and many others. To improve your build pipeline, many guides advice to add sanitizers steps when doing tests. Most sanitizers come from the LLVM/Clang platform, but now they also work with GCC. Unfortunately not yet with Visual Studio (but you can try Application Verifier). Valgrind Valgrind is an instrumentation framework for building dynamic analysis tools. There are Valgrind tools that can automatically detect many memory management and threading bugs, and profile your programs in detail. When you run a program through Valgrind its run on a virtual machine that emulates your host environment. Having that abstraction the tools can leverage various information about the source code and its execution. http://valgrind.org/ http://valgrind.org/info/about.html http://valgrind.org/docs/manual/quick-start.html HeapTrack HeapTrack is a FOSS project and a heap memory profiler for Linux. It traces all memory allocations and annotates these events with stack traces. The tool has two forms the command line version that grabs the data, and then the UI part that you can use to read and analyze the results. This tool is comparable to Valgrinds massif; its easier to use and should be faster to load and analyze for large projects. https://github.com/KDE/heaptrack Dr. Memory Dr. Memory is an LGPL licenced tool that allows you to monitor and intensify memory -related errors for binaries on Windows, Linux, Mac, Android. Its based on the DynamoRIO dynamic instrumentation tool platform. With the tool, you can find errors like double frees, memory leaks, handle leaks (on Windows), GDI issues, access to uninitialized memory or even errors in multithreading memory scenarios. http://drmemory.org/ https://github.com/DynamoRIO/drmemory Deleaker The primary role of Deleaker is to find leaks in your native applications. It supports Visual Studio (since 2008 till the latest 2019 version), Delphi/C++ Builder, Qt Creator, CLion (soon!). Can be used as an extension in Visual Studio or as a standalone application. Deleaker tracks leaks in C/C++ applications (Native and CLR), plus .NET code. Memory (new/delete, malloc), GDI objects, User32 objects, Handles, File views, Fibres, Critical Sections, and even more. It gathers full call stack, ability to take snapshots, compare them, view source files related to allocation. https://www.deleaker.com/ https://www.deleaker.com/docs/deleaker/tutorial.html Summary & More I hope that with the above list, you get a useful overview of the tools that are essential for C++ development. If you want to read more about other ecosystem elements: libraries, frameworks, and other tools, then please see the full report from Embarcadero: C++ Ecosystem White Paper (Its a nice looking pdf, with more than 20 pages of content!) You might check this Resource for a super long list of tools, libs, frameworks that enhance C++ development: https://github.com/fffaraz/awesome-cpp Your Turn What are your favourite tools that you use when writing C++ apps? "
        ],
        "story_type": "Normal",
        "url_raw": "https://www.bfilipek.com/2019/10/cppecosystem.html",
        "comments.comment_id": [21199733, 21201412],
        "comments.comment_author": ["cmrdporcupine", "Iv"],
        "comments.comment_descendants": [9, 0],
        "comments.comment_time": [
          "2019-10-09T03:27:23Z",
          "2019-10-09T09:10:25Z"
        ],
        "comments.comment_text": [
          "CLion is an amazing tool -- I've purchased licenses for my personal self in the past, but my employer pays for it these days.<p>My problem is they've done a terrible job of making it scale up to large code bases. I work on the chromium tree -- CLion is completely useless on it.  I have a dual 24-core xeon with 128GB of RAM and SSD and I've given it a wackload of memory, and it becomes completely inoperable, freezing all over the place.<p>Awful because I have such muscle memory for the JetBrains tools, and such a fondness for them.<p>I've gone back to using Emacs, but now with Eclim. I just couldn't get into VSCode.",
          "I had to use Qt as the UI lib for a project, it made me discover that QtCreator was actually not a Qt-only tool but a very good lightweight and generic C++ IDE.<p>That's my choice now. I need something that can navigate easily in a code base, I don't really like learning all the oddities around emacs and vim (even though I am a bit competent at vim) and I don't see what is so bad in using a mouse.<p>At first I thought annoying to have to manually edit the .includes and .config to add the includes and the macro I needed in our complex, hard-to-parse CMake based project, but now I really enjoy the freedom it gives."
        ],
        "id": "e1460a46-e683-4942-9aed-7e1292252c1e",
        "url_text": "Table of Contents Introduction Compilers GCC Microsoft Visual C++ Clang Intel C++ Compiler Build Tools & Package Managers Make Cmake Ninja Microsoft Build Engine (MSBuild) Conan, Vcpkg, Buckaroo Integrated Development Environments Sublime Text, Atom, And Visual Studio Code Vi/Vim & Emacs Clion Qt Creator C++Builder Visual Studio Xcode KDevelop Eclipse CDT IDE Cevelop Android Studio Oracle Studio Extra: Compiler Explorer & Online Tools Debugging & Testing GDB LLDB Debugging Tools For Windows Mozillas RR CATCH/CATCH2 BOOST.TEST GOOGLE TEST CUTE DocTest Mull Sanitizers Valgrind HeapTrack Dr. Memory Deleaker Summary & More Your Turn To write a professional C++ application, you not only need a basic text editor and a compiler. You require some more tooling. In this blog post, youll see a broad list of tools that make C++ programming possible: compilers, IDEs, debuggers and other. Last Update: 14th October 2019. Note: This is a blog post based on the White Paper created by Embarcadero, see the full paper here: C++ Ecosystem White Paper. Introduction The C++ computer programming language has become one of the most widely used modern programming languages. Software built with C++ is known for its performance and efficiency. C++ has been used to build numerous vastly popular core libraries, applications such as Microsoft Office, game engines such as Unreal, software tools like Adobe Photoshop, compilers like Clang, databases like MySQL, and even operating systems such as Windows across a wide variety of platforms as it continues to evolve and grow. Modern C++ is generally defined as C++ code that utilizes language features in C++11, C++14, and C++17 based compilers. These are language standards named after the year they were defined (2011, 2014 and 2017 respectively) and include a number of significant additions and enhancements to the original core language for powerful, highly performant, and bug-free code. Modern C++ has high-level features that support object-oriented programming, functional programming, generic programming, and low-level memory manipulation features. Big names in the computer industry such as Microsoft, Intel, the Free Software Foundation, and others have their modern C++ compilers. Companies such as Microsoft, The QT Company, JetBrains, and Embarcadero provide integrated development environments for writing code in modern C++. Popular libraries are available for C++ across a wide range of computer disciplines including Artificial Intelligence, Machine Learning, Robotics, Math, Scientific Computing, Audio Processing, and Image Processing. In this blog post, we are going to cover a number of these compilers, build tools, IDEs, libraries, frameworks, coding assistants, and much more that can support and enhance your development with modern C++. Lets get started! Compilers There are a number of popular compilers that support modern C++ including GCC/g++, MSVC (Microsoft Visual C++), Clang and Intel Compiler. Each compiler has varying support for each of the major operating systems with the open-source GCC/g++ originating in the late 1980s, Microsofts Visual C++ in the early 1990s, and Clang in the late 2000s. All four compilers support modern C++ up to at least C++17, but the source code licenses for each of them vary greatly. GCC GCC is a general-use compiler developed and maintained and regularly updated by the GCC Steering committee as part of the GNU Project. GCC describes a large growing family of compilers targeting many hardware platforms and several languages. While it mainly targets Unix-like platforms, Windows support is provided through the Cygwin or MinGW runtime libraries. GCC compiles modern C++ code up to C++17 with experimental support for some C++20 features. It also compiles with a variety of language extensions that build upon C++ standards. It is free and open-source (GPL3) with the GCC Runtime Library Exception. GCC has support from build tools such as CMake and Ninja and many IDEs such as CLion, Qt Creator, and Visual Studio Code. https://gcc.gnu.org/ https://gcc.gnu.org/projects/cxx-status.html Microsoft Visual C++ Microsoft Visual C++ (MSVC) is Microsofts compiler for their custom implementation of the C++ standard, known as Visual C++. It is regularly updated, and like GCC and Clang, supports modern C++ standards up to C++17 with experimental support for some C++20 features. MSVC is the primary method for building C++ applications in Microsofts own Visual Studio. It generally targets a number of architectures on Windows, Android, iOS, and Linux. Support for build tools and IDEs are limited but growing. CMake extensions are available in Visual Studio 2019. MSVC can be used with Visual Studio Code, with limited support from CLion and Qt Creator with additional extensions. MSVC is proprietary and available under a commercial license, but theres also a Community edition. https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B https://devblogs.microsoft.com/visualstudio/ https://visualstudio.microsoft.com/vs/community/ Clang Clang describes a large family of compilers for the C family of languages maintained and regularly developed as part of the LLVM project. Although it targets many popular architectures, it generally targets fewer platforms than GCC. The LLVM project defines Clang through key design principles - strict adherence to C++ standards (although support for GCC extensions is offered), modular design, and minimal modification to the source codes structure during compilation, to name a few. Like GCC, Clang compiles modern C++ code with support for the C++17 standard with experimental C++20 support. It is available under an open-source (Apache License Version 2.0) license. Clang also has widespread support from build tools such as CMake and Ninja and IDEs such as CLion, Qt Creator, Xcode, and others. https://clang.llvm.org/ https://clang.llvm.org/cxx_status.html Intel C++ Compiler Intel C++ Compiler can generate highly optimized code for various Intel CPUs (including Xeon, Core, and Atom processors). The compiler can seamlessly integrate with popular IDE like Visual Studio, GCC toolchain and others. It can leverage advanced instruction set (even AVX512) and generate parallel code (for example, thanks to OpenMP 5.0 support). Intel doesnt ship the compiler with the Standard Library implementation, so it uses the library you provide on your platform. The compiler is available as a part of Intel Parallel Studio XE or Intel System Studio. https://software.intel.com/en-us/c-compilers https://software.intel.com/en-us/articles/c17-features-supported-by-intel-c-compiler On top of compilers, you need an infrastructure that helps to build a whole application: build tools, pipelines and package managers. Make Make is a well-known build system widely used, especially in Unix and Unix-like operating systems. Make is typically used to build executable programs and libraries from source code. But the tool applies to any process that involves executing arbitrary commands to transform a source file to a target result. Make is not tight to any particular programming language. It automatically determines which source files has been changed and then performs the minimal build process to get the final output. It also helps with the installation of the results in the system https://www.gnu.org/software/make/ Cmake CMake is a cross-platform tool for managing your build process. Building, especially large apps and with dependent libraries, can be a very complex process, especially when you support multiple compilers; CMake abstracts this. You can define complex build processes in one common language and convert them to native build directives for any number of supported compilers, IDEs, and build tools, including Ninja (below.) There are versions of CMake available for Windows, macOS, and Linux. https://cmake.org/ Note: Heres a good answer about the differences between Make and Cmake: Difference between using Makefile and CMake to compile the code - Stack Overflow. Ninja The Ninja build system is used for the actual process of building apps and is similar to Make. It focuses on running as fast as possible by parallelizing builds. It is commonly used paired with CMake, which supports creating build files for the Ninja build system. The feature set of Ninja is intentionally kept minimal because the focus is on speed. https://ninja-build.org/ Microsoft Build Engine (MSBuild) MSBuild is a command-line based built platform available from Microsoft under an open-source (MIT) license. It can be used to automate the process of compiling and deploying projects. It is available standalone, packaged with Visual Studio, or from Github. The structure and function of MSBuild files is very similar to Make. MSBuild has an XML based file format and mainly has support for Windows but also macOS and Linux. IDEs such as CLion and C++Builder can integrate with MSBuild as well. https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild Conan, Vcpkg, Buckaroo Package managers such as Conan, vcpkg, Buckaroo and NIX have been gaining popularity in the C++ community. A package manager is a tool to install libraries or components. Conan is a decentralized open-source (MIT) package manager that supports multiple platforms and all build systems (such as CMake and MSBuild). Conan supports binaries with a goal of automating dependency management to save time in development and continuous integration. Microsofts vcpkg is open source under an MIT license and supports Windows, macOS, and Linux. Out of the box, it makes installed libraries available in Visual Studio, but it also supports CMake build recipes. It can build libs for every toolchain that can be fitted into CMake. Buckaroo is a lesser-known open-source package manager that can pull dependencies from GitHub, BitBucket, GitLab, and others. Buckaroo offers integrations for a number of IDEs including CLion, Visual Studio Code, XCode, and others. Here are the links for the mentioned package managers: https://conan.io/ https://github.com/microsoft/vcpkg https://buckaroo.pm/ Integrated Development Environments A host of editors and integrated development environments (IDEs) can be used for developing with modern C++. Text editors are typically lightweight, but are less featureful than a full IDE and so are used only for the process of writing code, not debugging or testing it. Full development requires other tools, and an IDE contains those and integrates into a cohesive, integrated development environment. Any number of text editors like Sublime Text, Atom, Visual Studio Code, vi/vim, and Emacs can be used for writing C++ code. However, some IDEs are specifically designed with modern C++ in mind like CLion, Qt Creator, and C++Builder, while IDEs like Xcode and Visual Studio also support other languages. You can also compare various IDE for C++ in this handy table on Wikipedia: Comparison of integrated development environments - C++ - Wikipedia Sublime Text, Atom, And Visual Studio Code The list below summarises a set of advanced source code editors that thanks to various plugins and extensions allow creating applications in almost all programming languages. Sublime Text is a commercial text editor with extended support for modern C++ available via plugins. Atom is an open-source (MIT license) text editor that supports modern C++ via packages with integrations available for debugging and compiling. Visual Studio Code is a popular open-source (MIT license) source-code editor from Microsoft. A wide variety of extensions are available that bring features such as debugging and code completion for modern C++ to Visual Studio Code. Sublime Text, Atom, and Visual Studio Code are all available for Windows, macOS, and Linux. Here are the links for the above tools: https://www.sublimetext.com/ https://atom.io/ https://code.visualstudio.com/ Vi/Vim & Emacs Vi/Vim and Emacs are free command-line based text editors that are mainly used on Linux but are also available for macOS and Windows. Modern C++ support can be added to Vi/Vim through the use of scripts while modern C++ support can be added to Emacs through the use of modules. https://www.vim.org/ https://www.gnu.org/software/emacs/ Clion CLion is a commercial IDE from JetBrains that supports modern C++. It can be used with build tools like CMake and Gradle, integrates with the GDB and LLDB debuggers, can be used with version control systems like Git, test libraries like Boost.Test, and various documentation tools. It has features such as code generation, refactoring, on the fly code analysis, symbol navigation, and more. https://www.jetbrains.com/clion/ Qt Creator Qt Creator is a (non)commercial IDE from The Qt Company which supports Windows, macOS, and Linux. Qt Creator has features such as a UI designer, syntax highlighting, auto-completion, and integration with a number of different modern C++ compilers like GCC and Clang. Qt Creator tightly integrates with the Qt library for rapidly building cross-platform applications. Additionally, it integrates with standard version control systems like Git, debuggers like GDB and LLDB, build systems like CMake, and can deploy cross-platform to iOS and Android devices. https://www.qt.io/ C++Builder C++Builder is a commercial IDE from Embarcadero Technologies which runs on Windows and supports modern C++. It features the award-winning Visual Component Library (VCL) for Windows development and FireMonkey (FMX) for cross-platform development for Windows, iOS and Android. The C++Builder compiler features an enhanced version of Clang, an integrated debugger, visual UI designer, database library, comprehensive RTL, and standard features like syntax highlighting, code completion, and refactoring. C++Builder has integrations for CMake, can be used with Ninja, and also MSBuild. https://www.embarcadero.com/products/cbuilder https://www.embarcadero.com/products/cbuilder/starter Visual Studio Visual C++ is a commercial Visual Studio IDE from Microsoft. Visual Studio integrates building, debugging, and testing within the IDE. It provides the Microsoft Foundation Class (MFC) library which gives access to the Win32 APIs. Visual Studio features a visual UI designer for certain platforms, comes with MSBuild, supports CMake, and provides standard features such as code completion, refactoring, and syntax highlighting. Additionally, Visual Studio supports a number of other programming languages, and the C++ side of it is focused on Windows, with other platforms slowly being added. https://visualstudio.microsoft.com/ Xcode Xcode is a multi-language IDE from Apple available only on macOS that supports modern C++. Xcode is proprietary but available for free from Apple. Xcode has an integrated debugger, supports version control systems like Git, features a Clang compiler, and utilizes libc++ as its standard library. It supports standard features such as syntax highlighting, code completion, and finally, Xcode supports external build systems like CMake and utilizes the LLDB debugger. https://developer.apple.com/xcode/ KDevelop KDevelop (its 0.1 version was released in 1998) is a cross-platform IDE for C, C++, Python, QML/JavaScript and PHP. This IDE is part of the KDE project, and is based on KDE Frameworks and Qt. The C/C++ backend uses Clang and LLVM. It has UI integration with several version control systems: Git, SVN, Bazaar and more, build process based on CMake, QMake or custom makefiles. Among many interesting features, its essential to mention advanced syntax colouring and Context-sensitive, semantic code completion. https://www.kdevelop.org/ https://www.kdevelop.org/features Eclipse CDT IDE The Eclipse C/C++ Development Toolkit (CDT) is a combination of the Eclipse IDE with a C++ toolchain (usually GNU - GCC). This IDE supports project creation and build management for various toolchains, like the standard make build. CDT IDE offers source navigation, various source knowledge tools, such as type hierarchy, call graph, include browser, macro definition browser, code editor with syntax highlighting, folding and hyperlink navigation, source code refactoring and code generation, visual debugging tools, including memory, registers, and disassembly viewers. https://www.eclipse.org/cdt/ Cevelop Cevelop is a powerful IDE based Eclipse CDT. Its main strength lies in the powerful refactoring and static analysis support for code modernization. In addition, it comes with unit testing and TDD support for the CUTE unit testing framework. Whats more, you can easily visualize your template instantiation/function overload resolution and optimize includes. https://www.cevelop.com/ Android Studio Android Studio is the official IDE for Googles Android operating system, built on JetBrains IntelliJ IDEA software and designed specifically for Android development. It is available for download on Windows, macOS and Linux based operating systems. It is a replacement for the Eclipse Android Development Tools (ADT) as the primary IDE for native Android application development. Android Studio focuses mainly on Kotlin but you can also write applications in C++. Oracle Studio Oracle Developer Studio is Oracle Corporations flagship software development product for the Solaris and Linux operating systems. It includes optimizing C, C++, and Fortran compilers, libraries, and performance analysis and debugging tools, for Solaris on SPARC and x86 platforms, and Linux on x86/x64 platforms, including multi-core systems. You can download Developer Studio at no charge but if you want the full support and patch updates, then you need a paid support contract. The C++ Compiler supports C++14. https://www.oracle.com/technetwork/server-storage/developerstudio/overview/index.html https://www.oracle.com/technetwork/server-storage/solarisstudio/features/compilers-2332272.html If you want to check some shorter code samples and you dont want to install the whole compiler/.IDE suite then we have lots of online tools that can make those tests super simple. Just open a web browser and put the code Compiler Explorer is a web-based tool that allows you to select from a wide variety of C++ compilers and different versions of the same compiler to test out your code. This allows developers to compare the generated code for specific C++ constructs among compilers, and test for correct behaviour. Clang, GCC, and MSVC are all there but also lesser-known compilers such as DJGPP, ELLCC, Intel C++, and others. https://godbolt.org/ Extra: Heres a list of handy online compilers that you can use: like Coliru, Wandbox, CppInsighs and more: https://arnemertz.github.io/online-compilers/ Debugging & Testing GDB GDB is a portable command-line based debugging platform that supports modern C++ and is available under an open-source license (GPL). A number of editors and IDEs like Visual Studio, Qt Creator, and CLion support integration with GDB. It can also be used to debug applications remotely where GDB is running on one device, and the application being debugged is running on another device. It supports a number of platforms including Windows, macOS, and Linux. https://www.gnu.org/software/gdb/ LLDB LLDB is an open-source debugging interface that supports modern C++ and integrates with the Clang compiler. It has a number of optional performance-enhancing features such as JIT but also supports debugging memory, multiple threads, and machine code analysis. It is built in C++. LLDB is the default debugger for Xcode and can be used with Visual Studio Code, CLion, and Qt Creator. It supports a number of platforms including Windows, macOS, and Linux. https://lldb.llvm.org/ Debugging Tools For Windows On Windows, you can use several debuggers, ranging from Visual Studio Debugger (integrated and one of the most user-friendly), WinDBG, CDB and several more. WinDbg is a multipurpose debugger for the Microsoft Windows Platform. It can be used to debug user-mode applications, device drivers, and the operating system itself in kernel mode. It has a graphical user interface (GUI) and is more powerful than Visual Studio Debugger. You can debug memory dumps obtained even from kernel drivers. One of the recent exciting features in Debugging on Windows is called Time Travel Debugging (Available in WinDBG Preview and also in Visual Studio Ultimate). It allows you to record the execution of the process and then replay the steps backwards or forwards. This flexibility enables us to easily tracks back the state that caused a bug. https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/ https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-overview Mozillas RR RR is an advanced debugger that aims to replace GDB on Linux. It offers the full state recordings of the application so that you can replay the action backwards and forwards (similarly to Time Travel Debugging). The debugger is used to work with large applications like Chrome, OpenOffice or even Firefox code bases. https://rr-project.org/ CATCH/CATCH2 Catch2 is a cross-platform open-source (BSL-1.0) testing framework for modern C++. It is very lightweight because only a header file needs to be included. Unit tests can be tagged and run in groups. It supports both test-driven development and behaviour-driven development. Catch2 also easily integrates with CLion. https://github.com/catchorg/Catch2 BOOST.TEST Boost.Test is a feature-rich open-source (BSL-1.0) testing framework that utilizes modern C++ standards. It can be used to quickly detect errors, failures, and time outs through customizable logging and real-time monitoring. Tests can be grouped into suites, and the framework supports both small scale testing and large scale testing. https://github.com/boostorg/test GOOGLE TEST Google Test is Googles C++ testing and mocking framework, which is available under an open-source (BSD) license. Google test can be used on a broad range of platforms, including Linux, macOS, Windows, and others. It contains a unit testing framework, assertions, death tests, detects failures, handles parameterized tests, and creates XML test reports. https://github.com/google/googletest CUTE CUTE is a unit testing framework integrated into Cevelop, but it can also be used standalone. It spans C++ versions from c++98 to c++2a and is header-only. While not as popular as Google Test it is less macro-ridden and uses macros only, where no appropriate C++ feature is available. In addition, it features a mode that easily allows it to run on embedded platforms, by sidestepping some of the I/O formatting features. https://cute-test.com/ DocTest DocTest is a single-header unit testing framework. Available for C++11 up to C++20 and is easy to configure and works on probably all platforms. It offers regular TDD testing macros (also with subcases) as well as BDD-style test cases. http://bit.ly/doctest-docs https://github.com/onqtam/doctest Mull Mull is an LLVM-based tool for Mutation Testing with a strong focus on C and C++ languages. In general, it creates many variations of the input source code (using LLVM bytecode) and then checks it against the test cases. Thanks to this advanced testing technique, you can make your code more secure. https://github.com/mull-project/mull PDF: https://lowlevelbits.org/pdfs/Mull_Mutation_2018.pdf Sanitizers AddressSanitizer - https://clang.llvm.org/docs/AddressSanitizer.html (supported in Clang, GCC and XCode) UndefinedBehaviorSanitizer - https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html LeakSanitizer - https://clang.llvm.org/docs/LeakSanitizer.html Application Verifier for Windows - https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/application-verifier Sanitizers are relatively new tools that add extra instrumentation to your application (for example they replace new/malloc/delete calls) and can detect various runtime errors: leaks, use after delete, double free and many others. To improve your build pipeline, many guides advice to add sanitizers steps when doing tests. Most sanitizers come from the LLVM/Clang platform, but now they also work with GCC. Unfortunately not yet with Visual Studio (but you can try Application Verifier). Valgrind Valgrind is an instrumentation framework for building dynamic analysis tools. There are Valgrind tools that can automatically detect many memory management and threading bugs, and profile your programs in detail. When you run a program through Valgrind its run on a virtual machine that emulates your host environment. Having that abstraction the tools can leverage various information about the source code and its execution. http://valgrind.org/ http://valgrind.org/info/about.html http://valgrind.org/docs/manual/quick-start.html HeapTrack HeapTrack is a FOSS project and a heap memory profiler for Linux. It traces all memory allocations and annotates these events with stack traces. The tool has two forms the command line version that grabs the data, and then the UI part that you can use to read and analyze the results. This tool is comparable to Valgrinds massif; its easier to use and should be faster to load and analyze for large projects. https://github.com/KDE/heaptrack Dr. Memory Dr. Memory is an LGPL licenced tool that allows you to monitor and intensify memory -related errors for binaries on Windows, Linux, Mac, Android. Its based on the DynamoRIO dynamic instrumentation tool platform. With the tool, you can find errors like double frees, memory leaks, handle leaks (on Windows), GDI issues, access to uninitialized memory or even errors in multithreading memory scenarios. http://drmemory.org/ https://github.com/DynamoRIO/drmemory Deleaker The primary role of Deleaker is to find leaks in your native applications. It supports Visual Studio (since 2008 till the latest 2019 version), Delphi/C++ Builder, Qt Creator, CLion (soon!). Can be used as an extension in Visual Studio or as a standalone application. Deleaker tracks leaks in C/C++ applications (Native and CLR), plus .NET code. Memory (new/delete, malloc), GDI objects, User32 objects, Handles, File views, Fibres, Critical Sections, and even more. It gathers full call stack, ability to take snapshots, compare them, view source files related to allocation. https://www.deleaker.com/ https://www.deleaker.com/docs/deleaker/tutorial.html Summary & More I hope that with the above list, you get a useful overview of the tools that are essential for C++ development. If you want to read more about other ecosystem elements: libraries, frameworks, and other tools, then please see the full report from Embarcadero: C++ Ecosystem White Paper (Its a nice looking pdf, with more than 20 pages of content!) You might check this Resource for a super long list of tools, libs, frameworks that enhance C++ development: https://github.com/fffaraz/awesome-cpp Your Turn What are your favourite tools that you use when writing C++ apps? ",
        "_version_": 1718536530733039616
      },
      {
        "story_id": 18854644,
        "story_author": "severine",
        "story_descendants": 1,
        "story_score": 25,
        "story_time": "2019-01-08T10:41:22Z",
        "story_title": "KDE is considering a migration to GitLab",
        "search": [
          "KDE is considering a migration to GitLab",
          "https://gitlab.com/gitlab-org/gitlab-ce/issues/53206",
          "Background KDE is considering a migration to GitLab: members from the KDE Board of Directors, the KDE Sysadmin team and the KDE Onboarding Initiative have been following the GNOME migration as a model and have been in touch with the GNOME Foundation and GitLab. GitLab will be initially assisting them with a Proof of Concept to facilitate making an assessment and a decision that will ultimately be consulted with the KDE community. The KDE Community is a free software community dedicated to creating an open and user-friendly computing experience, offering an advanced graphical desktop, a wide variety of applications for communication, work, education and entertainment and a platform to easily build new applications upon. We have a strong focus on finding innovative solutions to old and new problems, creating a vibrant atmosphere open for experimentation. Goals The main goals for a successful migration would be: More accessible infrastructure for contributors Code review integration with git Streamlined infrastructure and tooling Good relationship and open communication channel with upstream (GitLab in this case) Migration issues tracker KDE keeps a list of issues with priorities relevant to the migration at https://gitlab.com/gitlab-org/gitlab-ce/issues/57338 Discussion We are at the initial stages of discussion, which can be followed on the notes from our regular calls. KDE is currently looking at a self-hosted solution rather than hosting at gitlab.com. Due to their policy of only hosting Free Software on their servers the present consideration is to use gitlab-ce with the Core subscription Current KDE tooling and infrastructure Gitolite Authentication and Authorization (some repositories are push restricted) Repository management Custom hooks providing notifications via email and IRC, as well as updating statuses of tasks and bugs on Phabricator and Bugzilla Phabricator Code and asset reviews Task tracking Kanban boards Wikis Bugzilla Bug reports Automated crash reports LDAP-based SSI + management Web UI Jenkins CI: Linux, FreeBSD, Windows, Android CD: Linux (Appimage & Flatpak), Windows, MacOS and Android GitLab replacements Tool Feature GitLab feature GitLab edition Gitolite Authentication LDAP and Omniauth CE Gitolite Repository management Gitaly CE Gitolite Notification (E-Mail) E-mail notification CE Gitolite Notification (IRC). Important. TBD TBC Gitolite Set ticket status IssuesSee Closing issues and quick actions CE Phabricator Code review Discussions CE Phabricator Asset reviews (additional tool in Phabricator - Pholio) Image discussionsAlso see issue #53587 CE Phabricator Task-tracking Time tracking CE Phabricator Kanban boards Issue boards CE Bugzilla Bug reports Issues CE Bugzilla Automated crash reports (not trivial to move out of Bugzilla) Issues or an external tool CE KDE identity LDAP-based SSI (SSH key management) SSH management on GitLab or syncing keys to GitLab CE KDE identity Web UI (keep for more user-facing resources, e.g. Forum) N/A? N/A? Jenkins CI: Linux, FreeBSD, Windows, Android GitLab CI or APIJenkins plugin is EE-only CE Jenkins CD: Linux (Appimage & FlatPak), Windows, MacOS and Android GitLab CI or APIJenkins plugin is EE-only CE Test instance https://invent.kde.org/kde/ Collaborators Eike Hein (@hein), Treasurer and Vice President, Board of Directors, KDE Aleix Pol (@apol), Vice President, Board of Directors, KDE Ben Cooksley (@bcooksley), Lead Sysadmin, KDE Neofytos Kolokotronis (@tetris4), Onboarding Team Lead, KDE David Planella (@dplanella), Director of Community Relations, GitLab "
        ],
        "story_type": "Normal",
        "url_raw": "https://gitlab.com/gitlab-org/gitlab-ce/issues/53206",
        "url_text": "Background KDE is considering a migration to GitLab: members from the KDE Board of Directors, the KDE Sysadmin team and the KDE Onboarding Initiative have been following the GNOME migration as a model and have been in touch with the GNOME Foundation and GitLab. GitLab will be initially assisting them with a Proof of Concept to facilitate making an assessment and a decision that will ultimately be consulted with the KDE community. The KDE Community is a free software community dedicated to creating an open and user-friendly computing experience, offering an advanced graphical desktop, a wide variety of applications for communication, work, education and entertainment and a platform to easily build new applications upon. We have a strong focus on finding innovative solutions to old and new problems, creating a vibrant atmosphere open for experimentation. Goals The main goals for a successful migration would be: More accessible infrastructure for contributors Code review integration with git Streamlined infrastructure and tooling Good relationship and open communication channel with upstream (GitLab in this case) Migration issues tracker KDE keeps a list of issues with priorities relevant to the migration at https://gitlab.com/gitlab-org/gitlab-ce/issues/57338 Discussion We are at the initial stages of discussion, which can be followed on the notes from our regular calls. KDE is currently looking at a self-hosted solution rather than hosting at gitlab.com. Due to their policy of only hosting Free Software on their servers the present consideration is to use gitlab-ce with the Core subscription Current KDE tooling and infrastructure Gitolite Authentication and Authorization (some repositories are push restricted) Repository management Custom hooks providing notifications via email and IRC, as well as updating statuses of tasks and bugs on Phabricator and Bugzilla Phabricator Code and asset reviews Task tracking Kanban boards Wikis Bugzilla Bug reports Automated crash reports LDAP-based SSI + management Web UI Jenkins CI: Linux, FreeBSD, Windows, Android CD: Linux (Appimage & Flatpak), Windows, MacOS and Android GitLab replacements Tool Feature GitLab feature GitLab edition Gitolite Authentication LDAP and Omniauth CE Gitolite Repository management Gitaly CE Gitolite Notification (E-Mail) E-mail notification CE Gitolite Notification (IRC). Important. TBD TBC Gitolite Set ticket status IssuesSee Closing issues and quick actions CE Phabricator Code review Discussions CE Phabricator Asset reviews (additional tool in Phabricator - Pholio) Image discussionsAlso see issue #53587 CE Phabricator Task-tracking Time tracking CE Phabricator Kanban boards Issue boards CE Bugzilla Bug reports Issues CE Bugzilla Automated crash reports (not trivial to move out of Bugzilla) Issues or an external tool CE KDE identity LDAP-based SSI (SSH key management) SSH management on GitLab or syncing keys to GitLab CE KDE identity Web UI (keep for more user-facing resources, e.g. Forum) N/A? N/A? Jenkins CI: Linux, FreeBSD, Windows, Android GitLab CI or APIJenkins plugin is EE-only CE Jenkins CD: Linux (Appimage & FlatPak), Windows, MacOS and Android GitLab CI or APIJenkins plugin is EE-only CE Test instance https://invent.kde.org/kde/ Collaborators Eike Hein (@hein), Treasurer and Vice President, Board of Directors, KDE Aleix Pol (@apol), Vice President, Board of Directors, KDE Ben Cooksley (@bcooksley), Lead Sysadmin, KDE Neofytos Kolokotronis (@tetris4), Onboarding Team Lead, KDE David Planella (@dplanella), Director of Community Relations, GitLab ",
        "comments.comment_id": [18868066],
        "comments.comment_author": ["s_chaudhary"],
        "comments.comment_descendants": [0],
        "comments.comment_time": ["2019-01-09T19:41:40Z"],
        "comments.comment_text": ["Looking forward to this"],
        "id": "090fbde3-023d-483b-9961-9b1aeacbeb1e",
        "_version_": 1718536435368198144
      },
      {
        "story_id": 18896422,
        "story_author": "tosh",
        "story_descendants": 12,
        "story_score": 54,
        "story_time": "2019-01-13T12:31:44Z",
        "story_title": "Awesome Dotfiles",
        "search": [
          "Awesome Dotfiles",
          "https://github.com/webpro/awesome-dotfiles",
          "Awesome dotfiles A curated list of dotfiles resources. Inspired by the awesome list thing. Note that some articles or tools may look old or old-fashioned, but this usually means they're battle-tested and mature (like dotfiles themselves). Feel free to propose new articles, projects or tools! Articles Introductions Getting started with dotfiles (L. Kappert) Getting started with dotfiles (D. Vints) Managing your dotfiles Dotfiles Are Meant to Be Forked Dotfile discovery I do Dotfiles! Tutorials Setting up a new (OS X) development machine: Part 3 - Dotfiles and custom SSH config Setting Up a Mac Dev Machine From Zero to Hero With Dotfiles; Part 2 Using Git and GitHub to manage your dotfiles conf.d like directories for zsh/bash dotfiles Managing your dotfiles The best way to store your dotfiles: A bare Git repository Shell startup Shell startup scripts Zsh/Bash startup files loading order Using specific tools Using GNU Stow to manage your dotfiles Managing Dotfile Symlinks with GNU Stow Dotfiles and dev tools provisioned by Ansible Manage a development machine with Ansible Find dotfiles repos There are many great dotfiles repos out there, each containing their own inspiration and gems. One way to go through them is to search GitHub for \"dotfiles\". Also see: Google for \"dotfiles\" Archlinux collection Tip: search for a filename on GitHub, e.g. in:path .gitconfig. Example dotfiles repos A collection of the most popular, well-maintained, and collaborative dotfiles repositories & frameworks. Some projects contain just the dotfiles. Others go further by allowing you to easily add your own custom dotfiles, and some include scripts to manage dotfiles and plugins. Bash Title Description Focus Bash it Community bash framework. Autocompletion, themes, aliases, custom functions. Well-structured framework. Mathiass dotfiles Sensible hacker defaults for macOS Lots of goodness here, great collaborative community effort. Maximum Awesome Config files for vim and tmux Vim, tmux. Built for Mac OS X. webpro's dotfiles macOS dotfiles Bash, Homebrew, Brew Cask, Git, Node.js, Hammerspoon. rootbeersoup's dotfiles Effortless Bash, Vim and macOS configuration A curl | sh installer and a Makefile offer portable and effortless setup for either permanent or temporary configuration. Luke's voidrice Arch linux dotfile bootstrap Bloatless, often suckless software. Vim config for editing documents in markdown or latex Zsh Title Description Focus thoughtbot dotfiles Set of vim, zsh, git, and tmux configuration files Zsh, vim, tmux, git, homebrew. Uses rcm. oh-my-zsh Community-driven framework for managing your zsh configuration. Includes 200+ optional plugins (rails, git, OSX, hub, capistrano, brew, ant, php, python, etc), over 140 themes to spice up your morning, and an auto-update tool. Prezto The configuration framework for Zsh. Enriches the command line interface environment with sane defaults, aliases, functions, auto completion, and prompt themes. YADR The best vim, git, zsh plugins and the cleanest vimrc you've ever seen Homebrew, zsh, git, vim, and more. Active repository. antigen Plugin manager for zsh, inspired by oh-my-zsh and vundle. Antigen is a small set of functions that help you easily manage your shell (zsh) plugins. Antigen is to zsh, what Vundle is to vim. Dries's dotfiles Simplified approach to dotfiles for macOS Zsh, Oh My Zsh, macOS, Homebrew, Mackup sobolevn's dotfiles Dotfiles for the developer happiness Zsh, Brew, Sublime, Python, Node, Elixir Fish Title Description Focus oh-my-fish Community Fish framework. Includes many plugins and themes, with installation, auto-update, and scaffolding tools. Paul's dotfiles Abundant dotfiles with a plethora of cool custom functions Fish, macOS, Homebrew, Custom Shell functions rkalis's dotfiles Well-maintained dotfiles featuring Fish, repository management and Hammerspoon Fish, macOS, Homebrew, Repository management, Hammerspoon Ansible Title Description Focus .dots New and upgraded dotfiles, now with Ansible! Completely automated desktop setup, configuration and maintenance using Ansible sloria's dotfiles sloria's dotfiles as Ansible roles Sets up a full local development environment with a single command Tools Ansible - Radically simple configuration-management, application deployment, task-execution, and multinode orchestration engine. bashdot - Minimalist dotfile management framework written entirely in bash. chezmoi - Manage your dotfiles securely across multiple machines. comtrya - Configuration management for localhost, written in Rust, for Linux, BSD, macOS, and Windows dotbare - Manage dotfiles interactively with fzf. dotbot - Tool that bootstraps your dotfiles. dotdrop - Save your dotfiles once, deploy them everywhere. dotstow - Manage dotfiles with stow. emplace - Synchronize installed packages on multiple machines using a dotfiles repository. Fisher - A package manager for Fish fresh - Keep your dotfiles fresh. Fresh is a tool to source shell configuration (aliases, functions, etc) from others into your own configuration files. GNU Stow - Symlink farm manager which takes distinct packages of software and/or data located in separate directories on the filesystem, and makes them appear to be installed in the same place. homeshick - Git dotfile synchronizer written in Bash. homesick - Your home directory is your castle. Don't leave your dotfiles behind (article). mackup - Keep your application settings in sync (OS X/Linux). Pearl - Package manager that allows to control, sync, share dotfiles as packages automatically activated during shells or editors startup. There is a wide range of packages already available in the Official Pearl Hub (for Linux and OSX). rcm - rc file (dotfile) management. themer - Manage and generate themes across your development tools from within your dotfiles. toml-bombadil - Templatize and manage your dotfiles. yadm - Tool for managing a collection of files across multiple computers, using a shared Git repository and some additional features. macOS dockutil - Command line tool for managing dock items mas - Mac App Store command line interface zero - Radically simple personal bootstrapping tool for macOS. Miscellaneous dotfiles.github.io - Your unofficial guide to dotfiles on GitHub. OS X Defaults - Centralized place for the awesome work started by @mathiasbynens on .macos. Filesystem Hierarchy Standard - Directory structure and directory contents in Linux distributions. XDG Base Directory Specification - Summary A lesson in shortcuts - How the idea of \"hidden\" or \"dot\" files was born, by Rob Pike (originally posted on Google+) Related Lists Awesome Dev Env - Curated list of awesome tools, resources and workflow tips making an awesome development environment. Awesome Fish - Curated list of packages, prompts, and resources for the fish shell. Awesome Shell - Curated list of awesome command-line frameworks, toolkits, guides and gizmos. Awesome Sysadmin - A curated list of amazingly awesome open source sysadmin resources. Awesome Zsh Plugins - List of Zsh plugins suitable for use with oh-my-zsh, antigen & Prezto. Terminals Are Sexy - A curated list of Terminal frameworks, plugins & resources for CLI lovers. Archive/abandoned projects Bashstrap battleschool Bork Cider dev-setup dotfiles Eduardo's dotfiles ellipsis holman does dotfiles Kevin's dotfiles kody osxc vcsh (article, article) License To the extent possible under law, Lars Kappert has waived all copyright and related or neighboring rights to this work. "
        ],
        "story_type": "Normal",
        "url_raw": "https://github.com/webpro/awesome-dotfiles",
        "comments.comment_id": [18898081, 18898412],
        "comments.comment_author": ["anschwa", "blakesterz"],
        "comments.comment_descendants": [3, 1],
        "comments.comment_time": [
          "2019-01-13T18:59:57Z",
          "2019-01-13T20:12:20Z"
        ],
        "comments.comment_text": [
          "The best way I've found to organize dotfiles is to simply use a bare git repo.<p>> git init --bare $HOME/.dotfiles`<p>> alias dot=\"git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME\"<p>> dot config --local status.showUntrackedFiles no",
          "I have a totally awesome .bash_aliases file! I've taken all the best things I've seen from all the best .bash_aliases files around the web. I bet it's like 1000 lines long.<p>I can remember about 10 of the things I have in there."
        ],
        "id": "71c3fd85-b00e-4729-b702-017cdb95ae17",
        "url_text": "Awesome dotfiles A curated list of dotfiles resources. Inspired by the awesome list thing. Note that some articles or tools may look old or old-fashioned, but this usually means they're battle-tested and mature (like dotfiles themselves). Feel free to propose new articles, projects or tools! Articles Introductions Getting started with dotfiles (L. Kappert) Getting started with dotfiles (D. Vints) Managing your dotfiles Dotfiles Are Meant to Be Forked Dotfile discovery I do Dotfiles! Tutorials Setting up a new (OS X) development machine: Part 3 - Dotfiles and custom SSH config Setting Up a Mac Dev Machine From Zero to Hero With Dotfiles; Part 2 Using Git and GitHub to manage your dotfiles conf.d like directories for zsh/bash dotfiles Managing your dotfiles The best way to store your dotfiles: A bare Git repository Shell startup Shell startup scripts Zsh/Bash startup files loading order Using specific tools Using GNU Stow to manage your dotfiles Managing Dotfile Symlinks with GNU Stow Dotfiles and dev tools provisioned by Ansible Manage a development machine with Ansible Find dotfiles repos There are many great dotfiles repos out there, each containing their own inspiration and gems. One way to go through them is to search GitHub for \"dotfiles\". Also see: Google for \"dotfiles\" Archlinux collection Tip: search for a filename on GitHub, e.g. in:path .gitconfig. Example dotfiles repos A collection of the most popular, well-maintained, and collaborative dotfiles repositories & frameworks. Some projects contain just the dotfiles. Others go further by allowing you to easily add your own custom dotfiles, and some include scripts to manage dotfiles and plugins. Bash Title Description Focus Bash it Community bash framework. Autocompletion, themes, aliases, custom functions. Well-structured framework. Mathiass dotfiles Sensible hacker defaults for macOS Lots of goodness here, great collaborative community effort. Maximum Awesome Config files for vim and tmux Vim, tmux. Built for Mac OS X. webpro's dotfiles macOS dotfiles Bash, Homebrew, Brew Cask, Git, Node.js, Hammerspoon. rootbeersoup's dotfiles Effortless Bash, Vim and macOS configuration A curl | sh installer and a Makefile offer portable and effortless setup for either permanent or temporary configuration. Luke's voidrice Arch linux dotfile bootstrap Bloatless, often suckless software. Vim config for editing documents in markdown or latex Zsh Title Description Focus thoughtbot dotfiles Set of vim, zsh, git, and tmux configuration files Zsh, vim, tmux, git, homebrew. Uses rcm. oh-my-zsh Community-driven framework for managing your zsh configuration. Includes 200+ optional plugins (rails, git, OSX, hub, capistrano, brew, ant, php, python, etc), over 140 themes to spice up your morning, and an auto-update tool. Prezto The configuration framework for Zsh. Enriches the command line interface environment with sane defaults, aliases, functions, auto completion, and prompt themes. YADR The best vim, git, zsh plugins and the cleanest vimrc you've ever seen Homebrew, zsh, git, vim, and more. Active repository. antigen Plugin manager for zsh, inspired by oh-my-zsh and vundle. Antigen is a small set of functions that help you easily manage your shell (zsh) plugins. Antigen is to zsh, what Vundle is to vim. Dries's dotfiles Simplified approach to dotfiles for macOS Zsh, Oh My Zsh, macOS, Homebrew, Mackup sobolevn's dotfiles Dotfiles for the developer happiness Zsh, Brew, Sublime, Python, Node, Elixir Fish Title Description Focus oh-my-fish Community Fish framework. Includes many plugins and themes, with installation, auto-update, and scaffolding tools. Paul's dotfiles Abundant dotfiles with a plethora of cool custom functions Fish, macOS, Homebrew, Custom Shell functions rkalis's dotfiles Well-maintained dotfiles featuring Fish, repository management and Hammerspoon Fish, macOS, Homebrew, Repository management, Hammerspoon Ansible Title Description Focus .dots New and upgraded dotfiles, now with Ansible! Completely automated desktop setup, configuration and maintenance using Ansible sloria's dotfiles sloria's dotfiles as Ansible roles Sets up a full local development environment with a single command Tools Ansible - Radically simple configuration-management, application deployment, task-execution, and multinode orchestration engine. bashdot - Minimalist dotfile management framework written entirely in bash. chezmoi - Manage your dotfiles securely across multiple machines. comtrya - Configuration management for localhost, written in Rust, for Linux, BSD, macOS, and Windows dotbare - Manage dotfiles interactively with fzf. dotbot - Tool that bootstraps your dotfiles. dotdrop - Save your dotfiles once, deploy them everywhere. dotstow - Manage dotfiles with stow. emplace - Synchronize installed packages on multiple machines using a dotfiles repository. Fisher - A package manager for Fish fresh - Keep your dotfiles fresh. Fresh is a tool to source shell configuration (aliases, functions, etc) from others into your own configuration files. GNU Stow - Symlink farm manager which takes distinct packages of software and/or data located in separate directories on the filesystem, and makes them appear to be installed in the same place. homeshick - Git dotfile synchronizer written in Bash. homesick - Your home directory is your castle. Don't leave your dotfiles behind (article). mackup - Keep your application settings in sync (OS X/Linux). Pearl - Package manager that allows to control, sync, share dotfiles as packages automatically activated during shells or editors startup. There is a wide range of packages already available in the Official Pearl Hub (for Linux and OSX). rcm - rc file (dotfile) management. themer - Manage and generate themes across your development tools from within your dotfiles. toml-bombadil - Templatize and manage your dotfiles. yadm - Tool for managing a collection of files across multiple computers, using a shared Git repository and some additional features. macOS dockutil - Command line tool for managing dock items mas - Mac App Store command line interface zero - Radically simple personal bootstrapping tool for macOS. Miscellaneous dotfiles.github.io - Your unofficial guide to dotfiles on GitHub. OS X Defaults - Centralized place for the awesome work started by @mathiasbynens on .macos. Filesystem Hierarchy Standard - Directory structure and directory contents in Linux distributions. XDG Base Directory Specification - Summary A lesson in shortcuts - How the idea of \"hidden\" or \"dot\" files was born, by Rob Pike (originally posted on Google+) Related Lists Awesome Dev Env - Curated list of awesome tools, resources and workflow tips making an awesome development environment. Awesome Fish - Curated list of packages, prompts, and resources for the fish shell. Awesome Shell - Curated list of awesome command-line frameworks, toolkits, guides and gizmos. Awesome Sysadmin - A curated list of amazingly awesome open source sysadmin resources. Awesome Zsh Plugins - List of Zsh plugins suitable for use with oh-my-zsh, antigen & Prezto. Terminals Are Sexy - A curated list of Terminal frameworks, plugins & resources for CLI lovers. Archive/abandoned projects Bashstrap battleschool Bork Cider dev-setup dotfiles Eduardo's dotfiles ellipsis holman does dotfiles Kevin's dotfiles kody osxc vcsh (article, article) License To the extent possible under law, Lars Kappert has waived all copyright and related or neighboring rights to this work. ",
        "_version_": 1718536436944207872
      },
      {
        "story_id": 19580860,
        "story_author": "yvonnick",
        "story_descendants": 69,
        "story_score": 377,
        "story_time": "2019-04-05T08:56:53Z",
        "story_title": "Design Tools for Everything",
        "search": [
          "Design Tools for Everything",
          "https://github.com/LisaDziuba/Awesome-Design-Tools",
          "Awesome Design Tools Awesome Design Plugins Awesome Design Conferences Awesome Design UI Kits Awesome Design Tools as a part of Flawless App family joins Abstract! Today, were excited to announce that Flawless App has joined Abstract, a design delivery platform that brings visibility, accountability, measurability, and predictability to design. Flawless App was our first company, and were proud of everything that weve achieved with our 5-person team. Since 2015, weve launched powerful tools for designers and developers among them are Flawless App, Reduce, Flawless Feedback. Weve also invested a lot of love and care into community-driven initiatives. Awesome Design Tools is one of them. So whats next? Our team has joined Abstract and is focused on building out the Abstract SDK, bringing developers experience forward. One unbelievable journey has finished and the new one has just begun. And if you want to know more about the future of Awesome Design Tools, please keep reading our FAQ. How to Use and Contribute Now you are in the Awesome Design Tools section, if you need plugins go to Awesome Design Plugins. To find the tool, go through the Table of Contents or search for a keyword (for example, \"animation\", \"prototyping\"). Ask Lisa on Twitter. If you found some great design tool or plugin, just send a Pull Request with respect to our Contribution Guidelines (they're very simple, please take a look). Design tools should be submitted here and plugins in Awesome Design Plugins file. We use such labels for free , open source and Mac only tools, don't forget to add them. Now I'd love to see your suggestions! Table of Content Accessibility Tools Animation Tools Augmented Reality Collaboration Tools Color Picker Tools Design Feedback Tools Design Handoff Tools Design Inspiration Design System Tools Design to Code Tools Design Version Control Development Tools Experience Monitoring Font Tools Gradient Tools Icons Tools Illustrations Information Architecture Logo Design Mockup Tools No Code Tools Pixel Art Tools Prototyping Tools Screenshot Software Sketching Tools SMM Design Tools Sound Design Stock Photos Tools Stock Videos Tools for Learning Design UI Design Tools User Flow Tools User Research Tools Visual Debugging Tools Wireframing Tools 3D Modeling Software Accessibility Tools Accessibility is the practice of creating websites and apps usable for all people, including individuals with visual, motor, auditory, speech, or cognitive disabilities. Here you will find web accessibility tools, accessibility testing tools, and accessibility apps both for developers and designers: Accessibility checking features are also available in VisBug from the Visual Debugging Tools category. Animation Tools Animations guide people through the product friendly and smoothly. Live interactive UI makes users feel delighted with instant feedback and emotional touch. These free and paid tools are designed to make animation creation easier. If you plan to make animated transitions, micro-interactions or scroll-based animations, go through these tools: Drama, Principle, Framer, Invision Studio, Flinto are also among UI & UX animation apps and software animation tools. Augmented Reality Augmented Reality is a technology that upgrades our real world, by adding a layer of digital information to it. The use of AR increases day by day with dozens of new AR apps, development kits, and AR frameworks. So in this section is collected different augmented reality tools for creating, projecting and prototyping apps focused on AR: Collaboration Tools Looking to try some tools for agile design and development collaboration? Good idea because such tools make the lives of designers and developers much easier, save time and improve productivity. Well, you know all that in Slack-driven era. Here you'll find the best collaboration tools for product teams: Airtable part spreadsheet, part database, and entirely flexible, teams use Airtable to organize their work, their way. Asana the work management platform teams use to stay focused on the goals, projects, and daily tasks that grow business. Basecamp the project management suite designed to organize employees, delegate tasks, and monitor progress right from one place. Freedcamp the most innovative way to manage projects, completely free... forever. Droplr screenshot, file sharing and screencasts to help you capture and explain your ideas. Excalidraw a whiteboard tool that lets you easily sketch diagrams with a hand-drawn feel. Filestage an agile content approval software that helps you to review videos, designs, and documents with clients and co-workers. Float a tool to plan your projects and schedule your teams time all in one place. Gallery a collaborative tool for uploading design work, getting feedback, and tracking revisions. HiveDesk an automatic time tracking for remote employees with screenshots. It makes it easier to monitor the productivity of remote employees and manage projects. Jira software development tool used by agile teams. Jitsi multi-platform open-source video conferencing you can install yourself or use on their servers. Keybase a free collaboration app with built-in end-to-end encrypted chat, file sharing, git repositories, and more Lumeer - an easy visual collaborative tool to plan, organize and track anything, anywhere, anytime. Mattermost a flexible, open-source messaging platform that meets even the most demanding privacy and security standards. Milanote an easy-to-use, collaborative tool to organize your ideas and projects into visual boards. Mixed real-time whiteboard and collaboration tools for distributed teams. Moqhub fast online proofing for creative projects. Get feedback for images and PDFs. MURAL think and collaborate visually. Anywhere, anytime. Nextcloud open source collaboration platform for files, kanban boards, chat & calls, calendar and more. Notion write, plan, collaborate, and get organized. Notion is all you need in one tool. ProofHub the one place for all your projects, teams and communications. RealtimeBoard (Miro) whiteboarding platform for cross-functional team collaboration. It was recently renamed to Miro. Slack a collaboration hub for work, no matter what work you do. Its a place where conversations happen, decisions are made, and information is always at your fingertips. Sunsama a beautifully designed, team-oriented task manager that consolidates Trello/Jira/Asana tickets into a single, calendar-oriented view. Taskade team productivity made simple, fun and designed for remote teams. Taskade is collaborative and syncs in real-time across the web, mobile, and desktop. Trello a web-based project management application that enables you to organize and prioritize your projects in a fun, flexible and rewarding way. Witeboard simple real-time whiteboard for collaboration work. Workzone a simple, powerful project management software. Wrike an online project management software that gives you full visibility and control over your tasks. Zenkit a tool to schedule meetings, track the projects progress, and brainstorm new ideas. zipBoard an online visual bug tracking and website annotation tool Zulip combines the immediacy of real-time chat with an email threading model, helping to focus on important conversations while ignoring irrelevant ones. Color Picker Tools If you are looking for an eyedropper tool, color identifier or color capture, check this section. With the color pickers mentioned here, you will be able to create new color combinations and define great ones. Almost all of these tools are free: BrandColors the biggest collection of official brand color codes around. Calcolor a web-based color palette management tool which provides a new way to interact with digital colors. Chroma free web app which allows you to identify the color. Color create color schemes with the color wheel or browse thousands of color combinations from the Color community. Made by Adobe. Color by Cloudflare a tool to preview palettes against UI elements, cycle through accessible color combos and create palettes manually, via URL import, or generatively. Color Deck an HSL driven color palette collection. It's also open-source. Color Hexa free color tool providing information about any color and generating matching color palettes for designs. Color Hex Picker - a tool for getting the name of any color from any image. You also get the HEX code and RGB value for the color. Color Hunt free and open platform for color inspiration with thousands of trendy hand-picked color palettes. ColorKit a tool for blending colors and generating a color's shades and tints. Color Leap leap through time and see the colors of history. Colorpicker a complete and open-source color manipulation tool with picking. ColorSlurp the ultimate color productivity booster for designers and developers. ColorsWall/ place to store your color palettes or easy generate. Colorwise search through the color palettes of the most voted products on Product Hunt. Colour Cafe colors inspiration that has selected a modern color palette on Instagram. Colourcode an online designer tool, which allows you to easily and intuitively combine colors. Coolors the super-fast color scheme generator. Culrs thoughtfully crafted and easy-to-use color palettes. Geenes a tool to create harmonious color themes with code and sketch file export. Image Color Picker image color picker and color scheme generator. Instant Eyedropper a minimalist eyedropper tool for windows, supports multiple color formats for both designers and developers. Just Color Picker Free portable offline color picker and color editor. Khroma AI-based tool to generate color palettes based on your preferences. Material Colors Native Google's material design color palette in the form of a mac app. Material Design Palette Generator get perfect Material Design color palettes from any hex color. Paletton a designer tool for creating color combinations that work together well. Picular a rocket fast primary color generator using Google's image search. Pigment a color palette generator with innumerable color configurations suggested by the app. Pikka color picker & color schemes generator for macOS. React Color a collection of color pickers from Sketch, Photoshop, Chrome. Its free and open-source. Sip a better way to collect, organize and share colors. Global eyedropper tool for macOS. Skala Color works with a huge variety of formats, covering everything youre likely to need for web, iOS, Android, and macOS development. Swatches iOS app that lets you collect, inspect and share the colors that inspire you in your daily life. Tint & Shade Generator display tints and shades of a given hex color in 10% increments. Viz Palette color picker for data visualizations. You can also create color palettes with Leonardo, which is mentioned in the Accessibility Tools section. Design Feedback Tools How do you provide and get feedback during the development process? This process is usually pretty messy for many product teams, which caused product delays and time waste on back-and-forth communication. So if you wish to get fast and structural feedback on UI issues or visual bugs take a look at this tool: Flawless Feedback review and annotate iOS apps then share your feedback in Jira or Trello. GoVisually online proofing, design review & approval software. Design Handoff Tools Design handoff happens when designers finish the work and need to deliver designs to developers with all specs and assets. Design handoff tools allow to automatically generate style guide, comment on the design, inspect elements. These tools minimize guesswork and improve the effectiveness of the design process. You can also make a design handoff within Relay, mentioned in the Design Version Control section. Design Inspiration The creative process can be tough. So if ideas dont come to your mind right away, try to search for inspiration in the work of other designers. These design inspiration sites feature design patterns, user flows, email markups and creative solutions of popular companies and great products: Behance an online platform to showcase & discover creative work. CodeMyUI handpicked collection of web design & UI inspiration with code snippets. Collect UI a platform for your daily inspiration collected from Daily UI & beyond. Based on Dribbble shots, 14419 handpicked designs. Creative Portfolios a curation of the most creative portfolios made by designers & developers. Design Hunt a daily collection of the best products, apps, and inspirations for all creatives. Dribbble an online community for showcasing user-made artwork. A great resource to get inspired by others work. Ficture a font in use archive that will inspire you. Inspiration UI a community that aims to provide the best design resources for those who create for the web. Hover States showcase great work from the bleeding edge of digital culture for, and with, the creative community. Httpster an inspiration resource showcasing rocking websites made by people from all over the world. H69.Design landing page colletions & Free resources for designers. Lapa Ninja landing page design inspiration from around the web. 1800+ landing page examples and updated daily. Mobile Patterns a design inspirational library featuring finest UI UX Patterns (iOS and Android). Mobbin browse mobile design patterns for popular apps. Explore common user flows such as onboarding, account sign up and log in, core functionality, and more. One Page Love a collection of beautiful unique One Page websites for website design inspiration. Owwly home for digital products crafted with passion to design. Page Flows user flow videos and screenshots to inspire you when you're stuck. Discover mobile and web design patterns for over 160 different tasks. pttrns design patterns for popular mobile apps. Really Good Emails 4,150+ handpicked email design. ReallyGoodUX screenshots, and examples of great UX from real mobile and web products. Discover the best UX examplesincluding onboarding tours and walkthroughs. Saas Landing Page iscover the best landing page examples created by top-class SaaS companies, and get ideas and inspiration for your next design project. Saas Pages a collection of the best landing pages with a focus on copywriting and design. The Design Team comics about a design team for a tech startup in Silicon Valley. Typewolf helps designers choose the perfect font combination for their next design project. UI Garage the one-stop shop for designers, developers, and marketers to find inspiration, tools and the best resources. UI Sources over 500+ interactions from the best designed and top-grossing apps on the App Store today. UI Recipes weekly 15 min lessons on UI design from the hottest apps. UX Archive browse more than 400 user flows across 120 mobile apps. Examine tasks such as booking, logging in, onboarding, purchasing, searching, and more. Waveguide a design knowledge bank with thousands of artificially enriched examples of product and brand experience (examples of Mobile App, Landing pages, eCommerce, CX/UX Patterns). Web Design Museum over 1,200 carefully selected web sites that show web design trends between the years 1994 and 2006. Design System Tools I bet you heard about Design Systems, as its a pretty trendy topic. Design systems provide consistent, robust design patterns to keep design and development in sync. They are essentially collections of rules, constraints, and principles, implemented in design and code. Here you can find tools to build, maintain and organize your design system. Cabana a Premium Design System for Sketch that helps you create amazing products faster than ever before. Catalog a living style guide for digital products, combining design documentation with real live components. Design System Manager Invision's design system manager. DSK short for Design System Kit a workbench for collaboratively creating Design Systems. EOS Design System an open-source and customizable built on top of Bootstrap following the Atomic Design concept. Eva Design System customizable design system, available for Sketch with Mobile and Web component libraries. Frontify create graphical guidelines, patterns libraries, design systems. Interplay connect design and engineering around a single source of truth. The tool is not publicly available yet (beta). Lingo create a shared asset library with your entire team. Lucid tool for creating, managing and sharing a design system. From a simple component library through to detailed descriptions of your styles. Modulz design, build, document and publish your design systemwithout writing code. Prime Design System Kit it includes device templates, charts, UI kit and even illustration kit. Specify a tool to create, scale and maintain a design system. Storybook an open-source tool for developing UI components in isolation for React, Vue, and Angular. Symbol Design System design System for Sketch-based on atomic elements. Toolabs design systems and components based design, prototype and development tool. It's not public yet but you can apply to the early access. Zeroheight style guides created by designers, extended by developers, and editable by everyone. We can also add to this in Sketch, Figma, UXPin and Framer X (Framer X Team Store). Design to Code Tools Everyone can learn development but it takes time and effort. If you need a website or an app right now and you dont want to hire a developer, pay attention to the website builders. Such design to code tools will help you to make a portfolio, simple landing or an app pretty fast and beautiful. Anima a web app with a Sketch plugin that converts Sketch to HTML. Blocs a fast, easy to use and powerful visual web design tool, that lets you create responsive websites without writing code. Bootstrap Studio a powerful web design tool for creating responsive websites using the Bootstrap framework. Draftbit visually design and build mobile apps directly from your browser. EasyLogic Studio fantastic css+svg design tool, also it is converted into code as shown. Grapedrop design your components, web projects and publish them instantly online, with an easy to use editor. Mobirise an offline drag and drop website builder software that is based on Bootstrap 3/4 and \\ AMP. PageCloud the fastest and most customizable website builder that allows anyone to create their ideal website. PaintCode vector drawing app that instantly converts drawings into Swift, Objective-C, JavaScript or Java code. Pinegrow a professional visual editor for CSS Grid, Bootstrap 4 and 3, Foundation, responsive design, HTML, and CSS. px.div a proper site build tool for developers and designers. Readymag a visually-pleasing tool for designing on the web from landing pages to multimedia long-reads, presentations and portfolios. Sparkle the easiest way to make a real website, no code, no jargon. STUDIO design from scratch, collaborate in real-time and publish websites. Supernova Studio import designs from Sketch and convert them into Android, iOS or React Native code. Tilda create a website, landing page or online store for free with the help of Tilda modules and publish it on the same day. Wix the easiest and fullest-featured website builder, that allows you to create your own highly customized site. Webflow build responsive websites in your browser, then host with us or export your code to host wherever. Design Version Control Developers actively use version control tools for a long time, probably since 2005 (Git first release). Using a version control system is no brainer for dev teams, while the design version control system appeared only recently. This market is rapidly developing and we expect to see even more in version control for designers: Development Tools This section mentions development tools and browsers. Development browsers have features that help developers and designers create and test websites and apps. Experience Monitoring Listening to users is important but seeing the real usage is even more crucial. For these, you need to install different analytic tools, experience monitoring software, and user behavior apps. Just use those analytics solutions concerning users data: Font Tools Fonts are commonly used for making the web a more beautiful place. Its an essential part of any design. In this section, youll find fonts generators & font finder tools that allow you to manage and work with fonts: BeFonts a Decent collection of free fonts. Behance Free Fonts a list of free fonts uploaded on Behance. DaFont archive of freely downloadable fonts. Browse by alphabetical listing, by style, by author or by popularity. Emotype makes it easy to find fonts based on the emotions you want to convey on your website. Fontbase font management made easy. FontFabric gorgeous interface and good collection. Fontface Ninja browser extension to discover what fonts are being used on any website. FontPair a simple tool that helps you pair Google Fonts together. Fontown a typographic tool with a nonstop growing font catalog which facilitates designer workflow. Fonts thousands of beautiful fonts by Adobe. Fonts Arena curated typography website with high-quality free fonts, done-for-you research articles, free alternatives to premium fonts, news, and more. FontGet variety of fonts all sorted neatly with tags. FontSelf an extension for Illustrator and Photoshop CC that lets you turn any lettering into OpenType fonts in minutes! FontSpark a simple tool to help designers quickly find the best fonts for their projects. Font Squirrel download free fonts with wide collections. Google Fonts making the web more beautiful, fast, and open through great typography. Google Webfonts Helper a hassle way to self-host Google Fonts. Its free and open-source. LostType the first Pay-What-You-Want type foundry. Measure measure typographic line lengths with this browser extension for Chrome. RightFont font managing app, helps preview, sync, install and organize fonts over iCloud, Dropbox or Google Drive. Sans Forgetica a downloadable font that is scientifically designed to help you remember your study notes. Size Calculator calculate the perceived size using viewing distance and physical size of the printed typography. Typeface font manager that improves your design workflow with live font previews and flexible tagging. Wakamai Fondue the tool that answers the question \"what can my font do?\". Web Font Preview preview Google Font pairings with components and site templates. Webfont create and maintain custom SVG icon fonts, made a shared library of icons. WordMarkIt displays your written word/phrase with all the fonts which are already installed on your computer. You can also handle fonts with Specify, which is mentioned in the Design System Tools section. Gradient Tools You can see gradient colors are everywhere UI, branding, illustration, typography. A gradient is created by using two or more different colors to paint one element while gradually fading between them. It might look as a memorable, fresh and unique color. To make such a gradient for your design, use these gradient color palettes. You can also create and audit gradients with Leonardo, which is mentioned in the Accessibility Tools section. Icons Tools As well as fonts, icons are used in every design. These basic elements support and guide many user actions inside the product. Without a doubt, icons are a vital element in user navigation. While making those small design elements is hard and time-consuming, you can get thousands of vector icons for personal and commercial use. Animaticons a growing set of beautiful, high-resolution, animated GIF icons that you can customize. CoreUI Icons premium designed free icon set with marks in SVG, Webfont and raster formats. Digital Nomad Icons lifestyle icon & emoji pack for your next project. 25 high-resolution flat icons. Essential Glyphs created to cover your needs in perfect-shaped icons. Adapted for small and large sizes. Feather Icons each icon is designed on a 24x24 grid with an emphasis on simplicity, consistency, and readability. Flaticon 1593000+ vector icons in SVG, PSD, PNG, EPS format or as icon font. Font Awesome the web's most popular icon set and toolkit, also it's open source. Fontello tool to build custom fonts with icons, also open source. Freepik collection of exclusive freebies and all graphic resources that you need for your projects. Iconscout get high-quality Icons, Illustrations and Stock photos at one place. Iconfinder a marketplace for vector icons (SVG). Icon sets available in IconJar format. IconJar store all your icons in one icon manager. Iconmonstr discover 4412+ free icons in 305 collections.Big and continuously growing source of simple icons. Iconset free, cross-platform and fast SVG icon organizer working on Mac and Windows. Icon Store a library of free vector icons for personal and commercial projects, designed by first-class designers. ICONSVG a tool to simplify the process of finding and generating common icons for your project. Icons8 free iOS, Android and Windows styled icons. Ikonate customize, adjust and download free vector icons. illustrio a smarter icon library. Build something great with 100% customizable icons. Ionicons beautifully crafted open source icons. Material Design Icons free material design icons made possible by open source contributons. Material Icons Library free collection of 1000+ icons for popular graphics tools. Motion free, simple animated icon editor. Norde Source mac, Windows and Linux app to color and customize icon sets to fit your brand. Noun Project icons for everything. Nucleo a Mac and Windows app to collect, customize and export all your icons. Orion Icons SVG vector icons with an advanced interactive web app. Simple Icons free SVG icons for popular brands. Simply click the icon you want, and the download should start automatically. Share Icon more than 300 000 free download icons in different formats. Streamline Emoji a free collection of 850 + vector emoji. The style is inspired by the japanese Kawaii (cute) style. Svgsus SVG icon management tool. SVG Colorizer a tool to automatically change the entire color palette of any given SVG icon pack intelligently keeping the shades, highlights & shadows. SVGRepo a site with 300.000+ SVG Vectors and Icons. Tilda Icons download free icons for landing pages. More than 700 vector icons, collected in 43 sets for business. Twemoji Twitters open-source emoji has you covered for all your project's emoji needs. Unicons 1000+ pixel-perfect vector icons for your next project. VisualPharm free SVG Icons with super-fast search and free Coke. Built for fun by Icons8. Xicons free vector icons, that update every 10 days. Zwicon handcrafted icon set for your next project. You can also handle icons with Specify, which is mentioned in the Design System Tools section. Illustrations Illustrations can be used on your landing page, blog posts, inside your app or email campaign. They make your design live and playful. While drawing good illustration is a task of a skilled graphic designer, you can grab free SVG images & illustrations from very kind people in our community: Absurd Design free surrealist illustrations for your projects. Blobmaker create vector blob illustrations in the browser, with varying colour, complexity and contrast. Blush create, mix and customize illustrations made by artists around the world. Humaaans a free library to mix-&-match illustrations of people. Illustration by Pngtree over 13142 professionally designed illustrations of different styles. IRA Design create amazing illustrations, using hand-drawn sketch components, a cool selection of 5 gradients and ai., svg. or png. formats. JoeSchmoe an illustrated avatar collection for developers and designers, perfect as placeholders or live sites. LukaszAdam free vector art illustrations and icons. They are available for personal and commercial use. ManyPixels royalty-free illustrations to power up your projects. Mega Doodles Pack big vector pack with hand-drawn doodles for presentations, social media, blog posts and so on. Open Doodles a set of free illustrations by Pablo Stanley that embraces the idea of Open Design. You can copy, edit, remix, share, or redraw these images for any purpose without restriction under copyright or database law (CC0 license.). Ouch vector illustrations to class up your project. Free for both personal and commercial use. Squircley - all you need to start creating beautiful SVG squircles. unDraw a collection of beautiful SVG images. Wannapik a collection of free illustrations, vector images, photos, and animations for any use. Information Architecture Information architecture helps designers organize and structure content inside websites, mobile apps, and other software. So users will understand product functionality and will find everything needed. These information architecture tools should allow you to create visual sitemaps and to improve your website content structure: DYNO Mapper organize website projects using visual sitemaps, content inventory, content audit, content planning, daily keyword tracking, and website accessibility testing. Octopus.do visual sitemap builder. Build your website structure in real-time and rapidly share it to collaborate with your team or clients. OmniGraffle reate beautiful diagrams and designs with this powerful and easy to use app. OptimalSort card sorting tool that allows you to understand how people categorize content in your UI. Treejack upload your proposed sitemap to see how a user would move through your site. WriteMaps create sitemaps that impress! Plan out the pages and content for your next website project in a visual, fun, and beautiful manner. Logo Design A logo is the starting point of your brand identity. It reflects the product mission, functionality and brand message. Ideally, the logo creates a strong connection between your product and the users. Logo design is an art, as well as many other design disciplines. With the right logo design tools, this art can be done right a bit faster. You can also do your logo design with Adobe Photoshop, GIMP, Inkscape, Krita and Vectr which are mentioned in UI design tools. Mockup Tools A mockup is a visual way of representing the product. While a wireframe mostly represents a products structure, a mockup shows how the product is going to look like. These mockup tools that help you create and collaborate on mockups, wireframes, diagrams, and prototypes: Artboard Studio online graphic design application mainly focused on product mockups. Cleanmock create stunning mockups using the latest device frames like iPhone & custom backgrounds. Craftwork Design free and premium high-quality digital products that make your work faster and easier. Device Shots a tool that helps you create beautiful device mockups with the screenshot of your website or mobile application, for free. Devices by Facebook images and Sketch files of popular devices. Dimmy.club device mockup generator for your website and app screenshots. Frrames Frrames mockups is perfectly crafted responsive windows mockups for your ideal presentation. Lstore Graphics free and premium mockups, UI/UX tools, scene creators for busy designers. Mediamodifier create impressive product mockups in seconds. Mockflow the quickest way to brainstorm user interface ideas. Mockup World tons of free and legal, fully layered, easily customizable photo realistic PSDs. Mockups For Free free design resources, PSD files for graphic and web designers. Mockuuups drag-and-drop tool for creating beautiful app previews or any marketing materials. Mock Video instantly create mockups by adding a device frame to your videos. Moqups helps you create and collaborate in real-time on wireframes, mockups, diagrams and prototypes. Original Mockups high-quality mockups for Photoshop that make your designs stand out. Overframe for Mac record your prototype & app with device frame overlay. PixelBuddha free and premium high-quality resources for web designers and developers. Ramotion Store carefully crafted Apple and Android mockups for Sketch and Photoshop. Rotato animated 3D mockups for your app designs. SceneLab create realistic mockups and customized brand designs online. Screely quickly frame web page designs into a minimalist browser window. ScreenSpace 3D devices videos for motion designer. Screenzy instantly transform your pictures and screenshots into beautiful mockups ready to be shared on social media. Screeener use this app to insert a bunch of images to a keynote file, using the mockup you choose. Smartmockups create stunning product mockups with just a few clicks. shotsnapp create beautiful device mockup presentation for your digital app and website design. The Mockup Club a directory of the best free design mockups for Photoshop, Sketch, Figma and InVision Studio. Threed generate custom 3D Device Mockups in your Browser. UI Store Design 200+ free handpicked design resources for Sketch, Figma, Adobe XD, InVision Studio, Photoshop, Illustrator CC. UI8 Design Freebies epic design freebies to get you started. Vector Mockups Library free collection of presentation Mockups for Sketch, Figma & Photoshop. No Code Tools With a rise of no code tools, everyone with a laptop can build and launch a project. These tools help designers and makers create websites, apps, and even games. No code tools allow to automate routine tasks and can be used without a development background. Take a look at the tools here and if you need more check Design to Code section. Bubble build and host web applications without having to write code or hire a team of engineers. Carrd simple, free, fully responsive one-page sites for pretty much anything. Coda a new type of document that blends the flexibility of documents, the power of spreadsheets, and the utility of apps into a single new canvas. Kodika.io build iOS apps with Kodika no code app builder for Mac & iPad, capable of creating powerful apps with Drag & Drop. PageXL a simple one-page website builder for quickly creating landing pages and online stores. Remove.bg a free service to remove the background of any photo. Retool gives you building blocks and you can build tools much faster. sheet2api create an API from Google Sheets or Excel Online Spreadsheets, no coding required. Sheet2Site create a website from Google Sheets without writing code. Shopify one platform with all the e-commerce and point of sale features you need to start, run, and grow your business. Thunkable a drag-and-drop tool for anyone to build native mobile apps. UserGuiding create walkthroughs, checklists, hotspots, and modals to improve user onboarding. Pixel Art Tools Pixel art is a digital art form where color is applied to individual pixels to create an image. The pixel art can be used to create everything from intricate scenes and game backgrounds to character designs or emoji. If you feel curious to try, check this pixel art software for both macOS and Windows: Prototyping Tools A prototype is a simple experimental design of a proposed solution. It should help to test ideas, design assumptions, and hypotheses in a fast and cheap way. Prototyping tools allow designers and clients to see how the product would function in the real world and collaborate on this solution. Many modern prototyping tools can use for wireframing, prototyping, and collaboration: Alva create living prototypes with code components. It's also open source. Axure RP wireframing, prototyping, collaboration & specifications generation. SAP Build a complete set of cloudbased tools to design and build your enterprise app. Creo prototyping, code exporting and built-in mobile app builder. Drama prototype, animate and design in a single Mac app. InVision prototyping, collaboration & workflow platform. Flinto a Mac app for creating interactive and animated prototypes of app designs. Framer X a tool to visually design realistic interactive prototypes. Keynote the built-in Mac app for creating presentations that can also be used for quick prototyping (see how Apple designers use it in the WWDC 2014 session \"Prototyping: Fake It Till You Make It\" to verify design concepts). Lightwell visual tool and SDK to build mobile layouts and animations that translate into native iOS elements. Marvel App the collaborative design platform. Wireframe, prototype, design online and create design specs in one place. Maze a tool for designers and developers that gives analytical results with actionable KPIs for your Invision prototypes. Origami a free tool for designing modern user interfaces. Quickly put together a prototype, run it on your iPhone or iPad, iterate on it, and export code snippets your engineers can use. Pencil prototyping tool with many built-in components that people can easily install and use to create mockups in popular desktop platforms. Principle makes it easy to design animated and interactive user interfaces. ProtoPie piece hi-fi interactions together, build sensor-aided prototypes and share your amazing creations in a matter of minutes. Proto.io a tool to create fully-interactive high-fidelity prototypes that look and work exactly as your app should. Prott an easy to use and intuitive prototyping tool, promotes team collaboration. Uizard transform wireframes into high-fidelity interactive prototypes, customize style systems, export to Sketch, export to HTML/CSS code. Useberry a usability testing tool that allows importing prototypes from InVision, AdodeXD, Sketch, Marvel and getting users behavior insights with heatmaps, video recordings, user flows, time bars and answers of follow-up questions. UXPin build prototypes that feel real, with powers of code components, logic, states, and design systems. You can also do prototyping with Figma, Adobe XD, Sketch and InVision Studio, which are mentioned in the UI Design Tools section. Screenshot Software Taking screenshots is a typical task in the design & development workflow. So these free and full-featured screenshot apps can help you capture a screen with ease. Some screen captures are macOS only, while others support both OS: Camtasia a screen recorder that comes with a full-blown built-in editor. CleanShot capture your screen in a superior way with a built-in annotation tool and Quick Access Overlay. CloudApp record videos, webcam, annotate screenshots, create GIFs. Collabshot take and collaborate on screenshots in real-time with your coworkers. Gifox delightful GIF recording and sharing app. Giphy Capture capture parts of your screen and export as gif or mp4. Greenshot take a screenshot of a selected region, window or fullscreen. Kap open source screen recorder with options to export to GIF, MP4, WebM and APNG. Lighshot taking quick captures of your screen. Monosnap create screenshots, annotate and upload them to the cloud. OBS open source software for video recording and live streaming. Quicktime a video player that you can use to record your screen. ScreenFlow video editing and screen recording software for Mac. Screenie filter and search through images, change screenshot filetypes. ScreenshotAPI.net create pixel-perfect full page website screenshots. ScreenToGif record a gif of part of the screen. Only available for Windows. ShareX screen capture, file sharing, and productivity tool. Shotty a menu bar app that helps you quickly find the screenshot you're looking for so you can drag and drop it into any application. Snagit capture images and video, create GIFs, annotate, edit, and share. Snipping Tool Windows free screenshot tool. Snappy takes quick shots and organizes them for you into collections. Teampaper Snap allows you to take screenshots of a selected area. Sketching Tools Sometimes you need just a pencil and paper to start creating your app or website. So here are you can find online sketching tools with great sketch sheet templates to speed up your creative process: You can also do some sketching with Sketch mentioned in UI design tools. SMM Design Tools Often marketing teams need well-design materials. It can be different banners, promo visuals, favicons, animations or just nice images for social platforms, like Twitter or Instagram. It this section we will keep adding tools for everyone to create marketing designs. Sound Design Sound design is an art of creating a soundscape for a site, app, movie, game or any other product. The sound has great potential for transforming the way people connect with your product. Some sound design software is very advanced and can be used mostly by sound designers, while others are good for beginners. Appsounds UI Sound packs for apps, games, and any product. AudioJungle 836,206 tracks and sounds from the community of musicians and sound engineers. Bensound download creative commons music, royalty free music for free and use it in your project. Freesound a collaborative database of Creative Commons Licensed sounds. Browse, download and share sounds. Fugue Music download free background music for your videos. Max connect objects with virtual patch cords to create interactive sounds, graphics, and custom effects. Reaper import any audio and MIDI, synthesize, sample, compose, arrange, edit, mix, and master songs or any other audio projects. Sonic Pi a live coding music synth. SoundKit a UI sound library designed for all of your interface needs. UI Sounds learn sound design for user interfaces by example. Wistia Music download some free background tracks to add energy and emotion to your videos. WOWA download royalty-free music for YouTube videos, podcasts, and apps. No copyright CC0. Music inspired by Unsplash. YouTube Audio Library browse and download free music for your project. Stock Photos Tools Need a high-quality photo for iOS app or new banner? You can always shoot it yourself or borrow from the stock photo sites. Luckily, there are hundreds of beautiful, free stock photos and royalty-free images that you can use for any project: Burst free stock photos for websites and commercial use. Duotone free duotone images to use in any project, or make custom duotone images. Death to Stock paid-for stock photo service with a mailing list for occasional free packs, and a focus on not looking like stock photography. FoodiesFeed thousands of beautiful realistic free food pictures in high resolution. FreePhotos.cc free stock photos for commercial use. Freestocks.org high quality photos all released under Creative Commons CC0. Gratisography a collection of free high-resolution pictures. Jay Mantri 7 new photos released every Thursday under the Creative Commons CC0. Kaboom Pics stock photos including abstract, city/architecture, fashion, food & landscapes. LandingStock a collection of free images for your landing page. Life of Pix free high-resolution photos, created by the LEEROY team. LoremPixel an API that serves stock photos at specified sizes and categories. Great for placeholder/user-generated content. Magdeleine free high-quality stock photos for your inspiration. Moose don't search for stock photos, create them. MMT STock high-resolution photos provided by Jeffrey Betts with Creative Commons CC0. New Old Stock a vintage photos from the public archives free of known copyright restrictions. Pexels an aggregate of many free stock photo resources. Photo Creator a free tool for creating realistic stock photos on your demand. Picography free stock photos by Dave Meier and various other photographers with Creative Commons CC0. Pixabay sharing photos, illustrations, vector graphics, and film footage under a proprietary license. Picjumbo a collection of totally free photos for your commercial & personal works. Pngtree millions of PNG images, backgrounds and vectors for free download. pxhere free image stock. Reshot a massive library of handpicked free stock photos you wont find elsewhere. ShotStash thousands of free high-resolution CC0 photos and videos. SkitterPhoto a wide variety of stock photos and are released under Creative Commons CC0. Startup Stock Photos free photos for startups, bloggers and publishers. StockSnap.io a large selection of free stock photos and high-resolution images. StyledStock free feminine stock photography for every woman entrepreneur. The Gender Spectrum Collection a stock photo library featuring images of trans and non-binary models that go beyond the clichs. UI Faces an aggregator that indexes various free avatar sources that you can use in your design mockups. Unsplash stock photos free to use. #WOCinTech Chat Photos free stock photos of women technologists of diverse backgrounds. Zoommy helps you find awesome free stock photos for your creative product or inspiration. Stock Videos If you work with video-content, you will enjoy these high-quality, hand-curated stock videos. You'll find many good and free stock video sites below, which you can use on your website, in your ad campaigns or social media: Tools for Learning Design UI Design Tools What are the best UI design tools in 2019? You can pick any of the tools below and it will allow you to do dozens of design tasks UI for site or mobile, wireframe, prototype, animation, logo. These are great and fully-functional tools for UX & UI designers: Adobe XD design, prototype, and share any user experience, from websites and mobile apps to voice interactions. Affinity Designer a vector graphics editor for macOS, iOS, and Microsoft Windows. Akira native Linux App for UI and UX Design built in Vala and Gtk. Botmock design, prototype, and test voice and text conversational apps. Supports multiple platforms. CleverBrush a browser-based online vector editor and digital publishing tool which is possible to integrate to the page as JS component. Figma a design tool based in the browser, that allows to design and prototype with real-time collaboration. GIMP a free & open-source imaging and graphic design software. Gravit a free vector design app, available for macOS, Windows, Linux, ChromeOS, and browser. Illustrator create logos, icons, drawings, typography, and illustrations for print, web, video, and mobile. Made by Adobe. Inkscape a free and open-source vector graphics editor. It can create or edit vector graphics such as illustrations, diagrams, line arts, charts, logos, and complex paintings. Krita a free painting and graphic design software considered a good alternative to Adobe Photoshop. Lunacy a free native windows app that works offline and supports .sketch files. Flexible and light weighed. Intuitive and easy to use. Speedups and empowers UI and UX designers. The must have to produce stunning designs. Photopea a free browser-based graphic design app alternative to Photoshop. Photoshop imaging and graphic design software developed by Adobe. Pixelixe a graphic design tool built for marketers, bloggers and small businesses that needs to create stunning and unique images, graphics or static webpages in minutes. Sketch a design toolkit built for Mac. Studio combines design, prototyping, and collaboration into one harmonious workflow. Made by InVision. TwitPile creates tiled images out of Twitter followers, interests and lists. Vectr a simple web and desktop cross-platform tool to create vector graphics easily and intuitively. Voiceflow prototype, design and deploy real apps for Amazon Alexa & Google Home. User Flow Tools User flow is a series of steps a user takes to achieve a meaningful goal. It's a fast way to plan customer journey paths and improve UX. So if you need to make a user flow diagram, user flow map or a sitemap, take a look at these tools: Draw.io a free online diagram software for making flowcharts, process diagrams, org charts, UML, ER, and network diagrams. Flowmapp an online tool for creating sitemaps and user flows that helps you to effectively design and plan user experience. Google Drawings create diagrams and charts, for free; all within Google Docs. Lucidchart an online tool for creating diagrams, flow charts, sitemaps, and more. MindNode a mind mapping app that makes brainstorming simple and easy. NinjaMock wireframe and user flow online tool. Link your views and create logic flow prototype. All with freehand visual style. OmniGraffle a diagramming and digital illustration application for macOS and iOS. Overflow turn your designs into playable user flow diagrams that tell a story. Sketch.systems ui and flow design with interactive state machines. SQUID create beautiful User Flows in Sketch in just minutes. WebSequenceDiagrams a simple webapp to work out object interactions arranged in time sequence. Whimsical easy to create flow charts, wireframes and sticky notes. Wireflow free, online and open source tool for creating beautiful user flow prototypes. XMind: ZEN a brainstorming and mind mapping tool that can switch between outline and tree-chart. Link topics with other charts. yEd free desktop tool for making diagrams. Usable for the wide variety of use cases. Auto-layout helps a lot when making flowcharts. User Research Tools User research helps you understand user behaviors, needs, and motivations through various qualitative and quantitative methods (interviews, observation, forms, etc). These user research tools can be useful for you: Appoint.ly a web-based scheduling tool that helps to schedule meetings quickly through the integration with calendars online. Calendly Calendly helps you schedule meetings without the back-and-forth emails. Crowd Signal collect, organize and analyze data from a variety of sources, including social media and mobile. Doodle online calendar tool for time management, and coordinating events, meetings, appointments Evolt create user personas, storyboards, business model canvas, experience maps, brainstorming boards and moodboards in a clean and modern way. Feedback Lite collect high quality customer feedback using Voice of Customer solutions designed to improve your website performance and boost customer engagement. GoToMeeting a simple, extraordinarily powerful web conferencing service. Handrail end-to-end, collaborative user research and insights platform plan research, collect and analyze data, and share your findings. JotForm create online forms, get an email for each response, collect data. Lookback remotely run, record, and take notes for your user research sessions, either with a live product or with a prototype. MineTime a free calendar app with smart scheduling and time analytics features. Reflector Reflector is a basic screen-mirroring and recording tool so you can conduct user tests remotely, using any existing wireframes or prototypes. Reframer a research tool that helps your team to capture, tag (code) and identify patterns in qualitative data across multiple research participants. Sticktail a platform for centralizing, finding and sharing user insights within your organization. Survey Monkey online survey tool to capture the voices and opinions of the people who matter most to you. Typeform use a simple drag-and-drop interface to create any kind of form, survey, or questionnaire, and even take credit card payments. Wufoo reate forms, collect data and payments and automate your workflows. YesInsights simple one question and NPS surveys to improve your business. UserBit a platform of real-time research tools for your team. Tag/code interviews and feedback, capture insights, create personas, visual sitemaps and more. User Interviews recruit participants from a community of 125,000 members based on profession, demographics, geography and more, for any kind of research. Zoom it's one of the best online meeting services. Visual Debugging Tools Wireframing Tools A wireframe is a visual mockup that outlines the basic structure of the site or an app. It contains the most essential elements and the content, helping you easily explain ideas on design. Wireframes are a low-fidelity way of showing a design. This section is presented the best wireframing tools for a variety of use cases. Three D Modeling Software 3D graphics are used in gaming, film making, architecture, engineering, and 3D printing. 3D artists & designers use specific 3D modeling software, mentioned in this section. Autodesk integrated CAD, CAM, and CAE software. Unify design, engineering, and manufacturing into a single platform. Blender free and open-source 3D Creation Software. FreeCAD a free and open-source multiplatform 3D parametric modeler. MatterControl a free, open-source, all-in-one software package that lets you design, slice, organize and manage your 3D prints. Maya make animations, environments, motion graphics, virtual reality, and character creation, all in one toolset. Onshape a modeling software specially oriented to design technical and spare parts, was the first full-cloud 3D software created. OpenSCAD a software for creating solid 3D CAD objects. Rhino a curve-based 3D modeling software that creates mathematically-precise models of 3D surfaces. SketchUp 3D design software that truly makes 3D modeling for everyone, with a simple to learn yet robust toolset. Tinkercad a free, easy-to-use app for 3D design, electronics, and coding. Vectary create beautiful 3D models with our drag and drop 3D modeling tool. 3D Slash 3D modeling tool, available on all devices and all OS, online and offline. Addendum (Reference & Inspiration) Awesome Design Tools & Plugins is curated by Lisa Dziuba & Valia Havruliyk from Flawless team. And it was hugely inspired by articles from the design community and Prototypr.io Toolbox made by our good friend Graeme Fulton. If you found some great design tools, please suggest it. Thanks for making this project awesome :) "
        ],
        "story_type": "Normal",
        "url_raw": "https://github.com/LisaDziuba/Awesome-Design-Tools",
        "comments.comment_id": [19581294, 19581612],
        "comments.comment_author": ["koolba", "Crinus"],
        "comments.comment_descendants": [2, 5],
        "comments.comment_time": [
          "2019-04-05T10:45:34Z",
          "2019-04-05T11:55:18Z"
        ],
        "comments.comment_text": [
          "I read the title as an imperative statement and was disappointed that it’s just yet another GitHub “<i>Awesome list of...</i>”.<p>Was really hoping for an article about building custom tooling as I feel like a lot of my day is spent doing exactly that (ie mini tools to automate recurring semi manual tasks).",
          "These lists are a nice idea, but i do not like the execution - they are little more than a dump of someone's bookmarks. Personally i'd like to see a bit more information about each entry, including screenshots and a short explanation about the program.<p>Something like Softpedia would be great (although simpler), although preferably without garbage reviews like this: <a href=\"https://www.softpedia.com/get/Programming/Coding-languages-Compilers/DMD.shtml\" rel=\"nofollow\">https://www.softpedia.com/get/Programming/Coding-languages-C...</a> (for a bonus WTF check the screenshot).<p>Alternatively (and probably easier to do) something like tinyapps.org but with a bit more information per entry."
        ],
        "id": "3ababea7-66be-4d78-8bf1-0c573fa369b8",
        "url_text": "Awesome Design Tools Awesome Design Plugins Awesome Design Conferences Awesome Design UI Kits Awesome Design Tools as a part of Flawless App family joins Abstract! Today, were excited to announce that Flawless App has joined Abstract, a design delivery platform that brings visibility, accountability, measurability, and predictability to design. Flawless App was our first company, and were proud of everything that weve achieved with our 5-person team. Since 2015, weve launched powerful tools for designers and developers among them are Flawless App, Reduce, Flawless Feedback. Weve also invested a lot of love and care into community-driven initiatives. Awesome Design Tools is one of them. So whats next? Our team has joined Abstract and is focused on building out the Abstract SDK, bringing developers experience forward. One unbelievable journey has finished and the new one has just begun. And if you want to know more about the future of Awesome Design Tools, please keep reading our FAQ. How to Use and Contribute Now you are in the Awesome Design Tools section, if you need plugins go to Awesome Design Plugins. To find the tool, go through the Table of Contents or search for a keyword (for example, \"animation\", \"prototyping\"). Ask Lisa on Twitter. If you found some great design tool or plugin, just send a Pull Request with respect to our Contribution Guidelines (they're very simple, please take a look). Design tools should be submitted here and plugins in Awesome Design Plugins file. We use such labels for free , open source and Mac only tools, don't forget to add them. Now I'd love to see your suggestions! Table of Content Accessibility Tools Animation Tools Augmented Reality Collaboration Tools Color Picker Tools Design Feedback Tools Design Handoff Tools Design Inspiration Design System Tools Design to Code Tools Design Version Control Development Tools Experience Monitoring Font Tools Gradient Tools Icons Tools Illustrations Information Architecture Logo Design Mockup Tools No Code Tools Pixel Art Tools Prototyping Tools Screenshot Software Sketching Tools SMM Design Tools Sound Design Stock Photos Tools Stock Videos Tools for Learning Design UI Design Tools User Flow Tools User Research Tools Visual Debugging Tools Wireframing Tools 3D Modeling Software Accessibility Tools Accessibility is the practice of creating websites and apps usable for all people, including individuals with visual, motor, auditory, speech, or cognitive disabilities. Here you will find web accessibility tools, accessibility testing tools, and accessibility apps both for developers and designers: Accessibility checking features are also available in VisBug from the Visual Debugging Tools category. Animation Tools Animations guide people through the product friendly and smoothly. Live interactive UI makes users feel delighted with instant feedback and emotional touch. These free and paid tools are designed to make animation creation easier. If you plan to make animated transitions, micro-interactions or scroll-based animations, go through these tools: Drama, Principle, Framer, Invision Studio, Flinto are also among UI & UX animation apps and software animation tools. Augmented Reality Augmented Reality is a technology that upgrades our real world, by adding a layer of digital information to it. The use of AR increases day by day with dozens of new AR apps, development kits, and AR frameworks. So in this section is collected different augmented reality tools for creating, projecting and prototyping apps focused on AR: Collaboration Tools Looking to try some tools for agile design and development collaboration? Good idea because such tools make the lives of designers and developers much easier, save time and improve productivity. Well, you know all that in Slack-driven era. Here you'll find the best collaboration tools for product teams: Airtable part spreadsheet, part database, and entirely flexible, teams use Airtable to organize their work, their way. Asana the work management platform teams use to stay focused on the goals, projects, and daily tasks that grow business. Basecamp the project management suite designed to organize employees, delegate tasks, and monitor progress right from one place. Freedcamp the most innovative way to manage projects, completely free... forever. Droplr screenshot, file sharing and screencasts to help you capture and explain your ideas. Excalidraw a whiteboard tool that lets you easily sketch diagrams with a hand-drawn feel. Filestage an agile content approval software that helps you to review videos, designs, and documents with clients and co-workers. Float a tool to plan your projects and schedule your teams time all in one place. Gallery a collaborative tool for uploading design work, getting feedback, and tracking revisions. HiveDesk an automatic time tracking for remote employees with screenshots. It makes it easier to monitor the productivity of remote employees and manage projects. Jira software development tool used by agile teams. Jitsi multi-platform open-source video conferencing you can install yourself or use on their servers. Keybase a free collaboration app with built-in end-to-end encrypted chat, file sharing, git repositories, and more Lumeer - an easy visual collaborative tool to plan, organize and track anything, anywhere, anytime. Mattermost a flexible, open-source messaging platform that meets even the most demanding privacy and security standards. Milanote an easy-to-use, collaborative tool to organize your ideas and projects into visual boards. Mixed real-time whiteboard and collaboration tools for distributed teams. Moqhub fast online proofing for creative projects. Get feedback for images and PDFs. MURAL think and collaborate visually. Anywhere, anytime. Nextcloud open source collaboration platform for files, kanban boards, chat & calls, calendar and more. Notion write, plan, collaborate, and get organized. Notion is all you need in one tool. ProofHub the one place for all your projects, teams and communications. RealtimeBoard (Miro) whiteboarding platform for cross-functional team collaboration. It was recently renamed to Miro. Slack a collaboration hub for work, no matter what work you do. Its a place where conversations happen, decisions are made, and information is always at your fingertips. Sunsama a beautifully designed, team-oriented task manager that consolidates Trello/Jira/Asana tickets into a single, calendar-oriented view. Taskade team productivity made simple, fun and designed for remote teams. Taskade is collaborative and syncs in real-time across the web, mobile, and desktop. Trello a web-based project management application that enables you to organize and prioritize your projects in a fun, flexible and rewarding way. Witeboard simple real-time whiteboard for collaboration work. Workzone a simple, powerful project management software. Wrike an online project management software that gives you full visibility and control over your tasks. Zenkit a tool to schedule meetings, track the projects progress, and brainstorm new ideas. zipBoard an online visual bug tracking and website annotation tool Zulip combines the immediacy of real-time chat with an email threading model, helping to focus on important conversations while ignoring irrelevant ones. Color Picker Tools If you are looking for an eyedropper tool, color identifier or color capture, check this section. With the color pickers mentioned here, you will be able to create new color combinations and define great ones. Almost all of these tools are free: BrandColors the biggest collection of official brand color codes around. Calcolor a web-based color palette management tool which provides a new way to interact with digital colors. Chroma free web app which allows you to identify the color. Color create color schemes with the color wheel or browse thousands of color combinations from the Color community. Made by Adobe. Color by Cloudflare a tool to preview palettes against UI elements, cycle through accessible color combos and create palettes manually, via URL import, or generatively. Color Deck an HSL driven color palette collection. It's also open-source. Color Hexa free color tool providing information about any color and generating matching color palettes for designs. Color Hex Picker - a tool for getting the name of any color from any image. You also get the HEX code and RGB value for the color. Color Hunt free and open platform for color inspiration with thousands of trendy hand-picked color palettes. ColorKit a tool for blending colors and generating a color's shades and tints. Color Leap leap through time and see the colors of history. Colorpicker a complete and open-source color manipulation tool with picking. ColorSlurp the ultimate color productivity booster for designers and developers. ColorsWall/ place to store your color palettes or easy generate. Colorwise search through the color palettes of the most voted products on Product Hunt. Colour Cafe colors inspiration that has selected a modern color palette on Instagram. Colourcode an online designer tool, which allows you to easily and intuitively combine colors. Coolors the super-fast color scheme generator. Culrs thoughtfully crafted and easy-to-use color palettes. Geenes a tool to create harmonious color themes with code and sketch file export. Image Color Picker image color picker and color scheme generator. Instant Eyedropper a minimalist eyedropper tool for windows, supports multiple color formats for both designers and developers. Just Color Picker Free portable offline color picker and color editor. Khroma AI-based tool to generate color palettes based on your preferences. Material Colors Native Google's material design color palette in the form of a mac app. Material Design Palette Generator get perfect Material Design color palettes from any hex color. Paletton a designer tool for creating color combinations that work together well. Picular a rocket fast primary color generator using Google's image search. Pigment a color palette generator with innumerable color configurations suggested by the app. Pikka color picker & color schemes generator for macOS. React Color a collection of color pickers from Sketch, Photoshop, Chrome. Its free and open-source. Sip a better way to collect, organize and share colors. Global eyedropper tool for macOS. Skala Color works with a huge variety of formats, covering everything youre likely to need for web, iOS, Android, and macOS development. Swatches iOS app that lets you collect, inspect and share the colors that inspire you in your daily life. Tint & Shade Generator display tints and shades of a given hex color in 10% increments. Viz Palette color picker for data visualizations. You can also create color palettes with Leonardo, which is mentioned in the Accessibility Tools section. Design Feedback Tools How do you provide and get feedback during the development process? This process is usually pretty messy for many product teams, which caused product delays and time waste on back-and-forth communication. So if you wish to get fast and structural feedback on UI issues or visual bugs take a look at this tool: Flawless Feedback review and annotate iOS apps then share your feedback in Jira or Trello. GoVisually online proofing, design review & approval software. Design Handoff Tools Design handoff happens when designers finish the work and need to deliver designs to developers with all specs and assets. Design handoff tools allow to automatically generate style guide, comment on the design, inspect elements. These tools minimize guesswork and improve the effectiveness of the design process. You can also make a design handoff within Relay, mentioned in the Design Version Control section. Design Inspiration The creative process can be tough. So if ideas dont come to your mind right away, try to search for inspiration in the work of other designers. These design inspiration sites feature design patterns, user flows, email markups and creative solutions of popular companies and great products: Behance an online platform to showcase & discover creative work. CodeMyUI handpicked collection of web design & UI inspiration with code snippets. Collect UI a platform for your daily inspiration collected from Daily UI & beyond. Based on Dribbble shots, 14419 handpicked designs. Creative Portfolios a curation of the most creative portfolios made by designers & developers. Design Hunt a daily collection of the best products, apps, and inspirations for all creatives. Dribbble an online community for showcasing user-made artwork. A great resource to get inspired by others work. Ficture a font in use archive that will inspire you. Inspiration UI a community that aims to provide the best design resources for those who create for the web. Hover States showcase great work from the bleeding edge of digital culture for, and with, the creative community. Httpster an inspiration resource showcasing rocking websites made by people from all over the world. H69.Design landing page colletions & Free resources for designers. Lapa Ninja landing page design inspiration from around the web. 1800+ landing page examples and updated daily. Mobile Patterns a design inspirational library featuring finest UI UX Patterns (iOS and Android). Mobbin browse mobile design patterns for popular apps. Explore common user flows such as onboarding, account sign up and log in, core functionality, and more. One Page Love a collection of beautiful unique One Page websites for website design inspiration. Owwly home for digital products crafted with passion to design. Page Flows user flow videos and screenshots to inspire you when you're stuck. Discover mobile and web design patterns for over 160 different tasks. pttrns design patterns for popular mobile apps. Really Good Emails 4,150+ handpicked email design. ReallyGoodUX screenshots, and examples of great UX from real mobile and web products. Discover the best UX examplesincluding onboarding tours and walkthroughs. Saas Landing Page iscover the best landing page examples created by top-class SaaS companies, and get ideas and inspiration for your next design project. Saas Pages a collection of the best landing pages with a focus on copywriting and design. The Design Team comics about a design team for a tech startup in Silicon Valley. Typewolf helps designers choose the perfect font combination for their next design project. UI Garage the one-stop shop for designers, developers, and marketers to find inspiration, tools and the best resources. UI Sources over 500+ interactions from the best designed and top-grossing apps on the App Store today. UI Recipes weekly 15 min lessons on UI design from the hottest apps. UX Archive browse more than 400 user flows across 120 mobile apps. Examine tasks such as booking, logging in, onboarding, purchasing, searching, and more. Waveguide a design knowledge bank with thousands of artificially enriched examples of product and brand experience (examples of Mobile App, Landing pages, eCommerce, CX/UX Patterns). Web Design Museum over 1,200 carefully selected web sites that show web design trends between the years 1994 and 2006. Design System Tools I bet you heard about Design Systems, as its a pretty trendy topic. Design systems provide consistent, robust design patterns to keep design and development in sync. They are essentially collections of rules, constraints, and principles, implemented in design and code. Here you can find tools to build, maintain and organize your design system. Cabana a Premium Design System for Sketch that helps you create amazing products faster than ever before. Catalog a living style guide for digital products, combining design documentation with real live components. Design System Manager Invision's design system manager. DSK short for Design System Kit a workbench for collaboratively creating Design Systems. EOS Design System an open-source and customizable built on top of Bootstrap following the Atomic Design concept. Eva Design System customizable design system, available for Sketch with Mobile and Web component libraries. Frontify create graphical guidelines, patterns libraries, design systems. Interplay connect design and engineering around a single source of truth. The tool is not publicly available yet (beta). Lingo create a shared asset library with your entire team. Lucid tool for creating, managing and sharing a design system. From a simple component library through to detailed descriptions of your styles. Modulz design, build, document and publish your design systemwithout writing code. Prime Design System Kit it includes device templates, charts, UI kit and even illustration kit. Specify a tool to create, scale and maintain a design system. Storybook an open-source tool for developing UI components in isolation for React, Vue, and Angular. Symbol Design System design System for Sketch-based on atomic elements. Toolabs design systems and components based design, prototype and development tool. It's not public yet but you can apply to the early access. Zeroheight style guides created by designers, extended by developers, and editable by everyone. We can also add to this in Sketch, Figma, UXPin and Framer X (Framer X Team Store). Design to Code Tools Everyone can learn development but it takes time and effort. If you need a website or an app right now and you dont want to hire a developer, pay attention to the website builders. Such design to code tools will help you to make a portfolio, simple landing or an app pretty fast and beautiful. Anima a web app with a Sketch plugin that converts Sketch to HTML. Blocs a fast, easy to use and powerful visual web design tool, that lets you create responsive websites without writing code. Bootstrap Studio a powerful web design tool for creating responsive websites using the Bootstrap framework. Draftbit visually design and build mobile apps directly from your browser. EasyLogic Studio fantastic css+svg design tool, also it is converted into code as shown. Grapedrop design your components, web projects and publish them instantly online, with an easy to use editor. Mobirise an offline drag and drop website builder software that is based on Bootstrap 3/4 and \\ AMP. PageCloud the fastest and most customizable website builder that allows anyone to create their ideal website. PaintCode vector drawing app that instantly converts drawings into Swift, Objective-C, JavaScript or Java code. Pinegrow a professional visual editor for CSS Grid, Bootstrap 4 and 3, Foundation, responsive design, HTML, and CSS. px.div a proper site build tool for developers and designers. Readymag a visually-pleasing tool for designing on the web from landing pages to multimedia long-reads, presentations and portfolios. Sparkle the easiest way to make a real website, no code, no jargon. STUDIO design from scratch, collaborate in real-time and publish websites. Supernova Studio import designs from Sketch and convert them into Android, iOS or React Native code. Tilda create a website, landing page or online store for free with the help of Tilda modules and publish it on the same day. Wix the easiest and fullest-featured website builder, that allows you to create your own highly customized site. Webflow build responsive websites in your browser, then host with us or export your code to host wherever. Design Version Control Developers actively use version control tools for a long time, probably since 2005 (Git first release). Using a version control system is no brainer for dev teams, while the design version control system appeared only recently. This market is rapidly developing and we expect to see even more in version control for designers: Development Tools This section mentions development tools and browsers. Development browsers have features that help developers and designers create and test websites and apps. Experience Monitoring Listening to users is important but seeing the real usage is even more crucial. For these, you need to install different analytic tools, experience monitoring software, and user behavior apps. Just use those analytics solutions concerning users data: Font Tools Fonts are commonly used for making the web a more beautiful place. Its an essential part of any design. In this section, youll find fonts generators & font finder tools that allow you to manage and work with fonts: BeFonts a Decent collection of free fonts. Behance Free Fonts a list of free fonts uploaded on Behance. DaFont archive of freely downloadable fonts. Browse by alphabetical listing, by style, by author or by popularity. Emotype makes it easy to find fonts based on the emotions you want to convey on your website. Fontbase font management made easy. FontFabric gorgeous interface and good collection. Fontface Ninja browser extension to discover what fonts are being used on any website. FontPair a simple tool that helps you pair Google Fonts together. Fontown a typographic tool with a nonstop growing font catalog which facilitates designer workflow. Fonts thousands of beautiful fonts by Adobe. Fonts Arena curated typography website with high-quality free fonts, done-for-you research articles, free alternatives to premium fonts, news, and more. FontGet variety of fonts all sorted neatly with tags. FontSelf an extension for Illustrator and Photoshop CC that lets you turn any lettering into OpenType fonts in minutes! FontSpark a simple tool to help designers quickly find the best fonts for their projects. Font Squirrel download free fonts with wide collections. Google Fonts making the web more beautiful, fast, and open through great typography. Google Webfonts Helper a hassle way to self-host Google Fonts. Its free and open-source. LostType the first Pay-What-You-Want type foundry. Measure measure typographic line lengths with this browser extension for Chrome. RightFont font managing app, helps preview, sync, install and organize fonts over iCloud, Dropbox or Google Drive. Sans Forgetica a downloadable font that is scientifically designed to help you remember your study notes. Size Calculator calculate the perceived size using viewing distance and physical size of the printed typography. Typeface font manager that improves your design workflow with live font previews and flexible tagging. Wakamai Fondue the tool that answers the question \"what can my font do?\". Web Font Preview preview Google Font pairings with components and site templates. Webfont create and maintain custom SVG icon fonts, made a shared library of icons. WordMarkIt displays your written word/phrase with all the fonts which are already installed on your computer. You can also handle fonts with Specify, which is mentioned in the Design System Tools section. Gradient Tools You can see gradient colors are everywhere UI, branding, illustration, typography. A gradient is created by using two or more different colors to paint one element while gradually fading between them. It might look as a memorable, fresh and unique color. To make such a gradient for your design, use these gradient color palettes. You can also create and audit gradients with Leonardo, which is mentioned in the Accessibility Tools section. Icons Tools As well as fonts, icons are used in every design. These basic elements support and guide many user actions inside the product. Without a doubt, icons are a vital element in user navigation. While making those small design elements is hard and time-consuming, you can get thousands of vector icons for personal and commercial use. Animaticons a growing set of beautiful, high-resolution, animated GIF icons that you can customize. CoreUI Icons premium designed free icon set with marks in SVG, Webfont and raster formats. Digital Nomad Icons lifestyle icon & emoji pack for your next project. 25 high-resolution flat icons. Essential Glyphs created to cover your needs in perfect-shaped icons. Adapted for small and large sizes. Feather Icons each icon is designed on a 24x24 grid with an emphasis on simplicity, consistency, and readability. Flaticon 1593000+ vector icons in SVG, PSD, PNG, EPS format or as icon font. Font Awesome the web's most popular icon set and toolkit, also it's open source. Fontello tool to build custom fonts with icons, also open source. Freepik collection of exclusive freebies and all graphic resources that you need for your projects. Iconscout get high-quality Icons, Illustrations and Stock photos at one place. Iconfinder a marketplace for vector icons (SVG). Icon sets available in IconJar format. IconJar store all your icons in one icon manager. Iconmonstr discover 4412+ free icons in 305 collections.Big and continuously growing source of simple icons. Iconset free, cross-platform and fast SVG icon organizer working on Mac and Windows. Icon Store a library of free vector icons for personal and commercial projects, designed by first-class designers. ICONSVG a tool to simplify the process of finding and generating common icons for your project. Icons8 free iOS, Android and Windows styled icons. Ikonate customize, adjust and download free vector icons. illustrio a smarter icon library. Build something great with 100% customizable icons. Ionicons beautifully crafted open source icons. Material Design Icons free material design icons made possible by open source contributons. Material Icons Library free collection of 1000+ icons for popular graphics tools. Motion free, simple animated icon editor. Norde Source mac, Windows and Linux app to color and customize icon sets to fit your brand. Noun Project icons for everything. Nucleo a Mac and Windows app to collect, customize and export all your icons. Orion Icons SVG vector icons with an advanced interactive web app. Simple Icons free SVG icons for popular brands. Simply click the icon you want, and the download should start automatically. Share Icon more than 300 000 free download icons in different formats. Streamline Emoji a free collection of 850 + vector emoji. The style is inspired by the japanese Kawaii (cute) style. Svgsus SVG icon management tool. SVG Colorizer a tool to automatically change the entire color palette of any given SVG icon pack intelligently keeping the shades, highlights & shadows. SVGRepo a site with 300.000+ SVG Vectors and Icons. Tilda Icons download free icons for landing pages. More than 700 vector icons, collected in 43 sets for business. Twemoji Twitters open-source emoji has you covered for all your project's emoji needs. Unicons 1000+ pixel-perfect vector icons for your next project. VisualPharm free SVG Icons with super-fast search and free Coke. Built for fun by Icons8. Xicons free vector icons, that update every 10 days. Zwicon handcrafted icon set for your next project. You can also handle icons with Specify, which is mentioned in the Design System Tools section. Illustrations Illustrations can be used on your landing page, blog posts, inside your app or email campaign. They make your design live and playful. While drawing good illustration is a task of a skilled graphic designer, you can grab free SVG images & illustrations from very kind people in our community: Absurd Design free surrealist illustrations for your projects. Blobmaker create vector blob illustrations in the browser, with varying colour, complexity and contrast. Blush create, mix and customize illustrations made by artists around the world. Humaaans a free library to mix-&-match illustrations of people. Illustration by Pngtree over 13142 professionally designed illustrations of different styles. IRA Design create amazing illustrations, using hand-drawn sketch components, a cool selection of 5 gradients and ai., svg. or png. formats. JoeSchmoe an illustrated avatar collection for developers and designers, perfect as placeholders or live sites. LukaszAdam free vector art illustrations and icons. They are available for personal and commercial use. ManyPixels royalty-free illustrations to power up your projects. Mega Doodles Pack big vector pack with hand-drawn doodles for presentations, social media, blog posts and so on. Open Doodles a set of free illustrations by Pablo Stanley that embraces the idea of Open Design. You can copy, edit, remix, share, or redraw these images for any purpose without restriction under copyright or database law (CC0 license.). Ouch vector illustrations to class up your project. Free for both personal and commercial use. Squircley - all you need to start creating beautiful SVG squircles. unDraw a collection of beautiful SVG images. Wannapik a collection of free illustrations, vector images, photos, and animations for any use. Information Architecture Information architecture helps designers organize and structure content inside websites, mobile apps, and other software. So users will understand product functionality and will find everything needed. These information architecture tools should allow you to create visual sitemaps and to improve your website content structure: DYNO Mapper organize website projects using visual sitemaps, content inventory, content audit, content planning, daily keyword tracking, and website accessibility testing. Octopus.do visual sitemap builder. Build your website structure in real-time and rapidly share it to collaborate with your team or clients. OmniGraffle reate beautiful diagrams and designs with this powerful and easy to use app. OptimalSort card sorting tool that allows you to understand how people categorize content in your UI. Treejack upload your proposed sitemap to see how a user would move through your site. WriteMaps create sitemaps that impress! Plan out the pages and content for your next website project in a visual, fun, and beautiful manner. Logo Design A logo is the starting point of your brand identity. It reflects the product mission, functionality and brand message. Ideally, the logo creates a strong connection between your product and the users. Logo design is an art, as well as many other design disciplines. With the right logo design tools, this art can be done right a bit faster. You can also do your logo design with Adobe Photoshop, GIMP, Inkscape, Krita and Vectr which are mentioned in UI design tools. Mockup Tools A mockup is a visual way of representing the product. While a wireframe mostly represents a products structure, a mockup shows how the product is going to look like. These mockup tools that help you create and collaborate on mockups, wireframes, diagrams, and prototypes: Artboard Studio online graphic design application mainly focused on product mockups. Cleanmock create stunning mockups using the latest device frames like iPhone & custom backgrounds. Craftwork Design free and premium high-quality digital products that make your work faster and easier. Device Shots a tool that helps you create beautiful device mockups with the screenshot of your website or mobile application, for free. Devices by Facebook images and Sketch files of popular devices. Dimmy.club device mockup generator for your website and app screenshots. Frrames Frrames mockups is perfectly crafted responsive windows mockups for your ideal presentation. Lstore Graphics free and premium mockups, UI/UX tools, scene creators for busy designers. Mediamodifier create impressive product mockups in seconds. Mockflow the quickest way to brainstorm user interface ideas. Mockup World tons of free and legal, fully layered, easily customizable photo realistic PSDs. Mockups For Free free design resources, PSD files for graphic and web designers. Mockuuups drag-and-drop tool for creating beautiful app previews or any marketing materials. Mock Video instantly create mockups by adding a device frame to your videos. Moqups helps you create and collaborate in real-time on wireframes, mockups, diagrams and prototypes. Original Mockups high-quality mockups for Photoshop that make your designs stand out. Overframe for Mac record your prototype & app with device frame overlay. PixelBuddha free and premium high-quality resources for web designers and developers. Ramotion Store carefully crafted Apple and Android mockups for Sketch and Photoshop. Rotato animated 3D mockups for your app designs. SceneLab create realistic mockups and customized brand designs online. Screely quickly frame web page designs into a minimalist browser window. ScreenSpace 3D devices videos for motion designer. Screenzy instantly transform your pictures and screenshots into beautiful mockups ready to be shared on social media. Screeener use this app to insert a bunch of images to a keynote file, using the mockup you choose. Smartmockups create stunning product mockups with just a few clicks. shotsnapp create beautiful device mockup presentation for your digital app and website design. The Mockup Club a directory of the best free design mockups for Photoshop, Sketch, Figma and InVision Studio. Threed generate custom 3D Device Mockups in your Browser. UI Store Design 200+ free handpicked design resources for Sketch, Figma, Adobe XD, InVision Studio, Photoshop, Illustrator CC. UI8 Design Freebies epic design freebies to get you started. Vector Mockups Library free collection of presentation Mockups for Sketch, Figma & Photoshop. No Code Tools With a rise of no code tools, everyone with a laptop can build and launch a project. These tools help designers and makers create websites, apps, and even games. No code tools allow to automate routine tasks and can be used without a development background. Take a look at the tools here and if you need more check Design to Code section. Bubble build and host web applications without having to write code or hire a team of engineers. Carrd simple, free, fully responsive one-page sites for pretty much anything. Coda a new type of document that blends the flexibility of documents, the power of spreadsheets, and the utility of apps into a single new canvas. Kodika.io build iOS apps with Kodika no code app builder for Mac & iPad, capable of creating powerful apps with Drag & Drop. PageXL a simple one-page website builder for quickly creating landing pages and online stores. Remove.bg a free service to remove the background of any photo. Retool gives you building blocks and you can build tools much faster. sheet2api create an API from Google Sheets or Excel Online Spreadsheets, no coding required. Sheet2Site create a website from Google Sheets without writing code. Shopify one platform with all the e-commerce and point of sale features you need to start, run, and grow your business. Thunkable a drag-and-drop tool for anyone to build native mobile apps. UserGuiding create walkthroughs, checklists, hotspots, and modals to improve user onboarding. Pixel Art Tools Pixel art is a digital art form where color is applied to individual pixels to create an image. The pixel art can be used to create everything from intricate scenes and game backgrounds to character designs or emoji. If you feel curious to try, check this pixel art software for both macOS and Windows: Prototyping Tools A prototype is a simple experimental design of a proposed solution. It should help to test ideas, design assumptions, and hypotheses in a fast and cheap way. Prototyping tools allow designers and clients to see how the product would function in the real world and collaborate on this solution. Many modern prototyping tools can use for wireframing, prototyping, and collaboration: Alva create living prototypes with code components. It's also open source. Axure RP wireframing, prototyping, collaboration & specifications generation. SAP Build a complete set of cloudbased tools to design and build your enterprise app. Creo prototyping, code exporting and built-in mobile app builder. Drama prototype, animate and design in a single Mac app. InVision prototyping, collaboration & workflow platform. Flinto a Mac app for creating interactive and animated prototypes of app designs. Framer X a tool to visually design realistic interactive prototypes. Keynote the built-in Mac app for creating presentations that can also be used for quick prototyping (see how Apple designers use it in the WWDC 2014 session \"Prototyping: Fake It Till You Make It\" to verify design concepts). Lightwell visual tool and SDK to build mobile layouts and animations that translate into native iOS elements. Marvel App the collaborative design platform. Wireframe, prototype, design online and create design specs in one place. Maze a tool for designers and developers that gives analytical results with actionable KPIs for your Invision prototypes. Origami a free tool for designing modern user interfaces. Quickly put together a prototype, run it on your iPhone or iPad, iterate on it, and export code snippets your engineers can use. Pencil prototyping tool with many built-in components that people can easily install and use to create mockups in popular desktop platforms. Principle makes it easy to design animated and interactive user interfaces. ProtoPie piece hi-fi interactions together, build sensor-aided prototypes and share your amazing creations in a matter of minutes. Proto.io a tool to create fully-interactive high-fidelity prototypes that look and work exactly as your app should. Prott an easy to use and intuitive prototyping tool, promotes team collaboration. Uizard transform wireframes into high-fidelity interactive prototypes, customize style systems, export to Sketch, export to HTML/CSS code. Useberry a usability testing tool that allows importing prototypes from InVision, AdodeXD, Sketch, Marvel and getting users behavior insights with heatmaps, video recordings, user flows, time bars and answers of follow-up questions. UXPin build prototypes that feel real, with powers of code components, logic, states, and design systems. You can also do prototyping with Figma, Adobe XD, Sketch and InVision Studio, which are mentioned in the UI Design Tools section. Screenshot Software Taking screenshots is a typical task in the design & development workflow. So these free and full-featured screenshot apps can help you capture a screen with ease. Some screen captures are macOS only, while others support both OS: Camtasia a screen recorder that comes with a full-blown built-in editor. CleanShot capture your screen in a superior way with a built-in annotation tool and Quick Access Overlay. CloudApp record videos, webcam, annotate screenshots, create GIFs. Collabshot take and collaborate on screenshots in real-time with your coworkers. Gifox delightful GIF recording and sharing app. Giphy Capture capture parts of your screen and export as gif or mp4. Greenshot take a screenshot of a selected region, window or fullscreen. Kap open source screen recorder with options to export to GIF, MP4, WebM and APNG. Lighshot taking quick captures of your screen. Monosnap create screenshots, annotate and upload them to the cloud. OBS open source software for video recording and live streaming. Quicktime a video player that you can use to record your screen. ScreenFlow video editing and screen recording software for Mac. Screenie filter and search through images, change screenshot filetypes. ScreenshotAPI.net create pixel-perfect full page website screenshots. ScreenToGif record a gif of part of the screen. Only available for Windows. ShareX screen capture, file sharing, and productivity tool. Shotty a menu bar app that helps you quickly find the screenshot you're looking for so you can drag and drop it into any application. Snagit capture images and video, create GIFs, annotate, edit, and share. Snipping Tool Windows free screenshot tool. Snappy takes quick shots and organizes them for you into collections. Teampaper Snap allows you to take screenshots of a selected area. Sketching Tools Sometimes you need just a pencil and paper to start creating your app or website. So here are you can find online sketching tools with great sketch sheet templates to speed up your creative process: You can also do some sketching with Sketch mentioned in UI design tools. SMM Design Tools Often marketing teams need well-design materials. It can be different banners, promo visuals, favicons, animations or just nice images for social platforms, like Twitter or Instagram. It this section we will keep adding tools for everyone to create marketing designs. Sound Design Sound design is an art of creating a soundscape for a site, app, movie, game or any other product. The sound has great potential for transforming the way people connect with your product. Some sound design software is very advanced and can be used mostly by sound designers, while others are good for beginners. Appsounds UI Sound packs for apps, games, and any product. AudioJungle 836,206 tracks and sounds from the community of musicians and sound engineers. Bensound download creative commons music, royalty free music for free and use it in your project. Freesound a collaborative database of Creative Commons Licensed sounds. Browse, download and share sounds. Fugue Music download free background music for your videos. Max connect objects with virtual patch cords to create interactive sounds, graphics, and custom effects. Reaper import any audio and MIDI, synthesize, sample, compose, arrange, edit, mix, and master songs or any other audio projects. Sonic Pi a live coding music synth. SoundKit a UI sound library designed for all of your interface needs. UI Sounds learn sound design for user interfaces by example. Wistia Music download some free background tracks to add energy and emotion to your videos. WOWA download royalty-free music for YouTube videos, podcasts, and apps. No copyright CC0. Music inspired by Unsplash. YouTube Audio Library browse and download free music for your project. Stock Photos Tools Need a high-quality photo for iOS app or new banner? You can always shoot it yourself or borrow from the stock photo sites. Luckily, there are hundreds of beautiful, free stock photos and royalty-free images that you can use for any project: Burst free stock photos for websites and commercial use. Duotone free duotone images to use in any project, or make custom duotone images. Death to Stock paid-for stock photo service with a mailing list for occasional free packs, and a focus on not looking like stock photography. FoodiesFeed thousands of beautiful realistic free food pictures in high resolution. FreePhotos.cc free stock photos for commercial use. Freestocks.org high quality photos all released under Creative Commons CC0. Gratisography a collection of free high-resolution pictures. Jay Mantri 7 new photos released every Thursday under the Creative Commons CC0. Kaboom Pics stock photos including abstract, city/architecture, fashion, food & landscapes. LandingStock a collection of free images for your landing page. Life of Pix free high-resolution photos, created by the LEEROY team. LoremPixel an API that serves stock photos at specified sizes and categories. Great for placeholder/user-generated content. Magdeleine free high-quality stock photos for your inspiration. Moose don't search for stock photos, create them. MMT STock high-resolution photos provided by Jeffrey Betts with Creative Commons CC0. New Old Stock a vintage photos from the public archives free of known copyright restrictions. Pexels an aggregate of many free stock photo resources. Photo Creator a free tool for creating realistic stock photos on your demand. Picography free stock photos by Dave Meier and various other photographers with Creative Commons CC0. Pixabay sharing photos, illustrations, vector graphics, and film footage under a proprietary license. Picjumbo a collection of totally free photos for your commercial & personal works. Pngtree millions of PNG images, backgrounds and vectors for free download. pxhere free image stock. Reshot a massive library of handpicked free stock photos you wont find elsewhere. ShotStash thousands of free high-resolution CC0 photos and videos. SkitterPhoto a wide variety of stock photos and are released under Creative Commons CC0. Startup Stock Photos free photos for startups, bloggers and publishers. StockSnap.io a large selection of free stock photos and high-resolution images. StyledStock free feminine stock photography for every woman entrepreneur. The Gender Spectrum Collection a stock photo library featuring images of trans and non-binary models that go beyond the clichs. UI Faces an aggregator that indexes various free avatar sources that you can use in your design mockups. Unsplash stock photos free to use. #WOCinTech Chat Photos free stock photos of women technologists of diverse backgrounds. Zoommy helps you find awesome free stock photos for your creative product or inspiration. Stock Videos If you work with video-content, you will enjoy these high-quality, hand-curated stock videos. You'll find many good and free stock video sites below, which you can use on your website, in your ad campaigns or social media: Tools for Learning Design UI Design Tools What are the best UI design tools in 2019? You can pick any of the tools below and it will allow you to do dozens of design tasks UI for site or mobile, wireframe, prototype, animation, logo. These are great and fully-functional tools for UX & UI designers: Adobe XD design, prototype, and share any user experience, from websites and mobile apps to voice interactions. Affinity Designer a vector graphics editor for macOS, iOS, and Microsoft Windows. Akira native Linux App for UI and UX Design built in Vala and Gtk. Botmock design, prototype, and test voice and text conversational apps. Supports multiple platforms. CleverBrush a browser-based online vector editor and digital publishing tool which is possible to integrate to the page as JS component. Figma a design tool based in the browser, that allows to design and prototype with real-time collaboration. GIMP a free & open-source imaging and graphic design software. Gravit a free vector design app, available for macOS, Windows, Linux, ChromeOS, and browser. Illustrator create logos, icons, drawings, typography, and illustrations for print, web, video, and mobile. Made by Adobe. Inkscape a free and open-source vector graphics editor. It can create or edit vector graphics such as illustrations, diagrams, line arts, charts, logos, and complex paintings. Krita a free painting and graphic design software considered a good alternative to Adobe Photoshop. Lunacy a free native windows app that works offline and supports .sketch files. Flexible and light weighed. Intuitive and easy to use. Speedups and empowers UI and UX designers. The must have to produce stunning designs. Photopea a free browser-based graphic design app alternative to Photoshop. Photoshop imaging and graphic design software developed by Adobe. Pixelixe a graphic design tool built for marketers, bloggers and small businesses that needs to create stunning and unique images, graphics or static webpages in minutes. Sketch a design toolkit built for Mac. Studio combines design, prototyping, and collaboration into one harmonious workflow. Made by InVision. TwitPile creates tiled images out of Twitter followers, interests and lists. Vectr a simple web and desktop cross-platform tool to create vector graphics easily and intuitively. Voiceflow prototype, design and deploy real apps for Amazon Alexa & Google Home. User Flow Tools User flow is a series of steps a user takes to achieve a meaningful goal. It's a fast way to plan customer journey paths and improve UX. So if you need to make a user flow diagram, user flow map or a sitemap, take a look at these tools: Draw.io a free online diagram software for making flowcharts, process diagrams, org charts, UML, ER, and network diagrams. Flowmapp an online tool for creating sitemaps and user flows that helps you to effectively design and plan user experience. Google Drawings create diagrams and charts, for free; all within Google Docs. Lucidchart an online tool for creating diagrams, flow charts, sitemaps, and more. MindNode a mind mapping app that makes brainstorming simple and easy. NinjaMock wireframe and user flow online tool. Link your views and create logic flow prototype. All with freehand visual style. OmniGraffle a diagramming and digital illustration application for macOS and iOS. Overflow turn your designs into playable user flow diagrams that tell a story. Sketch.systems ui and flow design with interactive state machines. SQUID create beautiful User Flows in Sketch in just minutes. WebSequenceDiagrams a simple webapp to work out object interactions arranged in time sequence. Whimsical easy to create flow charts, wireframes and sticky notes. Wireflow free, online and open source tool for creating beautiful user flow prototypes. XMind: ZEN a brainstorming and mind mapping tool that can switch between outline and tree-chart. Link topics with other charts. yEd free desktop tool for making diagrams. Usable for the wide variety of use cases. Auto-layout helps a lot when making flowcharts. User Research Tools User research helps you understand user behaviors, needs, and motivations through various qualitative and quantitative methods (interviews, observation, forms, etc). These user research tools can be useful for you: Appoint.ly a web-based scheduling tool that helps to schedule meetings quickly through the integration with calendars online. Calendly Calendly helps you schedule meetings without the back-and-forth emails. Crowd Signal collect, organize and analyze data from a variety of sources, including social media and mobile. Doodle online calendar tool for time management, and coordinating events, meetings, appointments Evolt create user personas, storyboards, business model canvas, experience maps, brainstorming boards and moodboards in a clean and modern way. Feedback Lite collect high quality customer feedback using Voice of Customer solutions designed to improve your website performance and boost customer engagement. GoToMeeting a simple, extraordinarily powerful web conferencing service. Handrail end-to-end, collaborative user research and insights platform plan research, collect and analyze data, and share your findings. JotForm create online forms, get an email for each response, collect data. Lookback remotely run, record, and take notes for your user research sessions, either with a live product or with a prototype. MineTime a free calendar app with smart scheduling and time analytics features. Reflector Reflector is a basic screen-mirroring and recording tool so you can conduct user tests remotely, using any existing wireframes or prototypes. Reframer a research tool that helps your team to capture, tag (code) and identify patterns in qualitative data across multiple research participants. Sticktail a platform for centralizing, finding and sharing user insights within your organization. Survey Monkey online survey tool to capture the voices and opinions of the people who matter most to you. Typeform use a simple drag-and-drop interface to create any kind of form, survey, or questionnaire, and even take credit card payments. Wufoo reate forms, collect data and payments and automate your workflows. YesInsights simple one question and NPS surveys to improve your business. UserBit a platform of real-time research tools for your team. Tag/code interviews and feedback, capture insights, create personas, visual sitemaps and more. User Interviews recruit participants from a community of 125,000 members based on profession, demographics, geography and more, for any kind of research. Zoom it's one of the best online meeting services. Visual Debugging Tools Wireframing Tools A wireframe is a visual mockup that outlines the basic structure of the site or an app. It contains the most essential elements and the content, helping you easily explain ideas on design. Wireframes are a low-fidelity way of showing a design. This section is presented the best wireframing tools for a variety of use cases. Three D Modeling Software 3D graphics are used in gaming, film making, architecture, engineering, and 3D printing. 3D artists & designers use specific 3D modeling software, mentioned in this section. Autodesk integrated CAD, CAM, and CAE software. Unify design, engineering, and manufacturing into a single platform. Blender free and open-source 3D Creation Software. FreeCAD a free and open-source multiplatform 3D parametric modeler. MatterControl a free, open-source, all-in-one software package that lets you design, slice, organize and manage your 3D prints. Maya make animations, environments, motion graphics, virtual reality, and character creation, all in one toolset. Onshape a modeling software specially oriented to design technical and spare parts, was the first full-cloud 3D software created. OpenSCAD a software for creating solid 3D CAD objects. Rhino a curve-based 3D modeling software that creates mathematically-precise models of 3D surfaces. SketchUp 3D design software that truly makes 3D modeling for everyone, with a simple to learn yet robust toolset. Tinkercad a free, easy-to-use app for 3D design, electronics, and coding. Vectary create beautiful 3D models with our drag and drop 3D modeling tool. 3D Slash 3D modeling tool, available on all devices and all OS, online and offline. Addendum (Reference & Inspiration) Awesome Design Tools & Plugins is curated by Lisa Dziuba & Valia Havruliyk from Flawless team. And it was hugely inspired by articles from the design community and Prototypr.io Toolbox made by our good friend Graeme Fulton. If you found some great design tools, please suggest it. Thanks for making this project awesome :) ",
        "_version_": 1718536467653853184
      }
    ]
  }
}
